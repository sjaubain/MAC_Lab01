1	Perlis, A. J.;Samelson,K.;	Preliminary Report-International Algebraic Language	
2	Sugai, I.;	Extraction of Roots by Repeated Subtractions for Digital Computers	
3	Friedman, M. D.;	Techniques Department on Matrix Program Schemes	
4		Glossary of Computer Engineering and Programming Terminology	
5	Wadey, W. G.;	Two Square-Root Approximations	
6	Muller, M. E.;	The Use of Computers in Inspection Procedures	
7		Glossary of Computer Engineering and Programming Terminology	
8	Friedman, M. D.;	On The Equivalence and Transformation of Program Schemes	
9	Conway, M. E.;	Proposal for an UNCOL	
10		Glossary of Computer Engineering and Programming Terminology	
11	Strong, J.;Wegstein, J.;Tritter, A.;Olsztyn, J.;Mock, O.;Steel, T.;	The Problem of Programming Communication withChanging Machines A Proposed Solution-Part 2	
12	Call, D. H.;Reeves, R. F.;	Error Estimation in Runge-Kutta Procedures	
13		Glossary of Computer Engineering and Programming Terminology	
14	Strong, J.;Wegstein, J.;Tritter, A.;Olsztyn, J.;Mock, O.;Steel, T.;	The Problem of Programming Communication withChanging Machines A Proposed Solution (Part 1)	
15	Giblin, J.;	Recursive Curve Fitting Technique	
16	Jeeves, T. A.;	Secant Modification of Newton's Method	
17	Ershov, A. P.;	On Programming of Arithmetic Operations	
18	Adams, E. S.;Schlesinger, S. I.;	Simple Automatic Coding Systems	
19		Glossary of Computer Engineering and Programming Terminology	
20	Wegstein, J. H.;	Accelerating Convergence of Iterative Processes	A technique is discussed which, when appliedto an iterative procedure for the solution ofan equation, accelerates the rate of convergence ifthe iteration converges and induces convergence ifthe iteration diverges.  An illustrative example is given.
21	Voorhees, E. A.;	Algebraic Formulation of Flow Diagrams	
22	Morris, E. F.;Wohr, T. E.;	Unusual Applications Department--AutomaticImplementation of Computer Logic	
23	Kautz, W. H.;	Binary and Truth-Function Operations ona Decimal Computer with an Extract Command	
24	Sisson, R. L.;	An Improved Decimal Redundancy Check	
25	Holt, A. W.;	General Purpose Programming Systems	
26	Bemer, R. W.;	A Subroutine Method for Calculating Logarithms	
27	Randels, J. B.;Reeves, R. F.;	Note On Empirical Bounds For Generating Bessel Functions	
28	Corley, H. P. T.;	Request for Methods or Programs	
29	Selden, W.;	Need for an Algorithm	
30	Wolpe, H.;	Algorithm for Analyzing Logical Statementsto Produce a Truth Function Table	
31	Grumette, M.;	IBM 704 Code-Nundrums	
32	Halpern, M.;	Variable-Width Tables with Binary-Search Facility	
33	Kenny, B. C.;Hunter, J. A.;	A Programmed Binary Counter For The IBM Type 650 Calculator	
34	Wilf, H. S.;	Tables for Automatic Computation	
35	Bemer, R. W.;	A Machine Method for Square-Root Computation	
36	Conway, R. W.;Johnson, B. M.;Maxwell, W. L.;	A Queue Network Simulator for the IBM 650 and Burroughs 220	
37	Humphrey, S. M.;	Impact of Computer Developments	
38	Irons, E. T.;Acton, F. S.;	A Proposed Interpretation in ALGOL	
39	Wolfe, P.;	The Secant Method for Simultaneous Nonlinear Equations	A procedure for the simultaneous solutionof a system of not-necessarily-linear equations,a generalization of the secant method for asingle function of one variable, is given.
40	Buchholz, W.;	Fingers or Fists? (The Choice of Decimal or Binary Representation)	The binary number system offers many advantagesover a decimal representation for a high-performance,general-purpose computer.  The greater simplicity ofa binary arithmetic unit and the greater compactnessof binary numbers both contribute directly to arithmeticspeed.  Less obvious and perhaps more importantis the way binary addressing and instruction formats canincrease the overall performance.  Binary addressesare also essential to certain powerful operations whichare not practical with decimal instruction formats.On the other hand, decimal numbers are essential forcommunicating between man and the computer.  Inapplications requiring the processing of a large volumeof inherently decimal input and output data,the time for decimal-binary conversion needed by a purelybinary computer may be significant.  A slowerdecimal adder may take less time than a fast binary adderdoing an addition and two conversions.  A carefulreview of the significance of decimal and binary addressingand both binary and decimal data arithmetic,supplemented by efficient conversion instructions.
41	Nadler, M.;	Some Notes on Computer Research in Eastern Europe	
42	Sarafyan, D.;	A New Method of Computation of Square Roots Without Using Division	
43	Greenwald, I. D.;	A Technique for Handling Macro Instructions	
44	Knuth, D. E.;	RUNCIBLE-Algebraic Translation on a Limited Computer	
45	Gant, W. T.;	Flow Outlining-A Substitute for Flow Charting	
46	Codd, E. F.;Lowry, E. S.;McDonough, E.;Scalzi, C. A.;	Multiprogramming STRETCH: Feasibility Considerations	The tendency towards increased parallelism incomputers is noted.  Exploitation of this parallelismpresents a number of new problems in machine designand in programming systems.  Minimum requirementsfor successful concurrent execution of several independentproblem programs are discussed.  These requirementsare met in the STRETCH system by a carefully balancedcombination of built-in and programmed logic.Techniques are described which place the burden of theprogrammed logic on system programs (supervisoryprogram and compiler) rather than on problem programs.
47	Zaitzeff, E. M.;Astrahan, M. M.;	Russian Visit to U.S. Computers	
48	Nadler, M.;Sengupta, A.;	Shift-Register Code for Indexing Applications	In this communication the use of a shift-registercode with n = 10 is described for calling64 wireless telemetering stations in a fixed cyclical order.A high degree of redundancy is used, permittinga single-error correcting code ("minimum-distance-three"code) with 64 10-bit code words to be employedas the station identification code.  Embedding this inthe shift-register code with period 1023 permitsthe code to be employed without punctuation, each ofthe telemetering station receivers simply puttingreceived ones and zeros into a shift register.  Eachtime the given code combination arises identifyingthe particular station (barring for tuitous error combinationsof very low probability) it has been called.The communication describes the properties and applicationof the code in some detail and the findingof the particular example to be employed on URAL, theSoviet-built drum computer donated to the IndianStatistical Institute by the United NationsTechnical Aid Administration (UNTAA).
49	Fike, C. T.;	Scientific and Business Applications (Oracle Curve Plotter)	
50	Hamblen, J. W.;	Statistical Programs for the IBM 650-Part II	
51	Gorn, S.;Ingerman, P. Z.;Crozier, J. B.;	On the Construction of Micro-Flowcharts	
52	Cook, J. M.;	An Efficient Method for Generating Uniformly DistributedPoints on the Surface on an n-DimensionalSphere (Corrigendum)	
53		Recommendations of the SHARE ALGOL Committee	
54	Brittenham, W. R.;Clark, K.;Kuss, G.;Thompson, H.;Smith, A. O.;	SALE, a Simple Algebraic Language for Engineers	
55	Kaner, H.;	An Algebraic Translator	
56		Proposed Standard Flow Chart Symbols	
57		J.E.I.D.A. and Its Computer Center	
58	Machmudov, U. A.;	LEM-1, Small Size General Purpose DigitalComputer Using Magnetic (Ferrite) Elements	The paper examines some of the questions ofdevelopment and construction of a general purposedigital computer using contactless magnetic (ferrite)and capacitive "DEZU" (long duration capacitivememory) elements, developed at the Laboratory of ElectricalModeling VINITYI AN SSSR, under the supervisionof Professor L.I. Gutenmacher.
59		Survey of Progress and Trend of Developmentand Use of Automatic Data Processing in Businessand Management control Systems of the FederalGovernment, as of December 1957-III	
60	Wersan, S. J.;	The Alpha Vector Transformation of a System of Linear Constraints	
61	Hornick, S. D.;	IBM 709 Tape Matrix Compiler	
62	Lesh, F. H.;	Multi-Dimensional Least-Squares Polynomial Curve Fitting	
63	Li, S. T.;	Octal Diagrams of Binary Conception andTheir Applicability to Computer Design Logic	This paper dates back the genesis of binaryconception circa 5000 years ago, and octal diagramsabout 4800 years ago, as derived by the Chinese ancients.It analyzes the applicability of binary trinitiesof the octal diagrams to modern electronic-digital-computer design logic.
64	Green, J.;	Remarks on ALGOL and Symbol Manipulation	
65	Dijkstra, E. W.;Heise, W.;Perlis, J. A.;Samelson, K.;	ALGOL Sub-Committee Report - Extensions	
66	Bemer, R. W.;	A Proposal for a Generalized Card Code for 256 Characters	
67	Blachman, N. M.;	Central-European Computers	
68	Fein, L.;	The Role of the University in Computers,Data Processing and Related Fields	A study was made of university programs inthe United States in the fields of computers, dataprocessing, operations research, and other closely relatedfields.  University policies, organization,administration, faculties, students, researches, curricula,equipment, and financing were investigated.An integrated university program is recommended reflectingthe conviction that many present activitiesrelated to computers will develop into disciplines andas such are the legitimate province of the universityscholar.  Details on a recommended GraduateSchool of "Computer Sciences" are given.
69	Hamblen, J. W.;	Statistical Programs for the IBM 650-Part I	A collection is given of brief descriptionsof statistical programs now in use in universitycomputing centers which have IBM 650's.
70	Aegerter, M. J.;	Construction of a Set of Test Matrices	This paper develops the equations and propertiesof a set of test matrices which are usefulin the determination of the accuracy of routines forfinding the inverse, determinant and/or eigenvaluesof a matrix.
71	Bagley, P. R.;	Proposal for a Feasible Programming System	This paper proposes designing a programmingfacility (itself involving a digital computer anda program) which will assist the preparation of large-scalereal-time programs.  This facility is tobe capable of preparing programs for any of a varietyof machines having characteristics similar to thoseof the facility's computer.  One of the basic assumptionsis that there will be enough random-accessstorage available to avoid the necessity for segmentinga constructed program in any fashion other thana trivial one.  While this assumption is somewhat unrealistic,it is intended to provide an opportunityto concentrate on the other aspects of program construction.The programming system should stress thediscovery in source program statements of as many errorsas possible, before attempting to constructan object program.  Among the computer characteristicswhich are advocated are a program interrupt scheme,a large set of characters, and indirect addressing.
72	Hollingsworth, J.;	An Educational Program in Computing	
73	Gschwind, H. W.;	A Real Time Data Assimilator	
74	Shell, D. L.;	A High-Speed Sorting Procedure	
75	Chow, W. M.;	Parameter Estimation for Simple Nonlinear Models	
76	Taranto, D.;	Binary Conversion, With Fixed Decimal Precision, Of a Decimal Fraction	
77	Arden, B.;Graham, R.;	On GAT and the Construction of Translators	
78	Wouk, A.;	Remarks on the Practical Solution of Characteristic Value Problems	This paper is concerned with the practicalsolution of characteristic value problem for anordinary differential equation.  It is at once apparentthat sequential computers, be they digital oranalog, solve initial value problems, rather than boundaryvalue problems, and some mathematical processmust be found to compensate for the machine's inadequacy.(Compensating for machine imperfection is,of course, the normal activity of the numerical analyst.)A number of other papers have applied particulardevices to particular problems.  The purpose of thisnote is to establish a mathematical framework ormodel for these practical procedures and thus assist inthe use and extension of the ideas in other particularproblems.
79	Schecher, H.;	Programming for a Machine With an ExtendedAddress Calculational Mechanism	
80	Schwartz, B. L.;	A Technique for Computing Critical RotationalSpeeds of Flexible Shafts on an Automatic Computer	
81	Gleissner, G. H.;	NORC High-Speed Printer	
82	Williams, F. A.;	Handling Identifiers as Internal Symbols in Language Processors	Substitution of computer-oriented symbols forprogrammer-oriented symbols in language processorsis examined and a feasible method for doing so is presented.
83	Carr III, J. W.;	A Visit to Computation Centers in the Soviet Union	
84		Survey of Progress and Trend of Developmentand Use of Automatic Data Processing in Businessand Management Control Systems of the Federal Government,as of December 1957-II (Part 2 see CA590406)	
85	Carr III, J. W.;	Error Analysis in Floating Point Arithmetic	
86	Controller General of the United States to the Congress of the United States;	Survey of Progress and Trend of Developmentand Use of Automatic Data Processing in Businessand Management Control Systems of the Federal Government, as of December 1957	
87	Muller, M. E.;	A Note on a Method for Generating PointsUniformly on N-Dimensional Spheres	
88	Hicks, J. S.;Wheeling, R. F.;	An Efficient Method for Generating Uniformly DistributedPoints on the Surface of an n-DimensionalSphere	
89	Larson, E. H.;Marshall, D. P.;	A Routine to Find the Solution of SimultaneousLinear Equations with Polynomial Coefficients	
90	Ercoli, P.;Vacca, R.;	Binary Arithmetic for Discretely VariableWord Length in a Serial Computer	
91	Gilman, R. E.;	A Mathematical Procedure for Machine Division	
92	Bemer, R. W.;	A Checklist of Intelligence for Programming Systems	A remarkable variation exists in the degreeof sophistication of various programming systems.A particular manifestation is the jungle of assorteddevices for reproducing limited human decisionprocedures.  An attempt is made here to begin a systematicclassification of the various devices foreducating the computer to take over the decision-makingfunctions of one or many human operators, boththose that have been demonstrated feasible to date andthose that are highly desirable for the future.
93	Wegstein, J. H.;	From Formulas to Computer Oriented Language	A technique is shown for enabling a computerto translate simple algebraic formulas into athree address computer code.
94	Howell, J.R.;	An Iterative Method for Fitting the Logistic Curve	An iterative method is given for finding alogistic curve of best least squares fit to a setof two-dimensional points.
95	Powers, J. E.;	Elimination of Special Functions from Differential Equations	A set of ordinary differential equations whichcontains mathematical functions requiring theuse of subroutines for numerical solution by electroniccomputer, tabular data for numerical solutionby hand calculation or function generators when analogmethods are applied can sometimes be expandedto an equivalent set of equations which do not containthe functions.  This is practical if these functionssatisfy sufficiently simple differential equations.Thus among those functions which can be eliminatedby this procedure are the trigonometric, inverse trigonometric,exponential, and many other transcendentalfunctions.
96	Hansen, R. C.;Bailin, L. L.;Rutishauser, R. W.;	On Computing Radiation Integrals	The relative merit and cost of four ways ofevaluating typical radiation integrals containingspherical Bessel functions are investigated.  These methodsare desk machine evaluation of a finite series,integration of the appropriate differential equationby a Reeves Electronic Analog Computer and by aLitton 40 IBM 704 computer.  Results are generally applicableto equations separated from a Helmholtzor wave equation.
97	Luebbert, Capt. W. F.;Collom Jr., Capt. P. W.;	Signal Corps Research and Development onAutomatic Programming of Digital Computers	
98	Sheridan, P. B.;	The Arithmetic Translator-Compiler ofthe IBM FORTRAN Automatic Coding System	
99	Green, J.;	Possible Modifications to the International Algebraic Language	
100	Carr III, J. W.;	Recursive Subscripting Compilers and List-Types Memories	
101	Nather, V.;Sangren, W.;	Nuclear Reactor Codes	
102	Curtz, T. B.;Riordan, J. F.;Spohn,M.;	A Comparison of 650 Programming Methods	
103	Farbman, D.;Ketover, R.;	COPE (Console Operator Proficiency Examination)*	Each year electronic computers become moresophisticated, and the programs they must processbecome more complex.  Because of this,dependence ofthose in computing on the skill and experience ofoperators is increasing.  At the same time, selectionand training of qualified operators grows moredifficult.  To meet the need for a quick, accurate, uniformoperator test and training aid, the authorshave developed COPE (Console Operator Proficiency Examination),outlined below.  While this examinationis programmed specifically for the IBM 705 Model II withtwo Tape Record Coordinators, similar programscould be developed for other computers.
104	Moore, C. J.;Lewis, T. S.;	Digital Simulation of Discrete Flow Systems*	The discrete flow systems discussed are characterizedby the movement of randomly arrivingitems along interacting channels.  Programing a digitalcomputer to simulate such systems utilizes sometechniques not common in other approaches to physicalproblems.  The principal portion of the paper isa discussion of two simulation studies that illustratesome of the programming problems involved. Oneis of an extensive package-handling plant, with theobjective being optimization of parameters such asstorage capacities and processing rates.  In the other,air traffic flow and control procedures are simulatedto compare the effects of alternative control decisions.
105	Price, R. A.;Jardins, P. D.;	Two Methods for Word Inversion on the IBM 709	
106	Collins, G. E.;	A Method for Overlapping and Erasure of Lists	An important property of the Newell-Shaw-Simonscheme for computer storage of lists is thatdata having multiple occurrences need not be storedat more than one place in the computer.  That is,lists may be "overlapped."  Unfortunately, overlappingposes a problem for subsequent erasure.  Givena list that is no longer needed, it is desired to erasejust those parts that do not overlap other lists.In LISP, McCarthy employs an elegant but inefficient solutionto the problem.  The present paper describesa general method which enables efficient erasure.  Themethod employs interspersed reference counts todescribe the extent of the overlapping.
107	Pope, D. A.;Stein, M. L.;	Multiple Precision Arithmetic	
108	Dimsdale, B.;Weinberg, G. M.;	Programmed Error Correction in Project Mercury	
109	Lubkin, S.;	A Note on Approximating e^x	
110	Ferguson, D. E.;	Fibonaccian Searching	
111	Ellenberger, K. W.;	On Programming the Numerical Solution of Polynomial Equations	Numerical techniques are presented for computingthe roots of polynomial equations.  By applyingthe recommended scaling and inversion rules, the basicBairstow and Newton-Raphson iterative techniquescan be applied with great reliability.  Both a high degreeof accuracy and rapid convergence are realized.Numerical examples are shown to illustrate the pitfallsand to show how these are circumvented by applicationof the recommended procedures.
112	Ellenberger, K. W.;	Numerical Solution of the Polynomial Equation (Algorithm 30)	
113	Bemer, R. W.;	Survey of Coded Character Representation	
114	Smith, H. J.;Williams, F. A.;	Survey of Punched Card Codes	
115	Wheeling, R. F.;	Optimizers: Their Structure	
116	Rogers, J. L.;	The Sumador Chino	On a recent motor trip through Mexico, the writercame across on adding device which was referredto as a sumador chino (Chinese adder).  A survey of the moreavailable literature on the history of mathematicsand on instruments of calculation has uncovered no referenceto such a device.  The purpose of this communicationis to enlist the help of other members in bringing tolight whatever may be known concerning the evolutionand present status of the sumador chino.
117	Nagler, H.;	An Estimation of the Relative Efficiency of Two Internal Sorting Methods	
118	Speckhard, A. E.;	Character Scanning on the IBM 7070	
119	Andrus, J. F.;	Note on Eigenvalue Computation	
120	Sefton, P.;Vaillancourt, R.;	A Simple Technique for Coding Differential Equations	
121	Holt, A.;	Over-all Computation Control and Labelling	
122	DeWitte, L.;	Least Squares Fitting of a Great Circle Through Points on a Sphere	
123	Masterson Jr., K. S.;	Compilation for Two Computers with NELIAC	NELIAC, a compiler based on ALGOL, was developedat the U.S. Navy Electronics Laboratory, SanDiego,California, as a"boot-strap" compiler for the RemingtonRand Univac COUNTESS computer. This compilerwas used to generate a version of itself which, runningas a COUNTESS program, generated machine codefor the Control Data Corporation CDC-1604.  All threeversions of NELIAC accepted essentially identicalinput language.
124	Silver, R.;	An Algorithm for the Assignment Problem	The assignment problem is formulated and brieflydiscussed.  An efficient algorithm for itssolution is presented in ALGOL code.  An empirical relationbetween solution time and the size of theproblem is given, based on extensive experimentscarried out on a digital computer.
125	Mackinney, J. G.;	Polynomial Transformer (Algorithm 29)	
126	Mackinney, J. G.;	Least Squares Fit By Orthogonal polynomials (Algorithm 28)	
127	Silver, R.;	ASSIGNMENT (Algorithm 27)	
128	Herroit, J. G.;	ROOTFINDER III (Algorithm 26)	
129	Forsythe, G. E.;Herriot, J. G.;	ROOTFINDER II (Algorithm 15)	
130	Leavenworth, B.;	Real Zeros of an Arbitrary Function (Algorithm 25)	
131	Leavenworth, B.;	Solution of Tri-Diagonal Linear Equations (Algorithm 24)	
132	Feurzeig, W.;	Math Sort (Algorithm 23)	
133	Oser, H.;	Riccati-Bessel Functions of First And Second Kind (Algorithm 22)	
134	Borsch-Supan, W.;	Bessel Function for a Set of Integer Orders(Algorithm 21)	
135	Reeves, R. F.;	Digital Computers in Universities-IV	
136	Ingerman, P. Z.;	A Note on the Calculation of Interest	
137	Swift, C. J.;	Evaluating Numbers Expressed as Strings of English Words	
138	Voorhees, E. A.;	Some Thoughts on Reconciling VariousCharacter Set Proposals (Corrigenda)	
139	Kenyon, R. R.;	Binomial Coefficients (Algorithm 19)	
140	Forsythe, G. E.;	Crout with Pivoting (Algorithm 16)	
141	Yarbrough, L. D.;	Some Thoughts on Parallel Processing	
142	Sherman, P. M.;	Comments on a Technique for Counting Ones	
143	Romberg, A.;	A List of Computer Systems Programs forthe IBM 650, DATATRON 205, and UNIVAC SS-80	
144	Bemer, R. W.;	Do It by the Numbers-Digital Shorthand	Present communications systems transmit singlecharacters in groups of coded pulses betweensimple terminal equipments.  Since English words form onlya sparse set of all possible alphabetic combinations,present methods are inefficient when computer systemsare substituted for these terminals.  Using numericrepresentations of entire words or common phrases (ratherthan character-by-character representations)requires approximately one-third of present transmissiontime.  This saving is reflected in overall costs.Other benefits accrue in code and language translationschemes. Provision is made for transmission ofpurely numeric and/or binary streams, and for singlecharacter-transmission of non-dictionary words suchas the names of people or places.
145	Hollingsworth, J.;	Automatic Graders for Programming Classes	
146	Katz, D. L.;	The Use of Computers in Engineering Classroom Instruction	On April 29-30, the Computer Committee of theCollege of Engineering, University of Michigan,which acts as a steering committee for The Ford FoundationProject on the Use of Computers in EngineeringEducation, held a special conference to discuss certaintimely topics pertinent to the Ford Project.This report contains a condensed transcription ofthe key ideas offered by the conference attendeeson selected topics.
147		Report on a Conference of University Computing Center Directors	
148	Reeves, R. F.;	Digital Computers in Universities-III	
149	Dickson, J. C.;Frederick, F. P.;	A Decision Rule for Improved Efficiency in SolvingLinear Programming Problems with the SimplexAlgorithm	
150	Floyd, R. W.;	Rational Interpolation by Continued Fractions (Algorithm 18)	
151	Sprague III, C. D.;	TRDIAG (Algorithm 17)	
152	Forsythe, G. E.;	CROUT With Pivoting (Algorithm 16)	
153	Blatt, J. M.;	Comments from a FORTRAN User	
154	Berin, A.;	Rapidly Convergent Expressions for Evaluating e^x	
155	Fredkin, E.;	Trie Memory	
156	Rosin, R. F.;	An Introductory Problem in Symbol Manipulation for the Student	
157	Reeves, R. F.;	Digital Computers in Universities -II	
158	Thacher Jr., H. C.;	ROOTFINDER II (Algorithm 15)	
159	Thacher Jr., H. C.;	ROOTFINDER (Algorithm 2)	
160	Thacher Jr., H. C.;	ROOTFINDER II (Algorithm 15)	
161	Barrett, J. A.;Grems, M.;	Abbreviating Words Systematically (Corrigendum)	
162	Frieden, H.;	A Variant Technique for Counting Ones	
163	Kutler, S. S.;	Counting Ones on the IBM 7090	
164	Smith Jr., H. J.;	A Short Study of Notation Efficiency	
165	Huskey, H. D.;Halstead, M. H.;	NELIAC-A Dialect of ALGOL	
166	Luebbert, W. F.;	Programming Compatibility in a Familyof Closely Related Digital Computers	
167	McIsaac, P.;	Combining ALGOL Statement Analysis with Validity Checking	
168	Codd, E. F.;	Multiprogram Scheduling Parts 3 and 4 SchedulingAlgorithm and External Constraints	
169	Holmstrom, J. E.;	The Multilingual Terminology Project	
170	Voorhees, E. A.;	Some Thoughts on Reconciling Various Character Set Proposals	
171	Reeves, R. F.;	Digital Computers in Universities (Part I)	
172	Beam, A.;	Complex Exponential Integral (Algorithm 13)	
173		ATLAS a new concept in large computer design	
174	Neal, W. R.;	Interval Estimation of the Time in One Stateto Total Time Ratio in a DoubleExponential Process	
175	Anderson, W. H.;	The Solution of Simultaneous Ordinary DifferentialEquations Using a General Purpose DigitalComputer	
176	Perlis, A. J.;Thornton, C.;	Symbol Manipulation by Threaded Lists (Corrigendum)	
177	Thacher Jr., H. C.;	Solution of Polynomial Equation by BairstowHitchcock Method, A. A. Grau Communications ACM,February, 1960 (Algorithm)	
178	Thacher Jr., H. C.;	ROOTFINDER (Algorithm)	
179	Galler, G. M.;	Evaluation of the Legendre Polynomial Pn(X) by Recursion (Algorithm)	
180	Galler, G. M.;	Evaluation of the Laguerre Polynomial Ln(X) by Recursion (Algorithm)	
181	Galler, G. M.;	Evaluation of the Hermite Polynomial Hn(X) by Recursion (Algorithm)	
182	Galler, G. M.;	Evaluation of the Chebyshev Polynomial Tn(X) by Recursion (Algorithm)	
183	Perry, C.;	Conversion Between Floating Point Representations	
184	Robinson, S. M.;Struble, G. W.;	A Short Method for Measuring Error in a Least-Squares Power Series	
185	Codd, E. F.;	Multiprogram Scheduling Parts 1 and 2.  Introduction and Theory*	In order to exploit fully a fast computer whichpossesses simultaneous processing abilities,it should to a large extent schedule its own workload.The scheduling routine must be capable of extremelyrapid execution if it is not to prove self-defeating.The construction of a schedule entails determiningwhich programs are to be run concurrently and which sequentiallywith respect to each other.  A concisescheduling algorithm is described which tends to minimizethe time for executing the entire pending workload(or any subset of it), subject to external constraintssuch as precedence, urgency, etc.  The algorithmis applicable to a wide class of machines.
186	Floyd, R. W.;	An Algorithm Defining ALGOL Assignment Statements (Addendum)	
187	Swift, C. J.;	Compiling Connectives	
188	Berezin, I. S.;	The Department of Computer Mathematics at Moscow State University	
189	Booth, A. D.;	The Future of Automatic Digital Computers	
190		Bendix G-20 System	
191	Barrett, J. A.;Grems, M.;	Abbreviating Words Systematically	
192	Wegner, P.;	A Technique for Counting Ones in a Binary Computer	
193	Patrick, R. L.;	A Start at Automatic Storage Assignment	
194	Sarafyan, D.;	Divisionless Computation of Square Roots Through Continued Squaring	
195	Patterson, G. W.;	What is a Code?	
196	Naur, P.;Backus, J.;	Report on the Algorithmic Language ALGOL 60	
197	Knuth, D. E.;	An Imaginary Number System	
198	Gurzi, F.;	A High-Speed Multiplication Process for Digital Computers	
199	Claussen, R.;	Euclidian Algorithm (Algorithm 7)	
200	Clarke, D. S.;	Bessel Function I, Asymptotic Expansion (Algorithm 6)	
201	Clarke, D. S.;	Bessel Funtion I, Series Expansion (Algorithm 5)	
202	Senko, M. E.;	A Control System For Logical Block Diagnosis With Data Loading	This paper describes a section of an integrateddiagnostic monitor system which facilitatesthe checking of sections of instructions or subroutinesanywhere in the object program.  A new methodof specifying all diagnostic operations in a format similarto a computer program makes the system convenientto use and relatively simple to understand.  The paperalso describes a number of other novel diagnosticfeatures which can be included in the system.
203	Brown, R. M.;	Decoding Combinations of the First n Integers Taken k at a Time	
204	Wang, H.;	Proving Theorems by Pattern Recognition I	
205	McIlroy, M. D.;	Macro Instruction Extensions of Compiler Languages	Macroinstruction compilers constructed froma small set of functions can be made extremelypowerful.  In particular, conditional assembly, nesteddefinitions, and parenthetical notation serveto make a compiler capable of accepting verygeneral extensions to its ground language.
206	Green, J.;	Symbol Manipulation in XTRAN	
207	Smith, J. W.;	Syntactic and Semantic Augments to ALGOL	
208	Newell, A.;Tonge, F. M.;	An Introduction to Information Processing Language V	
209	Perlis, A. J.;Thornton, C.;	Symbol Manipulation by Threaded Lists	
210	McCarthy, J.;	Recursive Functions of Symbolic Expressionsand Their Computation by Machine, Part I	
211	Grems, M.;	Share Standard Flow Chart Symbols	
212	Gorn,S.;	Bisection Routine (Algorithm 4)	
213	Schmittroth, L. A.;	Numerical Inversion of Laplace Transforms	
214	Floyd, R. W.;	An Algorithm Defining ALGOL Assignment Statements	
215	Brooks, F. P.;	The Execute Operations-A Fourth Mode of Instruction Sequencing	
216	Kanner, H.;	A Note on the Use of the Abacus in Number Conversion	
217		Soviet Computer Technology-1959	
218	Painter, J. A.;	Computer Preparation of a Poetry Concordance	
219	Shuchter, J. P.;	Marriage-with Problems	
220	Traub, J. F.;	A New Method of Computation of Square Roots Without Using Division	
221	Logan, W. A.;	The Basic Side of Tape Labeling	
222	Lynch, W. C.;	Coding Isomorphisms	The coding of external symbols into symbolsinternal to a compute can sometimes be carriedout in such a way that relevant informational propertiesare preserved, but in a form much more easilydealt with.  A case in point is presented.
223	Pelta, H. N.;	Selfcipher: Programming	
224	Samelson, K.;Bauer, F. L.;	Sequential Formula Translation	The syntax of an algorithmic language suchas ALGOL is conveniently described as a sequenceof states indicated by an element called cellar.  Transitionsare controlled by admissible state-symbolpairs which may be represented by a transition matrix.This description of syntax furnishes at the sametime an extremely simple rule for translating into machineprograms statements in the algorithmic language.Sequential treatment, however, is not feasible in the caseof certain optimizing processes such as recursiveaddress calculation.
225	Greenwald, I. D.;	A Techniquefor Handling Macro Instructions (Corrigendum)	
226	Grau, A. A.;	Solution of Polynomial Equation byBairstow-Hitchcock Method (Algorithm 3)	
227	Wegstein, J.;	ROOTFINDER (Algorithm 2)	
228	Herbold, R. J.;	QUADI (Algorithm 1)	
229	Gruenberger, F.;	A Terminology Proposal	
230	Bemer, R. W.;	A Proposal for Character Code Compatibility	
231	Kent, E. R.;	A Proposal for a Set of Publication Standards for Use by the ACM	
232	Frank, R. M.;Lazarus, R. B.;	A High-Speed Sorting Procedure	
233	Nather, V.;Sangren, W.;	Abstracts-Additional Nuclear Reactor Codes	
234	Speckhard, A. E.;	A SAP-Like Assembly Program for the IBM 650	
235	Bagley, P. R.;	Two Think Pieces	
236	Feigenbaum, E. A.;	Soviet Cybernetics and Computer	This article records observations on Sovietresearch and technology in cybernetics and computerscience, made by the author during a visit to the SovietUnion as a delegate to the IFAC Congress onAutomatic Control held in Moscow in the summer of 1960.
237	Robbins, D.;	Computer Production of Peek-A-Boo Sheets	
238	Garfinkel, D.;Rutledge, J. D.;Higgins, J. J.;	Simulation and Analysis of Biochemical Systems	
239	Verhoeff, J.;Goffman, W.;Belzer, J.;	Inefficiency of the Use of Boolean Functionsfor Information Retrieval Systems	
240	Graham, J. W.;Sprott, D. A.;	Processing Magnetic Tape Files with Variable Blocks	
241	Lechner, J. A.;	Machine Calculation of Moments of a Probability Distribution	A method is presented for the calculation on amachine of the moments of a probability distribution,necessitating little more than n additions and n referencesto memory for each moment, instead of theminimum of n multiplication, 2n additions, and 2n referencesto memory required by the most straightforwardmethod (where n is the number of entries in the probabilitydistribution).  The method is directly applicablewhen a tabulated distribution exists, as when it hasbeen computed by repeated convolution; but in thiscase it conserves both time and accuracy.
242	Wilson, J. G.;	Notes on Geometric Weighted Check Digit Verification	This note describes a method for utilizinggeometric weight modulus 11 checking digits on acomputer which does not have either multiplication ordivision.  In addition some attempt has been madeto show some limitations of this system.
243	Rubinoff, M.;	N-Dimensional Codes for Detecting and Correcting Multiple Errors	The paper introduces a new family of codesfor detecting and correcting multiple errors ina binary-coded message.  The message itself is arranged(conceptually) into a multidimensional rectangulararray.  The processes of encoding and error detectionare based upon parity evaluations along prescribeddimensions of the array.  Effectiveness of the codesis increased by introducing a "system check bit",which is essentially a parity check on the other paritybits.  Only three-dimensional codes are discussedin this paper with parity evaluations along the horizontal,the vertical, and one main diagonal.  However,the family of codes is not restricted to three dimensions,as evidenced by the discussion by Minnickand Ashenhurst on a similar multidimensional single-bitselection plan used for another purpose [6].A four-dimensional code, correcting three and detectingfour errors, has been developed; the extensionto higher-dimensional codes with greater correction power is straightforward.
244	Kriebel, D. C.;	Incomplete Elliptic Integrals (Algorithm 73)	
245	Herndon, J. R.;	A Set of Associate Legendre Polynomials of the Second Kind (Algorithm 62)	
246	MacMillan, D. B.;	Least-Squares Fit by Orthogonal Polynomials (Algorithm 28)	
247	Jefferson, D. K.;	Incomplete Elliptic Integrals (Algorithm 73)	
248	Smith, L. W.;	What is Proprietary In Mathematical Programming?-Impressionsof a Panel Discussion	A panel discussion on "What is Proprietaryin Mathematical Programming?" was sponsored by theSpecial Interest Committee on Mathematical Programmingof the ACM during a Hall of Discussion/on September7th at the 16th National ACM meeting in Los Angeles.  Thisnote consists solely of the impressions garneredby the moderator of the panel and does not necessarilyrepresent the position of any of the panelistsor other participants in the discussion.
249	Gorn, S.;	Specification Languages for Mechanical Languagesand Their Processors*-A Baker's Dozen	
250	Nickerson, R. C.;	An Engineering Application of Logic-Structure Tables	
251	Archambault, M.;	Ballistic Cam Design	This paper presents a digital computer programfor the rapid calculation of manufacturing dataessential to the design of preproduction cams whichare utilized in ballistic computers of tank firecontrol systems.  The cam profile generated introducesthe superelevation angle required by tank mainarmament for a particular type ammunition.
252	Dow, J.;	Programming a Duplex Computer System	This paper describes a method of duplex-computerprogramming that has been used with two computersin a military defense system.  The method combines specialprograms with a basic data processing programpackage.  The duplex operation gives the system greaterreliability.  After achieving the required levelof integration, both computers do similar processingon the same inputs and continually cross-check theintermediate and final results.
253	Foata, D. C.;	On a Program for Ray-Chaudhuri's Algorithmfor a Minimum Cover of an Abstract Complex	
254	Bachelork, G. A.;Dempster, J. R. H.;Knuth, D. E.;Speroni, J.;	SMALGOL-61	Prior to and during the 1961 Western JointComputer Conference, several people in the JointUsers Groups had expressed interest in defining a "smalgol"language.  This is to be an ALGOL languagefor use with compilers on relatively small size computers.A preliminary report resulted.  At the ACMNational Conference four months later, after consideringseveral counter proposals, a final version wasagreed upon by a subcommittee.  The recommendationsof the Subcommittee for a standard subset of ALGOL60 for use on small computers is presented here.
255	Breed, L. M.;	Augmentation (Algorithm 68)	
256	Dubay, G. H.;	A Set of Test Matrices (Algorithm 52)	
257	Knapp, A. W.;Shaman, P.;	Invert (Algorithm 42)	
258	Hellerman, O.;Ogden, S.;	Composition Generator (Algorithm 72)	
259	Coveyou, R. R.;Sullivan, J. G.;	Permutation (Algorithm 71)	
260	Mifsud, C. J.;	Interpolation By Aitken (Algorithm 70)	
261	Moore, D. P.;	Tape Splitting	
262	Moore, C. L.;Ruwe, M. L.;	MAP	
263	Moore, D. P.;	Library Loading with Alternate Routine Selection	
264	Reynolds, S. W.;	A Generalized Polyphase Merge Algorithm	
265	Barnett, M. P.;	Low Level Language Subroutines for Use Within Fortran	This paper describes some subroutines, codedin symbolic languages and for use within Fortrancoded programs, to deal with "special arithmetic" (e.g.multi-precision arithmetic), symbol manipulation,bit manipulation and expanded character set input-output, and visual display.
266	Robinson, S. M.;	Fitting Spheres by the Method of Least Squares	
267	Wilkes, M. V.;	Some Proposals for Improving the Efficiency of ALGOL 60	
268	Cohen, L. J.;	Stochastic Evaluation of a Static Storage Allocation	
269	Riskin, B. N.;	Core Allocation Based on Probability	
270	Kelley Jr., J. E.;	Techniques for Storage Allocation Algorithms	
271	Heising, W. P.;Larner, R. A.;	A Semi-Automatic Storage Allocation System at Loading Time	
272	Jensen, J.;Mondrup, P.;Naur, P.;	A Storage Allocation Scheme for ALGOL 60	A storage allocation scheme for a machinewith a 2048 instruction core store and a magneticdrum is described.  The use of the drum for storingprogram blocks and/or data must be directed by theprogrammer through auxiliary information in the ALGOLprogram.  The administrative routines controllingthe storage at run time are described in full.  A detailed example is given.
273	Collins Jr., G. O.;	Experience in Automatic Storage Allocation	
274	Fotheringham, J.;	Dynamic Storage Allocation in the Atlas Computer,Including an Automatic Use of a Backing Store	
275	Sams, B. H.;	Dynamic Storage Allocation for an Information Retrieval System	
276	Holt, A. W.;	Program Organization and Record Keeping for Dynamic Storage Allocation	The material presented in this paper is partof the design plan of the core allocation portionof the ASCII-MATIC Programming System.  Project ASCII-MATICis concerned with the application of computertechniques to the activities of certain headquartersmilitary intelligence operations of the U.S. Army.
277	Maher, R. J.;	Problems of Storage Allocation ina Multiprocessor Multiprogrammed System	
278	Roberts Jr., A. E.;	A General Formulation of storage Allocation	Formalization of a general computer storageallocation process is attempted.  With a givencomputer M is associated a fictitious computer M' essentiallyidentical to M except in respect to possessionof unbounded primary storage.  Mappings of the totalstorage set (internal and external) of M into thedirect address set of M' are introduced.  A programsequence P for M' is termed M-admissible (relativeto a specific execution time period) if there is a mappingunderwhich P and its effective data referentsare all located in the direct address set of M.  Storageallocation is considered as a process of establishingfor an arbitrary M' program  a sequence of mappings, a decouplingof the program into M-admissible subprogramsand a linking set of interludes.  An existence proofin terms of a completely interpretive M programas indicated.  Some special cases are discussed.  Variousrestrictions on generality of M' programs areconsidered under which more practical realizationof allocation processes becomes tractable.
279	Sams, B. H.;	The Case for Dynamic storage Allocation	
280	O'Neil, R. W.;	A Preplanned Approach to a Storage Allocating Compiler	
281	Feurzeig, W.;	Putting a Hex on e^x	Recent notes on approximate natural antilogyhave not considered indirect formulations fordescribing e^x.  In this note we produce a particularfamily of very fast, high precision and eminentlypractical exponential evaluation formulas derived from one such formulation.
282	Hutchinson, K.;	Optimum Tape-Writing Procedures	Consider a magnetic tape system with a readcheck after writing.  Where an error occurs inwriting a record, a programmed error routine may eitherbypass some or all of the area on tape or tryto rewrite the record on the same area.  This paper evaluatesthese two procedures on the basis of expectedloss of computer time and develops a decision rule forselecting the optimum procedure.  The rule dependscritically on the number of times the tape being writtenwill be used in the future.  In the case wherethe optimum procedure is to bypass an area, a seconddecision-the size of the area to be bypassed-isnecessary.  A formula is developed to determine theoptimum area to be bypassed for each procedure.
283	Tornheim, L.;	Inversion of a Complex Matrix	
284	Rom, A. R. M.;	Manipulation of Algebraic Expressions	An algorithm for algebraically manipulatingexpressions of the form SUM{CiPi, i=1,...,n}; hasbeen developed in conjunction with the development of programsfor systems analysis problems.  This algorithmenablesus to derive over-all system transfer functionsfrom algebraically described block diagrams ofany linear continuous multi-loop feedback system.  Themachine representation of the derived expression,is, by virtue of the algorithm, in a form which simplifiesthe task of compiling.  The algorithm wasdeveloped for a particular purpose in connection withsystem analysis studies.  However, its applicationas a mathematical device extends far beyondthe confines of the original problem.
285	Wenrick, R. C.;Houghton, A. V.;	Solution of Tridiagonal Matrices	
286	Bramhall, J. N.;	An Iterative Method for Inversion of Power Series	
287	Shapiro, N.;Vreenegoor, H.;	The Generalized Important Event Technique	
288	Taylor, W.;Turner, L.;Waychoff, R.;	A Syntactical Chart of ALGOL 60	
289	Alexander, N. P.;	Critical Path Scheduling (Algorithm 40)	
290	Mayoh, B. H.;	Chain Tracing (Algorithm 69)	
291	Hoffman, J.;Opler, A.;	Use of MOBOL in PreparingRetrieval Programs	
292	Kehl, W. B.;Horty, J. F.;Bacon, C. R. T.;Mitchell, D. S.;	An Information Retrieval Language for Legal Studies	
293	Richstone, M.;	The Applied Mathematics Laboratory of the David W. Taylor Model Basin	
294	Knuth, D.;	An Imaginary Number System	
295	Clendenin, W. W.;	Rational Approximations for the Error Function and for Similar Functions	
296	Cox, A. G.;Luther, H. A.;	A Note on Multiple Precision Arithmetic	
297	Marcus, C. F.;	A Note on Fitting Great Circles by Least Squares	
298	Kuehn, H. G.;	A 48-Bit Pseudo-Random Number Generator	A new 48-bit pseudo-random number generator, suitablefor several computers, was tested statisticallyfor randomness to determine its adequacy for use in MonteCarlo programs.  Frequency tests, distributionsof certain low-order moments, runs up and down, and runsabove and below the mean were applied to one-halfmillion generated numbers lying within the interval(0,1) and to three sets of integers obtained fromspecified bits within the generated numbers.  Thesetests substantiated the randomness of all numbersexcept for the set of integers coming from the least significant bits.
299	Reynolds, S. W.;	A Generalized Polyphase Merge Algorithm	
300	Mackinson, T. N.;	COBOL: A Sample Problem	A simplified Merchandise Control problem hasbeen chosen for presenting COBOL to users andpotential users of computing systems.  A mythical departmentstore, "E. Language Bros., Inc.", is programmingin the COBOL language one of the many runs on its computer.
301	Gilbert, H. E.;	A Set of Test Matrices (Algorithm 52)	
302	Rice, H. G.;	Augmentation (Algorithm 68)	
303	Gorn, S.;	Some Basic Terminology Connected WithMechanical Languages and Their Processors	The suggestions in this paper are part of theterminology used in work for the University ofPennsylvania's Office of computer Research and Education.The work is jointly supported by the NationalScience Foundation and the Air Force Office of Scientific Research.
304	Nestor Jr., C. W.;	Nth Roots of a Complex Number (Algorithm 53)	
305	Caffrey, J.;	CRAM (Algorithm 67)	
306	Caffery, J.;	INVRS (Algorithm 66)	
307	Hoare, C. A. R.;	FIND (Algorithm 65)	
308	Hoare, C. A. R.;	QUICKSORT (Algorithm 64)	
309	Hoare, C. A. R.;	PARTITION (Algorithm 63)	
310	Herndon, J. R.;	A Set of Associate Legendre Polynomialsof the Second Kind (Algorithm 62)	
311	Gibb, A.;	Procedures for Range Arithmetic (Algorithm 61)	
312	Olivier, D.;	A Further Note on Approximating e^x	
313	Bramhall, J. N.;	An Iterative Method for Inversion of Power Series	
314	Clarkson, W. K.;Prince, B. M.;	A Divisionless Method of Integer Conversion	
315	Wenrick, R. C.;	Solution of Tridiagonal Matrices	
316	Arden, B. W.;Galler, A.;Graham, R. M.;	An Algorithm for Equivalence Declarations	
317	Bellman, R.;	On The Approximation of Curves by Line Segments Using Dynamic Programming	
318	Fischer, C. M.;	Combat Vehicle Firing Stability (Active Suspension)	
319	Traub, J. F.;	On a Class of Iteration Formulas and Some Historical Notes	The class of iteration formulas obtainableby rational approximations of "Euler's formula"is derived with the corresponding error estimates.Some historical notes on iterative procedures arefollowed by a derivation of Euler's formula with theassociated error estimate in a new notation whichsimplifies the error estimate and suggests generalizations.The final section considers the Pade approximantsto the "Euler polynomial" and shows how a number of knownformulas may be derived from this unified approach.There is a short discussion of the "best" formula.
320	Cantrell, H. N.;King, J.;King, F. E. H.;	Logic-Structure Tables	Logic tables are an excellent way of developingand expressing the logic required in procedures,operations, systems and circuits.  A set of rules forwriting and using logic tables is explained bymeans of some simple examples.  Then the logic structureof a vending machine is given in which two logictables are used.  Logic tables are two-dimensional innature, enabling us to fully express and considerboth the sequential and parallel aspects of logic.  Theycan be compiled directly into a computer programand so eliminate the need for flow charting and hand coding.
321	Knuth, D. E.;Merner, J. N.;	ALGOL 60 Confidential	The ALGOL 60 Report,* when first encountered,seems to describe a very complex language whichwill be difficult to learn.  The "metalinguistic formulae"admirably serve the purpose of precisely specifyinga language, but they are certainly not very readablefor a beginner.  However, experience has shown thatonce the report is explained it is in fact easy to learnALGOL and to write algorithms in it.  The languageis so general and powerful it can handle an enormousclass of problems.  It is not hard to learn thoseparts of ALGOL present in other compiler languages: howto write assignment and go to and for statements,etc.  Indeed, a lot of the unnecessary restrictionsimposed by other compiling languages have finallybeen lifted.  But ALGOL also allows many unobvious thingsto be written, as we will see later, and hereinlies a problem: ALGOL seems to have become too general.So many restrictions have been lifted that alot of technical details crop up which are hard to learnand to use correctly.  In this paper some ofthe more obscure features of the language are consideredand their usefulness is discussed.  Remarksare based on the authors' interpretations of the ALGOL 60 Report.
322	Bright, H. S.;	Operational Compatibility of Systems-CONVENTIONS	The General Standards Committee of the SHAREorganization has devoted considerable effort tothe problem of operating a computer efficiently inview of the growing number of programming systemsavailable.  Each of these programming systems has beencoded to utilize a fixed set of hardware componentswithout recognizing the fact that others may be occupyinga storage medium required by the first.  Theseincompatibilities are currently resolved by manually settingup the computer for each system as required.The following set of conventions is being consideredto minimize computer set-up time.  They are ofsufficiently broad interest that we feel other computerusers should be aware of them. -George F. Ryckman,Chairman
323	Blachman, N. M.;	The State of Digital Computer Technology in Europe	
324	Bauer, F. L.;	Romberg Integration (Algorithm 60)	
325	Alexander, W. J.;	Numerical Solution of the Polynomial Equation (Algorithm 30)	
326	Ranshaw, R. W.;	MATHSORT (Algorithm 23)	
327	Bareiss, E. H.;Fisherkeller, M. A.;	Zeros of a Real Polynomial by Resultant Procedure (Algorithm 59)	
328	Cohen, D.;	Matrix Inversion (ALgorithm 58)	
329	Edmundson, H. P.;Wyllys, R. E.;	Automatic Abstracting and Indexing Survey and Recommendations	In preparation for the widespread use of automaticscanners which will read documents and transmittheir contents to other machines for analysis, this reportpresents a new concept in automatic analysis:the relative-frequency approach to measuring  the significanceof words, word groups, and sentences.The relative-frequency approach is discussed in detail,as is its application to problems of automaticindexing and automatic abstracting.  Included in thereport is a summary of automatic analysis studiespublished as of the date of writing.  Conclusions arethat point toward more sophisticated mathematicaland linguistic techniques for the solution of problems of automatic analysis.
330	Baker, F. B.;	A Method for Evaluating the Area of the Normal Function	
331	Bellman, R.;	Successive Approximations and Computer StorageProblems in Ordinary Differential Equations	
332	Johnson, L. R.;	An Indirect Chaining Method for Addressing on Secondary Keys	Methods for entering random access files onthe basis of one key are briefly surveyed.  Thewidely used chaining method, based on a pseudo-randomkey transformation, is reviewed in more detail.An efficient generalization of the chaining methodwhich permits recovery on additional keys is thenpresented.
333	Bemer, R. W.;Smith Jr., H. J.;Williams Jr., F. A.;	Design of an Improved* Transmission/Data Processing Code	
334	Nadler, M.;	Division and Square Root in the Quater-Imaginary Number System	
335	Bellman, R.;Juncosa, M. L.;Kalaba, R.;	Some Numerical Experiments Using Newton's Methodfor Nonlinear Parabolic and EllipticBoundary-ValueProblems	Using a generalization of Newton's method, a nonlinearparabolic equation of the form U(t)-U(xx)=g(U)and a nonlinear elliptic equation U(xx)+U(yy)=exp(U)are solved numerically Comparison of these resultswith results obtained using the Picard iteration procedureshow that in many cases the quisi linearizationmethod offers substantial advantages in both time and accuracy.
336	Kulsrud, H. E.;	A Practical Technique for the Determination ofthe Optimum Relaxation Factor of the SuccessiveOver-Relaxation Method	
337	Ross, H. M.;	Further Survey of Punched Card Codes	
338	Thacher Jr., H.C.;	GROUT II (Algorithm 43)	
339	Alexander, W. J.;Thacher Jr., H. C.;	Real Exponential Integral (Algorithm 20)	
340	Herndon, J.;	Legendre Polynomial (Algorithm 13)	
341	Herndon, J.;	Chebyschev Polynomial (Algorithm 10)	
342	Herndon, J.;	Solution of Polynomial Equation by Barstow-Hitchcock (Algorithm 3)	
343	Herndon, J.;	On Frequently Occurring Errors in ALGOL 60 Programs (Algorithm 25)	
344	Herndon, J. R.;	Ber or Bei Function (Algorithm 57)	
345	Herndon, J. R.;	Complete Elliptic Integral of the Second Kind (Algorithm 56)	
346	Herndon, J. R.;	Complete Elliptic Integral of the First Kind (Algorithm 55)	
347	Herndon, J. R.;	Gamma Function for Range 1 to 2 (Algorithm 54)	
348	Herndon, J. R.;	Nth Roots of a Complex Number (Algorithm 53)	
349	Herndon, J. R.;	A Set of Test Matrices	
350	Herndon, J. R.;	Adjust Inverse of a Matrix When an Element is Perturbed (Algorithm 51)	
351	Herndon, J. R.;	Inverse of a Finite Segment of the Hilbert Matrix (Algorithm 50)	
352	Herndon, J. R.;	Spherical Neumant Function (Algorithm 49)	
353	Herndon, J. R.;	Logarithm of A Complex Number (Algorithm 48)	
354	Herndon, J. R.;	Associated Legendre Functions of the First Kindfor Real or Imaginary Arguments (Algorithm 47)	
355	Herndon, J. R.;	Exponential of a Complex Number (Algorithm 46)	
356	Ingerman, P. Z.;	INTEREST (Algorithm 45)	
357	Wojcicki, M. E.;	Bessel Functions Computed Recursively (Algorithm 44)	
358	Thacher Jr., H. C.;	Crout with Pivoting II (Algorithm 43)	
359	Wood, T. C.;	INVERT (Algorithm 42)	
360	Solomon, J. G.;	Evaluation of Determinant (Algorithm 41)	
361	Weinberg, G. M.;	Programmed Error Correction on a Decimal Computer	
362	Sherman, P. M.;	Table Look-At Techniques	
363	Karst, E.;	On Approximating Transcendental Numbers by Continued Fractions	
364	Nather, R. E.;	On the Compilation of Subscripted Variables	
365	Gray, M. C.;	Bessel Functions of Integral Order and Complex Argument	
366	Smith, O. K.;	Eigenvalues of a Symmetric 3 x 3 Matrix	
367	Lasser, D. J.;	Topological Ordering of a List ofRandomly-Numbered Elements of a Network	A network of directed line segments free of circularelements is assumed.  The lines are identifiedby their terminal nodes and the nodes are assumed tobe numbered by a non-topological system.  Givena list of these lines in numeric order, a simple techniquecan be used to create at high speed a listin topological order.
368	Collinge, R. M.;	Real Zeros of an Arbitrary Function (Algorithm 25)	
369	Thacher Jr., H. C.;	Crout with Pivoting (Algorithm 16)	
370	Rader, P. J.;	Bisection Routine (Algorithm 4)	
371	Wilkinson, J. H.;	Remarks on Algorithms 2 and 3, Algorithm 15 and Algorithms 25 and 26	
372	Leavenworth, B.;	Critical Path Scheduling (Algorithm 40)	
373	Sassouni, P.;	Correlation Coefficients with Matrix Multiplication (Algorithm 39)	
374	Brons, K. A.;	Telescope2 (Algorithm 38)	
375	Brons, K. A.;	Telescope1 (Algorithm 37)	
376	Gianni, A. J.;	Tchebycheff (Algorithm 36)	
377	Wood, T. C.;	SIEVE (Algorithm 35)	
378	Ross, D. T.;	A Generalized Technique for SymbolManipulation and Numerical Calculation	
379	Strachey, C.;	Bitwise Operations	
380	Traub, J. F.;	Comparison of Iterative Methods for the Calculation of nth Roots	Three iterative methods for calculation ofnth roots (including one proposed by the author)are compared in two ways: (1) Theoretical convergenceestimates are given.  (2) A new macrocompiler whichestimates machine running time is used to compare therunning time of the three methods for a varietyof input data.
381	Bratman, H.;	An Alternate Form of the "UNCOL Diagram"	
382	Bush, N.;	Statistical Programs at the University of North Carolina	
383	Caldwell, T.;	On Finding Minimum Routes in a Network With Turn Penalties	
384	Lipp, M. F.;	Gamma Function (Algorithm 34)	
385	Lipp, M. F.;	FACTORIAL (Algorithm 33)	
386	Freeman Jr., R. D.;	MULTINT (Algorithm 32)	
387	Collinge,R. M.;	Gamma Function (Algorithm 31)	
388	Vandergraft, J. S.;	Solution of Polynomial Equations byBairstow Hitchcock Method (Algorithm 3)	
389	Peavy, S.;	Real Exponential Integral (Algorithm 20)	
390	Rader, P. J.;Thacher Jr., H. C.;	Complex Exponential Integral (Algorithm 13)	
391	Smith, R. B.;	The BKS System for the Philco-2000	
392	Nekora, M. R.;	Comment on A Paper on Parallel Processing	
393	Carr III, J. W.;Hanson, J. W.;	Two Subroutines for Symbol Manipulation with an Algebraic Compiler	
394	Ryle, B. L.;	Multiple Programming Data Processing	
395	Rabinowitz, P.;	Multiple-Precision Division	
396	Jacoby, K.;Layton, H.;	Automation of Program  Debugging	Automatic Debugging can substantially reduce lead-time between the codingand the effective use of a complex program. It also enforces analysis ofdebugging criteria, resulting in verifiably accurate programs. The programmerspecifies the program to be debugged, memory areas, set of input data, maximumrepetition of loops, and checkpoint information for each set of data. Theexecutive debugging program the runs the program to be debugged, performingchecking functions and creating a trace record of its own later analysis andlocation of errors. Applications are quite flexible, and the system can be usedalone or in conjunction with other debugging techniques.
397	Grems, M.;	A Card Format for Reference Files in Information Processing	This paper proposes a card format suitable fora variety of reference files in informationprocessing.  An 80-column IBM card is divided into twofields-reference material field (columns 1-67)and identification field (columns 68-80).  The formatfor the reference material is flexible, while theformat for the identification is rigid.  The referencematerial includes basically an index, title, source,class, summary and cross reference for each entry.The identification includes basically codes for amatrix of descriptors, an entry number, and the kind,major interest, and source of the reference.  Theidentification also provides a choice to identify materialfor personal as well as general files.  Sincethis card format is sufficient to identify the materialnormally associated with reference files forbooks, articles, programming terms, hardware terms, equipment,machine systems, abbreviations, etc., itis suitable as a standard for card reference files in information processing.
398	Sibley, R. A.;	The SLANG System	
399	Huskey, H. D.;Wattenburg, W. H.;	Compiling Techniques for Boolean Expressionsand Conditional Statements in ALGOL 60	
400	Irons, E. T.;Feurzeig, W.;	Comments on the Implementation of RecursiveProcedures and Blocks in ALGOL 60	
401	Sattley, K.;	Allocation of Storage for Arrays in ALGOL 60	
402	Ingerman, P. Z.;	Dynamic Declarations	
403	Ingerman, P. Z.;	Thunks -- A Way of Compiling Procedure Statementswith Some Comments on Procedure Declarations	
404	Irons, E. T.;	A Syntax Directed Compiler for ALGOL 60	
405	Floyd, R. W.;	An Algorithm for Coding Efficient Arithmetic Operations	Most existing formula translation schemesyield inefficient coding.  A method is describedwhich reduces the number of store and fetch operations,evaluates constant subexpressions during compilation,and recognizes many equivalent subexpressions.
406	Evans Jr., A.;Perlis, A. J.;Van Zoeren, H.;	The Use of Threaded Lists in Constructing a CombinedALGOL and Machine-Like Assembly Processor	
407	Wells, M. B.;	MADCAP: A Scientific Compiler for a Displayed Formula Textbook Language	
408	Arden, B. W.;Galler, B. A.;Graham, R. M.;	The Internal Organization of the MAD Translator	
409	Cheatham Jr., T. E.;Collins Jr., G. O.;Leonard, G. F.;	CL-1, An Environment for a Compiler	A flexible, large-scale programming system tofacilitate the solution of information processingproblems and to provide intercommunication between programsand/or programmers has been developed andrealized on the IBM 709/7090 computer.  The system isbased on a master file concept and has provisionsfor accepting, storing, and retrieving both descriptionsand instances of large and complex data sets,as well as algorithms defined on these data sets.  Bothdata and algorithms may be expressed in a familyof command and descriptive languages.  The conceptof distinct data descriptions and the content anduse of such descriptions are discussed in some detail.
410	Englund, D.;Clark, E.;	The CLIP Translator	
411	Bottenbruch, H.;	Use of Magnetic Tape for Data Storage in the ORACLE-ALGOL Translator	
412	Gray, A. A.;	Recursive Processes and ALGOL Translation	
413	Huskey, H. D.;Wattenburg, W. H.;	A Basic Compiler for Arithmetic Expressions	
414	Wheeling, R.;	IBM 1440 Data Processing System Features Five New Units	The IBM 1440 data processing system, announcedrecently by the International Business MachinesCorporation, not only features the 1311 disk storagedrive with interchangeable disk packs but four othernewly developed units.
415	Schuff, H. K.;	The Use of Digital Computers in Western Germany	
416	Morrison, D. D.;Riley, J. D.;Zancanaro, J. F.;	Multiple Shooting Method for Two-Point Boundary Value Problems	
417	Freed, R. N.;	Legal Implications of Computer Use	This paper points out a variety of ways computersystems used in business and industry canbe involved in legal entanglements and suggests thatcomputer specialists have a responsibility to callfor assistance in forestalling or minimizing those entanglementsduring the planning stage.  Techniquesare suggested for making legal clearance effective withthe least burden on the new technology and forachieving a favorable legal climate for it generally.Computer specialists also are alerted to potentialopportunities to interpret to lawyers the technical aspectsof computer systems involved in legal situations.
418	Behrenz, P. G.;	RANDOM (Algorithm 133)	
419	Thacher Jr., H. C.;	Magic Square (Algorithm 118)	
420	Phillips, E. S.;	PERM (Algorithm 115)	
421	Hacker, R.;	Position of Point Relative to Polygon (Algorithm 112)	
422	Grench, R. E.;	COMBINATION (Algorithm 94)	
423	Behrenz, P. G.;	Matrix Inversion (Algorithm 58)	
424	Behrenz, P. G.;	Gamma Function (Algorithm 31)	
425	Merner, J. N.;	Complete Elliptic Integral (Algorithm 149)	
426	Collison, D. M.;	Term of Magic Square (Algorithm 148)	
427	Amit, D.;	PSIF (Algorithm 147)	
428	McKeeman, W. M.;	Multiple Integration (Algorithm 146)	
429	McKeeman, W. M.;	Adaptive Nimerical Integration by Simpson's Rule (Algorithm 145)	
430	Kaupe Jr.,A. F.;	TREESORT2 (Algorithm 144)	
431	Kaupe Jr., A. F.;	TREESORT1 (Algorithm 143)	
432	Hafley, W. L.;Lewis, J. S.;	Triangular Regression (Algorithm 142)	
433	Sonquist, J. A.;	Fixed-World-Length Arrays in Variable-Word-Length Computers	
434	Poore Jr., J. H.;	Character Manipulation in 1620 Fortran II	
435	Vasilakos, G. J.;	A Decision Matrix as the Basis for a Simple Data Input Routine	Currently a great deal of time and effort isbeing spent on the development of bigger and bettercompiler languages, multiprogram executive systems,etc.  Since the implementation of  of new methodsand procedures is not instantaneous, but rather occursby an evolutionary process, we should be concernedalso with the problem of maintaining, improving andincorporating new ideas into existing systems.  Itis with this somewhat neglected area that the author isinterested.  A method employing a decision matrixis presented for the handling of a standard systemsprogramming problem,that of providing a data inputroutine.
436	Knuth, D. E.;	Evaluation of Polynomials by Computer	
437	Galler, B. A.;Perlis, A. J.;	Compiling Matrix Operations	
438	Gorn, S.;	Mechanical Pragmatics: A Time-Motion Studyof a Miniature Mechanical Linguistic System	
439	Stark, L.;Payne, R.;Okabe, Y.;	On-Line Digital Computer for Measurement of a Neurological Control System	
440	Newcombe, H. B.;Kennedy, J. M.;	Record Linkage	Special difficulties are encountered in devisingreliable systems for searching and updatingany large files of documents that must be identifiedprimarily on the basis of names and other personalparticulars.  The underlying problem is that of making nearlymaximum use of items of identifying informationthat are individually unreliable but that may collectivelybe of considerable discriminating power.Rules that can be applied generally to name retrievalsystems have been developed in a methodologicalstudy of the linkage of vital and health records intofamily groupings for demographic research purposes.These rules are described, and the ways in which informationutilization for matching may be optimizedare discussed.
441	Kahn, A. B.;	Topological Sorting of Large Networks	Topological Sorting is a procedure requiredfor many problems involving analysis of networks.An example of one such problem is PERT.  The presentpaper presents a very general method for obtainingtopological order.  It permits treatment of larger networksthan can be handled on present proceduresand achieves this with greater efficiency.  Althoughthe procedure can be adapted to any machine, itis discussed in terms of the 7090.  A PERT network of30,000 activities can be ordered in less than onehour of machine time.  The method was developed asa byproduct of procedures needed by Westinghouse,Baltimore.  It has not been programmed and at presentthere are no plans to implement it.  In regardto the techniques described, Westinghouse's presentand anticipated needs are completely served by theLockheed program, which is in current use.
442	McKeeman, W. M.;	Crout with Equilibration and Iteration (Algorithm 135)	
443	Erwin Jr.,G. W.;	Complex Number to a Real Power (Algorithm 106)	
444	May, R. W.;	Evaluation of Jacobi Symbol (Algorithm 99)	
445	May, R. W.;	COMBINATION (Algorithm 94)	
446	Behrenz, P. G.;	Simpson's Integration (Algorithm 84)	
447	Williams, M. R.;	Certification of the Calculation of Easter	
448	Ingerman, P. Z.;	Path Matrix (Algorithm 141)	
449	Ingerman, P. Z.;	Matrix Inversion(Algorithm 140)	
450	Peck, J. E. L.;	Solution of the Diophantine Equation (Algorithm 139)	
451	Dahm, D. M.;Wells, M.;	Nesting of for Statement II (Algorithm 138)	
452	Dahm, D. M.;Wells, M.;	Nesting of for Statement I (Algorithm 137)	
453	Wells, M.;	Enlargement of a Group (Algorithm 136)	
454	McKeeman, W. M.;	Crout with Equilibration and Iteration (Algorithm 135)	
455	Fettis, H. E.;	Exponentiation of Series (Algorithm 134)	
456	Behrenz, P. G.;	RANDOM (Algorithm 133)	
457	Browne, J. C.;	Quantum Mechanical Integrals Over all Slater-Type Integrals	
458	Smith, V. H.;Allen, M. L.;	Coefficient Determination (Algorithm 131)	
459	Eaves, Lt. B. C.;	PERMUTE (Algorithm 130)	
460	Whitley, V. W.;	MINIFUN (Algorithm 129)	
461	Lipkin, M.;Woodbury, M. A.;	Coding of Medical Case History Data for Computer Analysis	
462	Stark,L.;Okajima, M.;Whipple, G. H.;	Computer Pattern Recognition Techniques: Electrocardiographic Diagnosis	The use of programmed digital computers as generalpattern classification and recognition devicesis one phase of the current lively interest in artificialintelligence.  It is important to choose aclass of signals which is, at present, undergoing agood deal of visual inspection by trained peoplefor the purpose of pattern recognition.  In this waycomparisons between machine and human performancemay be obtained.  A practical result also serves as additionalmotivation.  Clinical electrocardiogramsmake up such a class of signals.  The approach to theproblem presented here centers upon the use ofmultiple adaptive matched filters that classify normalizedsignals.  The present report fives some ofthe background for the application of this method.
463	Floyd, R. W.;	On Ambiguity in Phrase Structure Languages	
464	Barnett, M. P.;Futrelle, R. P.;	Syntactic Analysis by Digital Computer	This paper provides an account of the Shadowlanguage that is used to describe syntax and ofa corresponding subroutine that enables a computerto perform syntactic analysis.  The input to thissubroutine consists of a string to be analyzed and adescription of the syntax that is to be used.  Thesyntax is expressed in the Shadow language.  The outputconsists of a trace table that expresses theresults of the syntactic analysis in a tabular form.  Severalversions of the subroutine and some associatedprograms have been in use now for over three years.  Thepresent account of the language and the subroutinecontains a summary of material that has been describedpreviously in unpublished reports and also someadditional discussion of the work in relation to the moregeneral questions of problem-oriented languagesand string transformations.
465	Schrack, G. F.;	PERM (Algorithm 115)	
466	George, R.;	General Order Arithmetic (Algorithm 93)	
467	Schrack, G. F.;Shimrat, M.;	Permutation Generator (Algorithm 87)	
468	Jefferson, D. K.;	Incomplete Elliptic Integrals (Algorithm 73)	
469	Hellberg, L.;	Critical Path Scheduling (Algorithm 40)	
470	Wells, M.;	Summation of Fourier Series (Algorithm 128)	
471	Walsh, P. J.;	ORTHO (Algorithm 127)	
472	Counts, J. W.;	Gauss' Method (Algorithm 126)	
473	Rutishauser, H.;	WEIGHTCOEFF (Algorithm 125)	
474	Yarbrough, L.D.;	Input Data Organization in Fortran	
475	Pei, M. L.;	A Test Matrix for Inversion Procedures	
476	Nadler, M.;	Further Remarks on Sampling a Tape File-II	
477	Muller, M. E.;	Further Remarks on Sampling a Tape File-I	
478	Baecker, H.D.;	Implementing a Stack	
479	Mendoza, A. G.;	A Dispersion Pass Algorithm for the Polyphase Merge	This paper presents a new manner of dispersingstrings for a Polyphase merge.  If the numberof strings dispersed is between two levels acceptableby Polyphase merge, a more economical techniqueof reaching the next level for Polyphase merge is shown and proved.
480	Salzer, H. E.;	Quick Calculation of Jacobian Elliptic Functions (Corrigendum)	
481	Armerding, G. W.;Gruenberger, F. J.;Marks, S. L.;Parkin, T. R.;	A One-Day Look At Computing	
482	Feldman, J.;	TALL-A List Processor for the Philco 200 Computer	
483	Floyd, R. W.;	On the Nonexistence of a Phrase Structure Grammar for ALGOL 60	ALGOL 60 is defined partly by formal mechanismsof phrase structure grammar, partly by informallystated restrictions.  It is shown that no formal mechanismsof the type used are sufficient to defineALGOL 60.
484	Schaefer, L. J.;	Hankel Function (Algorithm 124)	
485	Crawford, M.;Techo, R.;	Real Error Function, ERF(x) (Algorithm 123)	
486	Dietzel, G. F.;	Tridiagonal Matrix (Algorithm 122)	
487	Shafer,D.;	NORMDEV (Algorithm 121)	
488	Weil, J. W.;	A Heuristic for Page Turning In a Multiprogrammed Computer	
489	Shaffer, S. S.;	Current Status of IPL-V for the Philco 2000 Computer (June 1962)	
490	Garfinkel, D.;	Programmed Methods for Printer Graphical Output	
491	Penny, J. P.;Pearcey, T.;	Use of Multiprogramming in the Design of a Low Cost Digital Computer	
492	Schay Jr., G.;Spruth, W. G.;	Analysis of a File Addressing Method	This paper presents a new file addressing methodbased on the calculation of an address fromthe identification of a record.  For large recirculatingtype files, it seems to be more advantageousthan customary ones.  The probability distribution ofthe displacement of records from their calculatedaddress, which is one less than the number of probesrequired to address a record, is computed on thebasis of a Markov chain model.  For the reader not interestedin the mathematics, the introduction andthe summary should be sufficient.
493	McGee, W. C.;	The Property Classification Method of File Design and Processing	
494	Luther, H. A.;Guseman Jr., L. F.;	A Finite Sequentially Compact Process for the Adjointsof Matrices Over Arbitrary Integral Domains	
495	Busing, W. R.;Levy, H. S.;	A Procedure for Inverting Large Symmetric Matrices	In the least squares method for simultaneousadjustment of several parameters, the coefficientsof the normal equations are the elements of a symmetricpositive-definite matrix.  In order to solvethe normal equations and evaluate the precision measuresof the resulting parameters, inversion of thismatrix of coefficients is required.  Many available proceduresfor matrix inversion do not take advantageof the symmetry.  Thus, when programmed for a high-speedcomputer, all n^2 elements must be stored andmanipulated, whereas only (n + 1)/2 of them are independent.In order to allow a computer of given memorycapacity to handle a larger matrix, the following procedurefor inverting a symmetric matrix has beendevised.
496	Brenner, J. L.;	A Set of Matrices for Testing Computer Programs	
497	Gluss, B.;	Further Remarks on Line Segment Curve-Fitting Using Dynamic Programming	In a recent paper, Bellman showed how dynamicprogramming could be used to determine the solutionto a problem previously considered by Stone.  The problemcomprises the determination, given N, of theN points of subdivision of a given interval (a,B) andthe corresponding line segments, that give thebest least squares fit to a function g(x) in the interval.Bellman confined himself primarily to theanalytical derivation, suggesting briefly, however,how the solution of the equation derived for eachparticular point of subdivision u(i) could be reduced toa discrete search.  In this paper, the computationalprocedure is considered more fully, and the similaritiesto some of Stone's equations are indicated.It is further shown that an equation for u(i) involvingno minimization may be found.  In addition,it is shown how Bellman's method may be applied to thecurve-fitting problem when the additional constraintsare added that the ends of the line segments must be on the curve.
498	Collison, D. M.;	Magic Square (Algorithm 117 & 118)	
499	Collison, D. M.;	Permutation Generator (Algorithm 87)	
500	Collison, D. M.;	PERMUTE (Algorithm 86)	
501	Hillmore, J. S.;	JACOBI (Algorithm 85)	
502	George, R.;	Simpson's Integration (Algorithm 84)	
503	Collison, D. M.;	Rational Roots of Polynomials with Integer Coefficients (Algorithm 78)	
504	Hillmore, J. S.;	FACTORS (Algorithm 75)	
505	Collison, D. M.;	Composition Generator (Algorithm 72)	
506	Hillmore, J. S.;	PERMUTATION (Algorithm 71)	
507	Hillmore, J. S.;	Partition, Quicksort, Find (Algorithm 63, 64, 65)	
508	George, R.;	Matrix Inversion (Algorithm 58)	
509	Struble, G.;	Matrix Inversion (Algorithm 58)	
510	Thacher Jr., H. C.;	Ber or Bei Function (Algorithm 57)	
511	Hillmore, J. S.;	A Set of Test Matrices (Algorithm 52)	
512	Thacher Jr., H. C.;	Telescope 1 (Algorithm 37)	
513	Hillmore, J. S.;	SIEVE (Algorithm 35)	
514	George, R.;	Binomial Coefficients (Algorithm 19)	
515	Thacher Jr., H. C.;	Rational Interpolation by Continued Fractions (Algorithm 18)	
516	George, R.;	Matrix Inversion II (Algorithm 120)	
517	Eisenman, B.;Shapiro, M.;	Evaluation of Pert Network (Algorithm 119)	
518	Collison, D. M.;	Magic Square (Odd Order) (Algorithm 118)	
519	Collison, D. M.;	Magic Square (Even Order) (Algorithm 117)	
520	Smith, R. L.;	Complex Division (Algorithm 116)	
521	Trotter, H. F.;	PERM (Algorithm 115)	
522	Stockmal, F.;	Generation of Partitions with Constraints (Algorithm 114)	
523	Floyd,R. W.;	TREESORT (Algorithm 113)	
524	Shimrat, M.;	Position of Point Relative to Polygon (Algorithm 112)	
525	Howell, J. R.;	A Computer Technique for Handling Analysis of Variance	
526	Pyle, I. C.;	Character Manipulation in Fortran	
527	Banerji, R. B.;	The Description List of Concepts	A concept is defined as a class of objectswhose members can be distinguished by processingits properties.  Property is defined to mean a partitionof the set of all objects into disjoint classes.The formal definition of a concept is recursive in nature.A concept is described by a list structure.A one-to-one correspondence is established between therecursive definition of a concept and its descriptionlist structure.  Like the definition, the descriptionlist structure of a concept is also built up fromelementary list structures by a recursive process.The list structures obtained this way are comparedwith the description list structure discussedby the author in a previous publication.
528	Robbins, D. K.;	FORTRAN for Business Data Processing	
529	Robison, D. E.;Aroian, L. A.;	Regression and Coded Patterns in Data Editing	
530	Siler, W.;Laughlin, J. S.;	A Computer Method for Radiation Treatment Planning	
531	Phillips Jr., W.;Bahn, A. K.;Miyasaki, M.;	Person-Matching by Electronic Methods	Record linkage in the updating of files isaccomplished in many establishments through theuse of a preassigned number, such as payroll number,customer number, or social security number.  Invital and health records, however, a unique numberis generally not preassigned to an individual forpurposes of reporting services received to the healthdepartment.  In order to determine whether differentphysician reports refer to the same individual, nameand other identification must be compared.  Thisis a laborious operation which is subject to variouserrors because of name misspellings, changes ofname upon marriage, and other problems.  We are interestedin the maintenance of a psychiatric case registerin Maryland, where many of the reports from over a hundredpsychiatric agencies refer to the same patient.These records must be linked in order to provide unduplicatedcounts of individuals under care and longitudinalrecords of psychiatric history.  An earlier paper [1] describesour general procedures for register maintenanceby use of a digital computer (Honeywell 800).  Herewe present in more detail our initial proceduresfor the person-matching process in order to elicit commentsand suggestions from persons who have hadexperience in matching.
532	Fraser, W.;HArt, J. F.;	On the Computation of Rational Approximations to Continuous Functions	
533	Peabody, P. R.;Adorno, D. S.;	Digital Synthesis of Correlated Stationary Noise	In this note we propose a method of generatingstationary noise with a prescribed auto-covariancefunction by digital methods.  The need for such a techniqueoften arises in testing the performance ofdata processing and engineering systems, where inputscorrupted with correlated noise (of a known form)are required.  The technique is quite simple and producesstrict-sense stationary noise which agreesapproximately with R(t), the prescribed auto-covariancefunction (acf), over an interval [-T(0), T(0)].The method consists of approximating the spectral densityby a periodic process with spectral lines,and then synthesizing the periodic noise with randomphases and appropriate amplitudes.  In order tosimplify discussion of the statistical properties of thenoise generated, the technique is first presentedin terms of exact harmonic analysis.  In practice, discreteharmonic analysis as presented in the thirdsection is used.
534	Salzer, H. E.;	Quick Calculation of Jacobian Elliptic Functions	
535	Onoe, M.;	Triangular Walk Pattern for the Down-hillMethod of Solving a Transcendental Equation	
536	Baer, R. M.;	Nonlinear Regression and the Solution of Simultaneous Equations	If one has a set of observables (Z1,...,Zm) whichare bound in a relation with certain parameters(A1,...,An) by an equation S(Z1,...;A1,...)=0, one frequentlyhas the problem of determining a set ofvalues of the Ai which minimizes the sum of squares ofdifferences between observed and calculated valuesof a distinguished observable, say Zm.  If the solutionof the above equation for Zm,  Zm=N(Z1,...;A1,...)gives rise to a function N which is nonlinear in the Ai,then one may rely on a version of Gaussian regression[1,2] for an iteration scheme that converges to a minimizingset of values.  It is shown here that thissame minimization technique may be used for the solutionof simultaneous (not necessarily linear) equations.
537	Davis, M.;Logemann, G.;Loveland, D.;	A Machine Program for Theorem-Proving	The program of a proof procedure is discussed inconnection with trial runs and possible improvements.
538	Kruglyak, Y. A.;Whitman, D. R.;	Quantum Mechanical Integrals of Slater-Type Orbitals (Algorithm 110)	
539	Kruglyak, Y. A.;Whitman, D. R.;	Definite Exponential Integrals B (Algorithm 109)	
540	Kruglyak, Y. A.;Whitman, D. R.;	Definite Exponential Integrals A (Algorithm 108)	
541	Relph, A. P.;	Simpson's Integration (Algorithm 84)	
542	Relph, A. P.;	FACTORS (Algorithm 75)	
543	Relph, A. P.;	Interpolation by Aitken (Algorithm 70)	
544	Relph, A. P.;	Ber or Bei Function (Algorithm 57)	
545	George, R.;	Adjust Inverse of a Matrix when an Element is Perturbed (Algorithm 51)	
546	Johnson, M. L.;Sangren, W.;	Logarithm of a Complex Number (Algorithm 48)	
547	Johnson, M. L.;Sangren, W.;	Gamma Function (Algorithm 34)	
548	Kruglyak, Y. A.;Whitman, D. R.;	Molecular-Orbital Calculation of Molecular Interactions	
549	Kruglyak, Y. A.;Whitman, D. R.;	Quantum Mechanical Integrals of Slater-Type Orbitals	
550	Kruglyak, Y. A.;Whitman, D. R.;	Definite Exponential Integrals B (Algorithm 109)	
551	Kruglyak, Y. A.;Whitman, D. R.;	Definite Exponential Integrals A (Algorithm 108)	
552	Counts, J. W.;	Gauss's Method (Algorithm 107)	
553	Johnson, M. L.;Sangren, W.;	Complex Number to a Real Power (Algorithm 106)	
554	Bauer, F. L.;Stoer, J.;	Newton Maehly, (Algorithm 105)	
555	Rutishausr, H.;	Reduction to Jacobi (Algorithm 104)	
556	Bottenbirruch, H. H;Grau, A. A.;	On Translation of Boolean Expressions	
557		Simulation of Computer Timing Device	
558	Larsen, L. J.;	A Modified Inversion Procedure for ProductForm of the Inverse Linear Programming Codes	This paper describes a new algorithm for theselection of the pivot row in matrix inversionwhen using the product form of the inverse.  This algorithmhas been developed for linear programmingcodes; however, it would be valuable for the inversionof any non-dense matrix.  The procedures describedin this paper have been thoroughly tested and have beenin operation on the Esso Research and EngineeringIBM 7090 computer for nine months.  Substantial computercost savings have been realized because of thisprocedure.
559	Appel, K.;	Solution of Eigenvalue Problems With Approximately Known Eigenvectors	
560	Wegner, P.;	Communication Between Independently Translated Blocks	
561	Hanson, J. W.;Caviness, J. S.;Joseph, C.;	Analytic Differentiation By Computer	
562	Whittier, V. E.;	AVINT (Algorithm 77)	
563	Randell, B.;	Sorting Procedures (Algorithm 76)	
564	Relph, A. P.;	CRAM (Algorithm 67)	
565	Caffrey, J.;	INVRS (Algorithm 66)	
566	Conger, R. A.;	Matrix Inversion (Algorithm 58)	
567	Relph, A. P.;	Logarithm of a Complex Number (Algorithm 48)	
568	Relph, A. P.;	Exponential of a Complex Number (Algorithm 46)	
569	Steck, B.;	Binomial Coefficients (Algorithm 19)	
570	Kuncir, G. F.;	Simpson's Rule Integrator (Algorithm 103)	
571	Schrack, G. F.;Shimrat, M.;	Permutation in Lexicographical Order (Algorithm 102)	
572	Kiviat, P. J.;	Add Item to Chain-Linked List (Algorithm 100)	
573	Kiviat, P. J.;	Remove Item From Chain-Linked List (Algorithm 101)	
574	Garland, S. J.;Knapp, A. W.;	Evaluation of Jacobi Symbol (Algorithm 99)	
575	Pfaltz, J. L.;	Evaluation of Definite Complex Line Integrals (Algorithm 98)	
576	Floyd, R. W.;	Shortest Path (Algorithm 97)	
577	Floyd, R. W.;	ANCESTOR (Algorithm 96)	
578	Stockmal, F.;	Generation of Partitions in Part-Count Form (Algorithm 95)	
579	Kurtzberg, J.;	COMBINATION (Algorithm 94)	
580	Perstein, M. H.;	General Order Arithmetic (Algorithm 93)	
581	Jones, T. G.;	A Note on Sampling a Tape-File	
582	Oster, C. A.;	One Lost Bit	
583	Thacher Jr., H. C.;	A Redundancy Check for ALGOL Programs	
584	Rabinowitz, I. N.;	Report on the Algorithmic Language FORTRAN II	
585	Landis, N.;Manos, A.;Turner, L. R.;	Initial Experience With an Operating Multiprogramming System	The Lewis Research Center has been using variousforms and degrees of program simultaneityin the operation of its modified Sperry-Rand Univac ScientificModel 1103 computer during the last fiveyears.  This simultaneity has evolved from an initialachievement of self-searching input and outputto the automatic time sharing of independently codedproblems.  Several important machine and programsystem modifications were necessary to accomplish thisevolution.  Several additional modifications,although not required, were added to facilitate easeof coding and operation.  All modifications hadto proceed at a relatively temperate pace to insure thatthe basic data-reduction work load of the computingcenter was completed on schedule.  Some educationallyvaluable mistakes were made, and their suggestedcures often pointed the way to useful future improvementsor emphasized some of the basic principlesof a multiprogramming system.  The material that followsis a description of the evolution of the programmingand hardware system which has developed into the presentmultiprogramming system at Lewis research Center.
586	Roek, D. J.;	Simultaneous System of Equations andMatrix Inversion Routine (Algorithm 92)	
587	Buchner, K. H.;	Romberg Integration (Algorithm 60)	
588	Newhouse, A.;	Chebyshev Curve-Fit (Algorithm 91)	
589	Cundiff, J. L.;	Evaluation of the Fresnel Cosine Integral (Algorithm 90)	
590	Cundiff, J. L.;	Evaluation of the Fresnel Sine Integral (Algorithm 89)	
591	Cundiff, J. L.;	Evaluation of Asymptotic Expression for theFresnel Sine and Cosine Integrals (Algorithm 88)	
592	Mullen, J. W.;	COBOL Batching Problems	
593	Mullin, J. P.;	An Introduction to a Machine-Independent Data Division	
594	Bouman, C. A.;	An Advanced Input-Output System for a COBOL Compiler	
595	Greene, I.;	Guides to Teaching COBOL	The teaching of COBOL can be divided intothree main subject areas.  They are the syntax ofCOBOL, the use of such syntax in solving any given problem,and programming concepts.  It is generallyaccepted that some knowledge of the hardware and computerlogic must be possessed by the programmer.The teaching problem arises in determining how thoroughlya student must know the hardware and logicfor that computer for which he will write COBOL programs.Unfortunately, historical data concerningstudents' programming proficiency is almost non-existentand, at best, difficult to measure.  How thenmight we approach solving this problem?
596	Kesner, O.;	Floating-Point Arithmetic in COBOL	In this paper the basic operations of floating-pointarithmetic are examined and COBOL proceduresfor carrying these out are given, along with specificationof working storage.  The paper concludes withan example in which these procedures are used.
597	Emery, J. C.;	Modular Data Processing Systems Written in COBOL	
598	Hicks, W.;	The COBOL Librarian - A Key to Object Program Efficiency	Many answers to the question "How may a COBOLCompiler be forced into the generation of anefficient object program?"  The purpose of this articleis to present one possible answer: the creationand full utilization of a well-constructed COBOL Library.
599	Donally, W. L.;	A Report Writer For COBOL	
600	Berman, R.;Sharp, J.;Sturges, L.;	Syntactical Charts of COBOL 61	
601	Siegel, M.;Smith, A. E.;	Interim Report on Bureau of Ships COBOL Evaluation Program	
602	Lippitt, A.;	COBOL and Compatibility	
603	Sammet, J. E.;	Basic Elements of COBOL 61	
604	Cunningham, J. F.;	Why COBOL?	
605		Computer Simulation Of City Traffic	In simulating traffic flow on city streets,the National Bureau of Standards has used dataprocessing techniques to tabulate and make motion picturesof vehicle movements in the model.  Each vehicleis assigned a digital identification giving points ofentry and exit, type of vehicle, desired speed,and actual speed, in proportions simulating field data.Changes in the model can be made to observetheir consequences and to determine the ability of areal street to carry loads expected in the future.
606	Kaiser, C. J.;	A Method for Eliminating Ambiguity Dueto Signal Coincidence in Digital Design	
607	Knuth, D.;	The Calculation of Easter...	
608	Peck, J. E. L.;Schrack, G. F.;	Permutation (Algorithm 71)	
609	Brown, P. J.;	Permutation (Algorithm 71)	
610	Brown, P. J.;	SIEVE (Algorithm 35)	
611	Howell, J. R.;	Permutation Generator (Algorithm 87)	
612	Peck, J. E. L.;Schrack, G. F.;	Permute (Algorithm 86)	
613	Evans, T. G.;	JACOBI (Algorithm 85)	
614	Hennion, P. E.;	Simpson's Integration (Algorithm 84)	
615	Hellerman, H.;	Addressing Multidimensional Arrays	A useful method of representing a function ofn variables is to consider the function to assumeits values at selected points in n-dimensional space.Although this picture is of value to the analyst,the elements of an n-dimensional array must exist inconventional storage as a linear array or vector.The means of performing the transformation of a setof indices locating on array element in n-spaceto the location (address) of the element in its storagevector is the subject of this paper.  It is notedthat the index address transformation is computationallyidentical to the conversion of a number froma fixed to a mixed radix number system.  Several waysof implementing the transformation are described.
616		An Information Algebra - Phase I Report-LanguageStructure Group of the CODASYL Development Committee	This report represents the results of thefirst phase of the work of the Language StructureGroup.  The goal of this work is to arrive at a properstructure for a machine-independent problem-defininglanguage, at the systems level of data processing.  Thereport is based, for the most part, on a mathematicalmodel called "An Information Algebra" developed primarilyby R. Bosak.  It is hoped that this reportwill be read (a) with avid interest by programming languagedesigners and implementors, and all thoseinterested in developing a theoretical approach to dataprocessing; (b) with interest and understandingby professional programmers and systems analysts; and (c)with appreciation by the businessman-analyst-manager.The authors have not attempted an exhaustive discoursein this report.  Rather, they have tried to presenta philosophy to the professional people who are vitallyconcerned with providing a working language forthe systems analyst's use.  They trust that the ideasin this report will stimulate others to think alongsimilar lines.  Questions and comments will be welcomed,and can be addressed to any of the members ofthe Language Structure Group:  Robert Bosak, SystemDevelopment Corporation;  Richard F. Clippinger,Honeywell EDP Division;  Carey Dobbs, Remington RandUnivac Division;  Roy Goldfinger (Chairman), IBMCorporation;  Renee B. Jasper, Navy Management Office;William Keating, National Cash Register;  GeorgeKendrick, General Electric Company;  Jean E. Sammet, IBM Corporation.
617	Wheeling, R. F.;	POSEIDON	Any computer that forms part of a control system-whethercompletely automatic or partly human-mustwork at the same speed as the control system.  It mustperform its calculations or data processing fastenough for the results to be available at the requiredinstants in the action of the control system.This known as working in "real time."
618	Carlson, W. M.;	Computers- The Key to Total Systems Control: An Industrial Viewpoint	Man-Man-machine processes are characterized in fivemain types, and the markets for each type areshown for 1950 and 1960 and estimated for 1970.
619	Davidson, L.;	Retrieval of Misspelled Names in an Airlines Passenger Record System	This paper discusses the limited problem ofrecognition and retrieval of a given misspelledname from among a roster of several hundred names, suchas the reservation inventory for a given flightof a large jet airliner.  A program has been developedand operated on the Telefile (a stored-programcore and drum memory solid-state computer) which willretrieve passengers' records successfully, despitesignificant misspellings either at original entry timeor at retrieval time.  The procedure involvesan automatic scoring technique which matches the namesin a condensed form. Only those few names mostclosely resembling the requested name, with their phonenumbers annexed, are presented for the agentsfinal manual selecton.  The program has successfullyisolated and retrieved names which were subjectedto a number of unusual (as well as usual) misspellings.
620	Halstead, M. H.;	RATFACT (Algorithm 78)	
621	Thacher Jr., H. C.;	Romberg Integration (Algorithm 60)	
622	Mayoh, B. H.;	Optimal Classification of Objects (Algorithm 83)	
623	Mayoh, B. H.;	Economising a Sequence 2 (Algorithm 82)	
624	Mayoh, B. H.;	Economising a Sequence 1 (Algorithm 81)	
625	Holsten, W.;	Reciprocal Gamma Function of Real Argument (Algorithm 80)	
626	Foster, M. B.;	A Method of Representation, Storage and Retrievalof 13 Random Codes in a 4-Digit Number or 16Random Codes in a 5-Digit Number	
627	Weizenbaum, J.;	Knotted List Structures	
628	Grau, A. A.;	On a Floating-Point Number RepresentationFor Use with Algorithmic Languages	
629	Lynch, W. C.;	On a Wired-In Binary-to-Decimal Conversion Scheme	
630	Ellis, P. V.;	An Evaluation of Autocode Readability	Of the many requirements of an autocode, thepair of requirements "easy to read" and "easyto write" are not often compatible.  This paper arguesthat readability can be added automatically inthe translation process so that the programmer canenjoy the utmost economy of expression, while formanagement a full and valid COBOL version is printed to giveall the advantages of readability and compatibility.
631	Ledley, R.S.;Wilson, J. B.;	Automatic-Programming-Language Translation Through Syntactical Analysis*	
632	Forsythe, G. E.;Von Der Groeben, J.;Toole, J. G.;	Vectorcardiographic Diagnosis With The Aid of ALGOL	
633	Garfinkel, D.;Polk, W.;Higgins, J. J.;Ochser, R. T.;	Simulation and Analysis of Biochemical Systems(III. Analysis and Pattern Recognition)	
634	Salton, G.;	Manipulation of Trees in Information Retrieval*	
635	Baker, J. J.;	A Note on Multiplying Boolean Matrices	
636	Weisert, C.;	Tape Splitting in an Iterative Program	
637	Watt, J. B.;Wattenburg, W. H.;	A NELIAC-Generated 7090-1401 Compiler	NELIAC systems for several different machineshave been generated using the original NELIACsystem developed at the Naval Electronics Laboratory,San Diego, in 1958.  A basic "bootstrap" processwas used to generate all but the first, i.e. the systemswere described in the NELIAC language and generatedby an existing NELIAC compiler.  This experience hasshown there is no inherent difficulty in "buildingcompilers with compilers"; indeed, it pointed out many advantagesin using a POL for constructing programmingsystems.  This report presents the results of a projectcompleted in May, 1961 in which the NELIAC systemwas used to generate a compiler for the IBM 1401.  The1401 compiler, which runs on the 7090 and produces1401 programs, was described in the NELIAC language andgenerated with 7090 NELIAC system.  The reductionin programming time and the improvement in documentationof the system were very significant.
638	Longo, L. F.;	SURGE: A Recoding of the COBOL Merchandise Control Algorithm	
639	Giammo, T. P.;	Difference Expression Coefficients (Algorithm 79)	
640	Perry, C.;	Rational Roots of Polynomials with Integer Coefficients (Algorithm 78)	
641	Hennion, P. E.;	Interpolation, Differentiation, and Integration (Algorithm 77)	
642	Schwarz, H. R.;	An Introduction to ALGOL	
643	Larson, R.;Sellers, P.;Meyer, R.;	Simulation and Analysis of Biochemcial Systems(II. Solution of Differential Equations)	
644	Wegstein, J. H.;Youden, W. W.;	A String Language for Symbol Manipulation Based on ALGOL 60	An artificial computer programming languageis proposed for describing the manipulation ofstrings of characters and symbols.  The concept of strings,introduced in the ALGOL 60 report, is extendedby adding: (1) the declaration of strings, substrings,and string arrays with explicit lengths; (2) theability to concatenate and shift strings; and (3) theranking of symbols for comparing stings in Booleanrelations.  A primer or informal description of thelanguage is followed by examples, a description ofexperiments with the language on an IBM 704 computer,and a formal description which, taken with theALGOL 60 Report, defines the proposed string language.
645	Randell, B.;Broyden, C. G.;	INVRS (Algorithm 66)	
646	Randell, B.;	Inverse of a Finite Segment of the Hilbert Matrix (Algorithm 50)	
647	Cohen, K. J.;	Numerical Solution of the Polynomial Equation (Algorithm 30)	
648	Flores, I.;	Sorting Procedures (Algorithm 76)	
649	Peck, J. E. L.;	FACTORS (Algorithm 75)	
650	Peck, J. E. L.;	Curve Fitting with Constraints (Algorithm 74)	
651	Grems, M.;	A Survey of Languages and Systems for Information Retrieval	
652	Sable, J. D.;	Use of Semantic Structure in Information Systems	
653	Cheatham Jr., T. E.;Warshall, S.;	Translation of Retrieval Requests Couchedin a "Semiformal" English-Like Language*	
654	Barnes, R. F.;	Language Problems Posed by Heavily Structured Data	
655	Yngve, V. H.;	COMIT as an IR Language	Many of the features that make COMIT a goodall around symbol manipulation language also renderit well suited to various types of information retrievalprograms.  Presented here is a general discussionof this unique and different programming languageand an examination of some of its applications.
656	Wang, T. L.;	An Information System With The Ability To Extract Intelligence From Data	
657	Colilla, R. A.;Sams, B. H.;	Information Structures for Processing and Retrieving	
658	Sammet, J. E.;Ohlman, H.;Bohnest, H. G.;	Discussion-The Pros and Cons of a Special IR Language	
659	Thacher Jr., H. C.;	Reversion of Series (Algorithm 193)	
660	Englar, T. S.;	More Test Matrices for Determinants and Inverses (Pracnique)	
661	Barnett, M. P.;	Indexing and the Lambda-Notation	Some methods of indexing sequentially storedelements of sparse multi-dimensional arrays aredescribed in the scheme A notation.
662	Juelich, O. C.;	Shuttle Sort (Algorithm 175)	
663	Lapidus, A.;	Determinant (Algorithm 159)	
664	Witty, R. D.;	Assignment (Algorithm 27)	
665	Shantz, P. W.;	Gauss-Seidel (Algorithm 220)	
666	Kase, R. H.;	Topological Ordering for Pert Networks (Algorithm 219)	
667	Lukehart, P. M.;	Kutta Merson (Algorithm 218)	
668	Briggs, W. A.;	Minimum Excess Cost Curve (Algorithm 217)	
669	Shaw, C. J.;	A Specification of JOVIAL	
670	Freed, R. N.;	Some Legal Implications of the Use of Computers in the Banking Business	The introduction of computers in to the bankingbusiness has a wide variety of legal implicationsthat merit careful attention at this very early stage.The industry is highly regulated by governmentand, hence, is subject to many statutes and regulations.It also is affected by important common lawrules established by courts.  The legal ramificationsinvolve not only the mechanization itself, butalso the very significant, economically attractive phenomenonof off premises processing.  It is essentialto identify and provide for many legal aspects rightnow, before systems and practices crystallize, inorder to avoid the later impact of unanticipated physicalcomplications and expense.  The legal aspectsof computerization in the banking business are especiallydiverse.  In some states, there might be thebasic question whether banks are authorized by law toinvest in the new facilities, either directly orthrough cooperatives.  More challenging are questionsrelating to off-premises processors, particularlywith respect to the obligation not to disclose informationconcerning a bank's customers, the adequacyof fidelity bond coverage, the extent of liability forimproper refusal to pay a check, and susceptibilityto regulation by government agencies.  Also pertinentis the propriety of data processing by banks fornonbank entities and particularly of the rendering ofthat service without charge for bank depositors.
671	Sanders, M.;	TELEFILE-A Case Study of an On-Line Savings Bank Application	The development of an on-line computer systemfor a savings bank institution is traced fromthe early conceptual needs of the bank to the consummationof design by The Teleregister Corporation.Both bank and equipment criteria are specified whichled to the development of the Telefile System ofThe Teleregister Corporation.  Operation of the on-lineand off-line programs are described and statisticsare cited for reliability and performance of the system.Benefits to the bank are discussed from thebanker's point of view; an indication of future trendsin the on-line savings bank field is also discussed.
672	Leibowitz, G. J.;	Recent Developments Affecting ADP in Tax Administration	
673	Eckert, J. B.;	Account Classification at Automating Banks	
674	Andrews, A. C.;Hassler, J.;DeCou, F.;	Application of IBM 1620 EDP Methods to the Calculationof the Formation Constants of ComplexIrons	
675	Gross, L. D.;	Coding Clinical Laboratory Data For Automatic Storage and Retrieval	A series of clinical laboratory codes have beendeveloped to accept and store urin analysis, bloodchemistry, and hematology test results for automaticdata processing.  The codes, although constructedas part of a computerized hospital simulation, have beenable to handle the results of every laboratorytest that they have encountered.  The unique feature ofthese codes is that they can accept conventionallyrecorded qualitative as well as quantitative test results.Consequently, clinical test results neednot be arbitrarily stratified, standardized, or alteredin any way to be coded.  This paper describeshow the codes were developed and presents a listing of theurin analysis codes.  Five criteria used in developingthe codes are outlined and the problem of multiple-synonymousterminology is discussed.  A solution tothe problem is described.  Flexible, computer-produced,composite laboratory reports are also discussed,along with reproduction of such a report. The paper concludesthat even though many problems remain unsolved,the next ten years could witness the emergence of a practicalautomated information system in the laboratory.
676	Tang, I. C.;	On the Computation of a Certain Type of IncompleteBeta Functions	
677	Knuth, D. E.;	Length of Strings for a Merge Sort	Detailed statistics are given on the lengthof maximal sorted strings which result form thefirst (internal sort) phase of a merge sort onto tapes.It is shown that the strings produced by analternating method (i.e. one which produces ascendingand descending strings alternately) tend to beonly three-fourths as long as those in a method which producesonly ascending strings, contrary to statementswhich have appeared previously in the literature.  Aslight modification of the read-backward polyphasemerge algorithm is therefore suggested.
678	Katz,J. H.;	Optimizing Bit-time Computer Simulation	A major component of a bit-time computer simulationprogram is the Boolean compiler.  The compileraccepts the Boolean functions representing the simulated computer'sdigital circuits, and generates correspondingsets of machine instructions which are subsequentlyexecuted on the "host" computer.  Techniques arediscussed for increasing the sophistication of the Booleancompiler so as to optimize bit-time computersimulation.  The techniques are applicable to any general-purpose computer.
679	Wells, M. B.;	Recent Improvements in MADCAP	MADCAP is a programming language admitting subscripts,superscripts and certain forms of displayedformulas.  The basic implementation of this language wasdescribed in a previous paper [MADCAP: A scientificcompiler for a displayed formula textbook language, Comm.ACM 4 (Jan. 61), 31-36].  This paper discussesrecent improvements in the language in three areas: complexdisplay, logical control, and subprogramming.In the area of complex display, the most prominent improvementsare a notation for integration and forthe binomial coefficients.  In the area of logical controlthe chief new feature is a notation for variablynested looping.  The discussion of subprogramming is focusedon MADCAP's notation for and use of "procedures."
680	Irons, E. T.;	An Error-Correcting Parse Algorithm	
681	Lomis, R. G.;Rubin, J.;	Flexible Abbreviation of Words in a Computer Language	
682	Ayers, J. A.;	Recursive programming in FORTRAN II	
683	Weimer, D. L.;	A Serial Technique to Determine Minimum Paths	
684	Hennion, P. E.;	Interpolation, Differentiation, and Integration (Algorithm 77)	
685	Thacher Jr., H. C.;	Euler Summation (Algorithm 8)	
686	George, R.;	Smooth (Algorithm 216)	
687	Thacher Jr., H. C.;	Shanks (Algorithm 215)	
688	Simoes Pereira, J. M. S.;	q-Bessel Functions In(t)(Algorithm 214)	
689	Gosden, J. A.;Merner, J. N.;Gay, R. E.;Jones, J. L.;Christopher, J. S.;	Report of a Visit to Discuss Common ProgrammingLanguages in Czechoslovakia and Poland, 1963	
690	Traub, J. F.;	USA Participation in an InternationalStandard glossary on Information Processing	
691	Brown, S. A.;Drayton, C. E.;Mittman, B.;	A Description of the APT Language	The APT (Automatically Programmed Tools) languagefor numerical control programming is describedusing the metalinguistic notation introduced in the ALGOL60 report.  Examples of APT usage are included.Presented also are an historical summary of the developmentof APT and a statement concerning its presentstatus.
692	Stockmal, F. J.;	On the Inverse of a Test Matrix	
693	Krolak, P.;Cooper, L.;	An Extension of Fibonaccian Search To Several Variables	A technique which uses Fibonaccian searchconcepts has been developed to solve optimizationproblems involving unimodal functions of several variables.The technique has not been proven to beoptimal in the sense that the one-dimensional Fibonacciansearch is.  However, it is valuable for certainkinds of calculations.
694	Hess, H.;	A Comparison of Disks and Tapes	The principal characteristics of current magneticdisks and tape units are summarized and compared.Some of the characteristics of disk files are illustratedin a sorting example and compared to a tapesort.The conclusion is presented that disk files are competitiveto tapes in some important applications.
695	Carlson, B. G.;Voorhes, E. A.;	Use of the Disk File on Stretch	The paper begins by briefly describing theStretch (IBM 7030) computer with special emphasisgiven to the organization and operation of its input-outputequipment.  Physical characteristics of thetwo-disk system (4,194,304 72-bit words, 8 usec-per-wordtransmission rate, etc.) are noted.  Timinglimitations due to arm motion and disk rotation are discussed.Applications of disk usage are discussedseparately for problem programs and for systems programssuch as compilers and the supervisory program.Approximately 260,000 words of disk storage are reservedfor the storage of systems programs and thesubroutine library.  Problem programs, however, are notcurrently filed on the disk.  Certain programmingtechniques are discussed for transmitting words betweendisk and core storage with minimum delaying andinterruption of the arithmetic unit.  Dumps on disk areconsidered for both recovery from computer malfunctionand for mathematical or physical developments duringthe calculation.  Some comments are made regardingthe reliability, economics, utility and weaknesses orlimitations of the disk system.  Several possiblefuture applications are noted which appear to have disk connotations.
696	Edwards, J. D.;	An Automatic Data Acquisition and Inquiry System Using Disk Files	Lockheed Missiles and Space Company has installeda large-scale Automatic Data Acquisition(ADA) system which ties together the Company's manufacturingfacilities located in Van Nuys and Sunnyvale,California.  The system includes over 200 remote InputStations which collect and transmit Company operatingdata to a central Data Processing Center.  Two RCA 301EDP Systems are used to record and control theflow of data transmitted to the Data Processing Center.A large capacity RCA 366 Data Disc File is usedto store information required to provide up-to-dateinformation in response to inquiries received fromremotely located Inquiry Stations.  In addition to storageof data on the disk files, the system automaticallyrecords all incoming and outgoing data on magnetic tapeto be used as input to the Company's conventionaloff-line business data processing applications.
697	Dalrymple, G. V.;Perez-Tamayo, R.;	A Numerical Method for the Determination of MovingField Isodose Curves for Treatment Planningin Radiotherapy	
698	Marill, T.;Edwards, D.;Feurzeig, W.;	DATA-DIAL: Two-Way Communication withComputers From Ordinary dial Telephones	An operating system is described which allowsusers to call up a remotely located computerfrom ordinary dial telephones.  No special hardware orconnections are required at the users' telephones.Input to the computer is through the telephone dial;outputfrom the computer is in spoken form.  Resultsof a test with telephones in the Boston area are reported.
699	Dayhoff, M. O.;	A Contour-Map Program for X-Ray Crystallography	A FORTRAN program is described for use withthe IBM 7090 system and an X, Y-plotter to producea contour map.  A matrix of points evenly spaced ineach dimension is contoured.  Scale factors alongthe axes may be different and the axes need not be perpendicular.
700	Dwyer, T. A.;	Hermite Interpolation (Algorithm 210)	
701	Schubert, G. R.;	Shuttle Sort (Algorithm 175)	
702	Filsak, Z.;Vrchovecka, L.;	Assign (Algorithm 173)	
703	Scowen, R. S.;	Assign (Algorithm 173)	
704	Collins, D. H.;	Combinatorial of M Things Taken One At A TimeTwo At A Time, Up To N At A Time (Algorithm 161)	
705	Blakely, R. E.;	Combinatorial Of M Things Taken N At A Time (Algorithm 160)	
706	Schubert, G. R.;	Fourier Series Approximation (Algorithm 157)	
707	Ibbetson, D.;	Erf(x) (Algorithm 123)	
708	Gray, M. D.;	Evaluation of the Fresnel Integrals (Algorithm 88, 89, 90)	
709	Newhouse, A.;	Assignment (Algorithm 27)	
710	Gray, M. D.;	Fresnel Integrals (Algorithm 213)	
711	Gray, M. D.;	Frequency Distribution (Algorithm 212)	
712	Schubert, G. R.;	Hermite Interpolation (Algorithm 211)	
713	Schubert, G. R.;	Lagrangian Interpolation (Algorithm 210)	
714	Ibbetson, D.;	Gauss (Algorithm 209)	
715	Foreman Jr., W. T.;	Discrete Convolution (Algorithm 208)	
716	Boothroyd, J.;	Stringsort (Algorithm 207)	
717	Hutchinson, G.;	Partitioning Algorithms for Finite Sets	The partitions of a set with n elements are representedby certain n-tuples of positive integers.Algorithm are described which generate without repetitionsthe n-tuples corresponding to: (1) all partitionsof the given set, (2) all partitions of the given setinto m or fewer sets (1 <= m <= n), and (3) allpartitions of the given set into exactly m sets (1 <= m <= n).
718	Weinberg, G. M.;Gressett, G. L.;	An Experiment in Automatic Verification of Programs	How effective is a compiler at replacing explicitverification, and what is the cost of thistechnique?
719	Rotenberg, N.;Opler, A.;	Variable Width Stacks	Character addressable, variable field computerspermit ready establishment and manipulationof variable width stacks.  Single machine commands maypush variable field items down into such stacksor pop them up.  The availability of a variety of fielddelimiters allows the machine to push down orpop up more than one variable width item with one command.Since these stacking operations can be madethe basis of compiler decoding algorithms the properuse of machines of this class for compilation hasadvantages over machines with fixed-length words.
720	Bailey, M. J.;Barnett, M. P.;Futrelle, R. P.;	Format-Free Input in FORTRAN	
721	Rossheim, R. J.;	Report on Proposed American Standard FlowchartSymbols for Information Processing	This paper presents the essential contents ofthe Proposed American Standard Flowchart Symbolsfor Information Processing.  This is the first proposedstandard prepared by Subcommittee X3.6 on ProblemDescription and Analysis of the American Standards Association (ASA).
722		ALCOR Group Representation of ALGOL Symbols	
723		ECMA Subset of ALGOL 60	
724		A Profile of the Programmer	Synopsis: 549 members of the ACM participatedin a study concerned primarily with the attitudesof programmers toward their careers and jobs.  A veryhigh percentage of programmers have apparentlyentered their careers by accident; it has proven a happychoice for most and they expect to remain inthe field during the next five years.  Their principaljob satisfactions relate to the nature of theirwork, and mostfind their jobs offer high level of professionalinterest and good working conditions.Salary and advancement prospects, however,are not assatisfactory.  More than half report a positiveattitude toward programmers and programming on the partof their organizations.  Turnover among themselvesis attributed primarily to poor management-salary isseen as the principal motivating factor in turnoveramong other programmers.  Nature of the work offeredand salary are principal determinants in acceptinga new job.  Programmers are less mobile than expected.Programmers tend to see their colleagues in afavorable light, on the whole.  Personalities seem tovary with function, systems programmers differingfrom applications programmers.  Four principal problemsfor programming in the immediate future are listedby participants: languages, personnel, various specificapplications and techniques, and building programmingas a profession.
725	McCormick, E. M.;	Group Participation Computer Demonstration	
726	Smillie, K. W.;	A General Program for the Analysis ofSquare and Rectangular Lattice Designs	This paper describes a general-purpose programthat will handle those incomplete block designsknown as square and rectangular lattices.  Flow diagramsare given so that the method of calculationmay be programmed for any digital computer.
727	Greenspan, D.;Yohe, M.;	On the Approximate Solution of Delta(u)=F(u)	Three-dimensional Dirichlet problems for Delta(u)=F(u),Fu >= 0, are treated numerically byan exceptionally fast, exceptionally accurate numericalmethod.  Programming details, numerous examplesand mathematical theory are supplied.Extension of themethod in a natural way to n-dimensional problemsis indicated by means of a 4-dimensional example.
728	Knuth, D. E.;	Computer-Drawn Flowcharts*	To meet the need for improved documentationof written computer programs, a simple system foreffective communication is presented, which has showngreat promise.  The programmer describes his programin a simple format, and the computer prepares flow chartsand other cross-referenced listings from thisinput.  The description can be kept up-to-date easily,and the final output clearly explains the originalprogram.  The system has also proved to be a valuable debugging and coding aid.
729	Wirth, N.;	A Generalization of ALGOL	
730	Gawlik, H. J.;	MIRFAG: A Compiler Based on StandardMathematical Notation And Plain English	A pilot version of the compiler MIRFAG, nowin operation, is described.  The chief featuresof the system, which is intended for the solution of scientificproblems, are the presentation of mathematicalformulas entirely in standard textbook notation.  The useof plain English for organizational instructions,automatic error diagnosis indicating the actual locationof the error in the uncompiled program, andan attempt to minimize that fragmentation of the originalproblem statement which is a normal featureof programming systems.
731	Weizenbaum, J.;	Symmetric List Processor	A list processing system in which each listcell contains both a forward and a backward linkas well as a datum is described.  This system is intendedfor imbeding in higher level languages capableof calling functions and subroutines coded in machine language.The presentation is in the form of FORTRANprograms depending on only a limited set of FORTRAN programsdepending on only a limited set of "primitive"machine language subroutines which are also defined.Finally, a set of field, particularly character,manipulation primitives are given to round out the system.
732	Rodman,R. D.;	Monte Carlo Inverse (Algorithm 166)	
733	Thacher Jr., H. C.;	Newton Interpolation with Forward Divided Differences (Algorithm 169)	
734	Thacher Jr., H. C.;	Newton Interpolation with Backward Divided Differences (Algorithm 168)	
735	Thacher Jr., H. C.;	Calculation of Confluent Divided Differences (Algorithm 167)	
736	Thacher Jr.,H. C.;	Modified Hankel Functions (Algorithm 163)	
737	Lawrence, J. D.;	Exponentiation of Series (Algorithm 158)	
738	George, R.;	Fourier Series Approximation (Algorithm 157)	
739	Wasscher, E. J.;	MINIFUN (Algorithm 129)	
740	Wright, C. B.;	INTEREST (Algorithm 45)	
741	Freed, B. H.;	Evaluation of Determinant (Algorithm 41)	
742	Freed, B. H.;	Evaluation of Determinant (Algorithm 41)	
743	Konda, M.;	ARCCOSIN (Algorithm 206)	
744	Haubrich, J. G. A.;	ATIVE (Algorithm 205)	
745	Wasscher, E. J.;	STEEP2 (Algorithm 204)	
746	Wasscher, E. J.;	STEEP1 (Algorithm 203)	
747	Shen, M. K.;	Generation of Permutations in Lexicographical Order (Algorithm 202)	
748	Chu, W. H.;Saathoff, D. R.;	A Semi-Iterative Process for Evaluating Arctangents	
749	Dumey, A. I.;	Note onStochastic Matrices	
750	Newbery, A. C. R.;	PEI Matrix Eigenvectors	
751	Rodman, R. D.;	A Note on a Set of Test Matrices for Inversion	
752	Moore, D. P.;	Closing Out a Print Tape	
753	Egler, J. F.;	A Procedure for Converting Logic Table Conditionsinto an Efficient Sequence of Test Instructions	
754	Blatt, J. M.;	Ye Indiscreet Monitor	
755	Pope, D. A.;	An Exponential Method of Numerical Integrationof Ordinary Differential Equations	A formula for numerical integration is prepared,which involves an exponential term.  Thisformula is compared to two standard integration methods,and it is shown that for a large class of differentialequations, the exponential formula has superior stabilityproperties for large step sizes.  Thus thisformula may be used with a large step size to decrease thetotal computing time for a solution significantly,particularly in those engineering problems where high accuracy is not needed.
756	Danielson, W. A.;Briggs, B.;	A Computer Program for Editing the News	
757	Katz, J. H.;	Simulation of a Traffic Network	
758	Kahn, A. B.;	Skeletal Structure of PERT and CPA Computer Programs	An introduction to the inner mechanics ofPERT and CPA computer programs is provided.  Themajor components of these programs as well as theirpurposes and interrelationships are outlined.
759	Barnett, M. P.;	Continued Operation Notation for SymbolManipulation and Array Processing	A brief account is given of a notational devicethat is very useful in the formal representationof syntaxes, string relationships and string transformationprocedures and also of computing proceduresthat deal with arrays of functions of many variables.The device consists of the use of certain "continuedoperation" or "collective" symbols that are analogous to the summationsymbol (Sigma) and continued multiplicationsymbol (Pi) of conventional mathematics.
760	Pyle, I. C.;	Dialects of FORTRAN	
761	Kaupe Jr., A. F.;	A Note on the Dangling Else in ALGOL 60	Some revisions of ALGOL 60 are proposed, whichnot only eliminate certain ambiguous statementsbut also add some convenience to the language.  A discussionof the background of the problem and a sketchof a proof that the ambiguities have been removed is included.
762	DiForino, A. C.;	Some Remarks on the Syntax of Symbolic Programming Languages	
763	Eickel, J.;Bauer, F. L.;Paul, M.;Samelson, K.;	A Syntax Controlled Generator of Formal Language Processors	
764	Hennion, P. E.;	Reduction of a Matrix Containing Polynomial Elements (Algorithm 170)	
765	Bitterli, C. V.;	Orthogonal Polynomial Least Squares Surface Fit (Algorithm 164)	
766	Fletcher, W. E.;	XY-move Plotting (Algorithm 162)	
767	Thoro, D.;	Certification of Algorithm 161Combinatorial of M Things Taken One at a Time,Two at a Time, Up to N at a Time[M. L. Wolfson and H. V. Wright,Comm. ACM, Apr. 1963]	
768	Thoro, D.;	Certification of Algorithm 160Combinatorial of M Things Taken N at a Time [M. L. Wolfson and H. V. Wright,Comm. ACM, Apr. 1963]	
769	Bosworth, K. M.;	Algebra of Sets (Algorithm 156)	
770	Bosworth, K. M.;	Combination in Any Order (Algorithm 155)	
771	Bosworth, K. M.;	Combination in Lexicographical Order (Algorithm 154)	
772	Lefkowitz, B.;D'Esopo, D. A.;	GOMORY (Algorithm 153)	
773	George, R.;	Matrix Inversion (Algorithm 140)	
774	Naur, P.;	Jacobi (Algorithm 85)	
775	Hennion, P. E.;	Interpolation, Differentiation, and Integration (Algorithm 77)	
776	Randell, B.;Russell, L. J.;	Partition, Quicksort, and Find (Algorithm 62, 64, & 65)	
777	Naur, P.;	A Set of Test Matrices (Algorithm 52)	
778	George, R.;	Associated Legendre Functions of the First Kindfor Real or Imaginary Arguments (Algorithm 47)	
779	Domingo, C.;Rodriguez-Gil, F.;	CROUT II (Algorithm 43)	
780	Naur, P.;	Algorithm 42 INVERT, Alg.107 Gauss'sMethod, Alg.120 Inversion II, and gjr	
781	Bridges, J. F.;	Telescope 2 (Algorithm 38)	
782	Bridges, J. F.;	Telescope 1 (Algorithm 37)	
783	Boothroyd, J.;	Shellsort (Algorithm 201)	
784	George, R.;	Normal Random (Algorithm 200)	
785	Tantzen, R. G.;	Conversions Between Calendar Date And Julian day Number (Algorithm 199)	
786	McKeeman, W. M.;	Adaptive Integration and Multiple Integration (Algorithm 198)	
787	Wells, M.;	Matrix Division (Algorithm 197)	
788	Roman, R. D.;	Muller's Method for Finding Roots ofan Arbitrary Function (Algorithm 196)	
789	Thurnau, D. H.;	Bandsolve (Algorithm 195)	
790	Domingo, C.;	Zersol (Algorithm 194)	
791	Smith, D. D.;	Character Manipulation in 7090 Fortran	
792	Keyes, D. F.;Moore, D. P.;	Multiple-Precision Binary-To-Decimal IntegerConversion Using Only Addition And Subtraction	
793	Baecker, H. D.;	Mapped List Structures	
794	Bowlden, H. J.;	A List-Type Storage Technique for Alphameric Information	A method which is economic in terms of space andtime is proposed for the storage and manipulationof character strings of arbitrary length in a fixedword-length computer.  The method is illustratedin an application to Algol-type identifiers in an Algol-like block structure.
795	Ferguson, H. E.;Berner, E.;	Debugging Systems at the Source Language Level	
796	Lehman, M.;Netter, Z.;Eshed, R.;	SABRAG, A Time-Sharing Low-Cost Computer	The serial SABRAC computer designed and builtin the Scientific Department of the Israel defenseMinistry has a 5000-location magnetic drum, main store.To avoid a need to resort to optimum programmingtechniques and to increase its overall efficiency thecomputer has also been given a 224-word ferritecore store from which the program is obeyed.  Transfersbetween the core and drum stores and to and fromthe twin paper-tape input and output channels are allavailable autonomously (concurrently, time-shared).Multiplication and division orders are also autonomous,so that the machine may be executing up to threeorders simultaneously.  All functions naturally are interlocked.A number of other advanced orders andfacilities are also incorporated.In particular, an"Execute" order permits a temporary jump for upto four orders and a second modifier register permits doublemodification in general and relative addressingof subroutines in particular.  Thus the overall effectivespeed of the machine is muchhigher than itsbasic specification would lead one to expect and itsdesign indicates one way in which the concepts oftime sharing may be incorporated in "low-cost" computers.
797		American Standard Code for Information Interchange	
798	Scheff, B. H.;	A Catalogue Entry Retrieval System	
799	Conway, M. E.;	Design of a Separable Transition-Diagram Compiler*	A COBOL compiler design is presented which iscompact enough to permit rapid, one-pass compilationof a large subset of COBOL on a moderately large computer.Versions of the same compiler for smallermachines require only two working tapes plus a compilertape.  The methods given are largely applicableto the construction of ALGOL compilers.
800	McCarthy, J.;Corbato, F. J.;Daggett, M. M.;	The Linking Segment Subprogram Language and Linking Loader	
801	Synge, M. J.;	Least Squares Solution with Constraints (Algorithm 177)	
802	Rutishauser, H.;	SYMINV2 (Algorithm 150)	
803	Evans Jr., A.;	Syminv2 (Algorithm 150)	
804	Thacher Jr., H. C.;	Exponentiation of Series (Algorithms 134)	
805	Kondo, J.;	Newton Maehly (Algorithm 105)	
806	Moler, C.;	Remark on Certification of Matrix Inversion Procedures	
807	Fettis, H. E.;	Reversion of Series (Algorithm 193)	
808	Relph, A. P.;	Confluent Hypergeometric (Algorithm 192)	
809	Relph, A. P.;	Hypergeometric (Algorithm 191)	
810	Relph, A. P.;	Complex Power (Algorithm 190)	
811	Rodriguez Gil, F.;	Smoothing 2 (Algorithm 189)	
812	Rodriguez-Gil, F.;	Smoothing 1 (Algorithm 188)	
813	Vande Riet, R. P.;	Differences and Derivatives (Algorithm 187)	
814	Vande Riet, R. P.;	Complex Arithmetic (Algorithm 186)	
815	Colker, A.;	Normal Probability for Curve Fitting (Algorithm 185)	
816	Colker, A.;	Erlang Probability for Curve Fitting (Algorithm 184)	
817	Hopley, J.;	Nexcom (Algorithm 152)	
818	Hellerman, H.;Senzig, D. N.;	Realizing Boolean Connectives on The IBM 1620	
819	Eisman, S. H.;	Polynomial Evaluation Revised	
820	Gordon, R. M.;	Checking for Loops in Networks	
821	Juelich, O. C.;	Further Remarks on Sampling a Tape File-III	
822	Head, R. V.;	Real-Time Programming Specifications	Problems in the implementation of large real-timeapplications are treated, and suggested guidelinesfor both program and file specifications are developed.The problems delineated also occur in systemsprogramming.
823	Huskey, H. D.;Love, R.;Wirth, N.;	A Syntactic Description of BC NELLIAC	
824	Kliphardt, R. A.;	DESCRIPTRAN-Automated Descriptive Geometry*	Descriptive geometry consists of procedures originallydesigned to solve 3-space geometry problemsby graphical constructions and measurement instead ofby computation.  However, in addition to this itunifies and simplifies the approach to many such problems.When one can call subroutines that computenew coordinates that correspond to those obtainable fromthe graphical constructions, there is the three-wayadvantage of the approach of descriptive geometry, theaccuracy of computation and the speed of the digitalcomputer.  DESCRIPTRAN makes it possible to programmany problems in 3-space with a few statements; itconsists of 15 subroutines analogous to the procedures of descriptive geometry.
825	Rudloe, H.;Deutsch, M.;Marill, T.;	PIP: A Photo-Interpretive Programfor the Analysis of Spark-Chamber Data*	An operating computer program that processesphotographically recorded data is described.The input to the program consists of spark-chamber photographson which tracks of high-energy particlesare recorded.  The program automatically scans, measuresand performs the preliminary interpretationof these photographs.  In continuous operation a processingrate of 5,000 photographic frames per houris achieved.
826	Bennett, C. M.;	Remarks on Fortran Subroutines for Time Series Analysis	
827	Schick, T.;	Disk File Sorting	Sorting techniques using an IBM 1401 witha random access storage device are evaluated.
828	Cantrell, H. N.;	Incompressible flow Network Calculations	A general method for the calculation of flowsand pressures in fluid flow networks is presented.The method is applicable to computer use.
829	Greniewski, M,;Turski, W.;	The External Language KLIPA For the URAL-2 Digital computer	
830	Conway, R. W.;Maxwell, W. L.;	CORC-The Cornell Computing Language	
831	Thacher Jr., H. C.;	Real Error Function, ERF (Algorithm 123)	
832	Isoda, K.;	Curve Fitting with Constraints (Algorithm 74)	
833	Schwartz, H. R.;	Reduction of a Symmetric Bandmatrix to Triple Diagonal Form	
834	McKeeman, W. M.;Tesler, L.;	Nonrecursive Adaptive Integration (Algorithm 182)	
835	Thacher Jr., H. C.;	Complementary Error Function-Large X (Algorithm 181)	
836	Thacher Jr., H. C.;	Error Function-Large X (Algorithm 180)	
837	Ludwig, O. G.;	Incomplete Beta Ratio (Algorithm 179)	
838	Kaupe Jr., A. F.;	Direct Search (Algorithm 178)	
839	Synge, M. J.;	Least Squares Solution with Constraints (Algorithm 177)	
840	Arthurs, T. D.;	Least Squares Surface Fit (Algorithm 176)	
841	Shaw, C. J.;Trimble, T. N.;	Shuttle Sort (Algorithm 175)	
842	Gibb, A.;	A Posteriori Bounds on a Zero of a Polynomial (Algorithm 174)	
843	Hajek, O.;	Assign (Algorithm 173)	
844	Fedako,J. E.;	1410 Fortran Edit Feature	
845	Caffrey, J.;	Another Test Matrix for Determinants and Inverses	
846	Sanborn, T. G.;	Self-Inverse Conversion Table	
847	Wall, E.;Brown, R. M.;	A Penny-Matching Program	The logic of a penny-matching programwritten for the CSX-1 is described.
848	Bemer, R. W.;	A Note on Range Transformations for Square Root and Logarithm	There was the germ of an idea in two previouspapers [1,2] which no one seems to have pickedup in almost five years.  For certain functions it seemsdesirable to transform the argument to a shortrange symmetric about 10.1 will give examples of thisusage for the square root and logarithm functionfor both binary and decimal machines.
849	Sussenguth Jr., E. H.;	Use of Tree Structures for Processing Files	In data processing problems, files are frequentlyused which must both be searched and altered.Binary search techniques are efficient for searchinglarge files, but the associated file organizationis not readily adapted to the file alterations.  Conversely,a chained file allocation permits efficientalteration but cannot be searched efficiently. A fileorganized into a tree-like structure is discussed,and it is shown that such a file may both be searchedand altered with times proportional to slog(s)N,where N is the number of file items and s is a parameterof the tree.  It is also shown that optimizingthe value of s leads to a search time which is only 25per cent slower than the binary search.  The treeorganization employs two data chains and may be consideredto be a compromise between the organizationsfor the binary search and the chained file.  The relationof the tree organization to multidimensionalindexing and to the trie structure is also discussed.
850	Waks, D. J.;	Conversion, Reconversion and ComparisonTechniques In Variable-Length Sorting	The logic is described for converting highlyvariable input records into a format that canbe easily and efficiently processed by a sorting program.The internal record formats are discussedin relation to (1) their conversion from input formats,(2) their reconversion to output formats, and(3) comparison techniques between internal formats.
851	Goetz, M. A.;	Design and Characteristics of a Variable-LengthRecord Sort Using New Fixed-Length Record SortingTechniques	This paper describes the application of severalnew techniques for sorting fixed-length recordsto the problems of variable-length record sorting.The techniques have been implemented on a Sylvania9400 computer system with 32,000 fixed-length wordsof memory.  Specifically, the techniques sequencevariable-length records of unrestricted size, producelong initial strings of data, merge strings ofdata at the power of T-1, where T is the number of worktapes in a system, and do not restrict the volumeof input data.
852	Hall, M. H.;	A Method of Comparing the Time Requirements of Sorting Methods	
853	Paterson, J. B.;	The COBOL Sort Verb	
854	Hubbard, G. U.;	Some Characteristics of Sorting in ComputingSystems Using Random Access Storage Devices	The substantial differences in characteristicsof random access storage and tape devices dictatethat concepts and objectives of computer program designbe considered from the viewpoint of the externalfile medium used.  This is particularly true in thecase of sorting.  In a tape-oriented system, themajor sorting problem is that of minimizing merge timedespite the limited orders of merge possible.In contrast, sorting in a random access-oriented systemencourages the selection of the optimum orderof merge from many possible orders.  The latter problemis discussed in this paper, along with criteriadeveloped for determining the optimum order of merge accordingto the various properties of random accessstorage devices.  Attention is also given to the problemof key sorting versus record sorting and thepossibly serious disadvantage of key sorting on a random access system.
855	Goetz, M. A.;	Organization and Structure of Dataon Disk FileMemory Systems for Efficient Sorting and OtherData Processing Programs	An approach to the organization and structureof data on Bryant Disc File Memory Systems forsorting and performing other data processing functionsis presented.  The following areas are covered:characteristics of Bryant Disc File Systems on the BendixG-20 and RCA 301; two proposed "chaining" structuresfor data; and functions of a Disk File Executive Routine.The concepts for sorting and performing filemaintenance processing using the proposed structure andexecutive routine are discussed.  Additionally,it is shown that sorting can be accomplishedwithout the use of disk storage work areas.
856	Falkin, J.;Savastano Jr., S.;	Sorting with Large Volume, Random Access, Drum Storage	An approach to sorting records is describedusing random access drum memory.  The Sort programdescribed is designed to be a generalized, self-generatingsort, applicable to a variety of record statements.This description is divided into three parts.  Thefirst part presents the operating environment; thesecond defines the general solution; the third partdescribes the internal sort-merge technique.
857	Glore, J. B.;	Sorting Nonredundant Files-Techniques Used in the FACT Compiler	Some typical file structures, including somecalled "non-redundant," are examined,and themethods used in FACT to sort such files are discussed.
858	Cooke, W. S.;	A Tape File Merge Pattern Generator	A routine is presented which specifies thesequence of merge cycles to effect the merging ofsorted tape files.  The routine is designed to minimizeelapsed computer time by varying the power ofthe merge cycles, so as to use all the available tapedrives, with its characteristic of assigning onedrive to a single-reel file and two drives to each multiple-reel file.
859	French, N.C.;	Computer Planned Collates	
860	Goetz, M. A.;Toth, G. S.;	A Comparison Between the Polyphase and Oscillating Sort Techniques	A comparison between the Oscillating and PolyphaseSort techniques is developed for computersystems having from four to ten tape drives.  The basisfor the comparison is the total reading and writingrequired for various number of input stringsand tape drives for the two techniques.
861	Gilstad, R. L.;	Read-Backward Polyphase Sorting	Read-backward Polyphase sorting provides moreefficient use of the tapes available to a sortthan most other sorting techniques.  Backward Polyphaseproduces a continuous merging process from n-1tapes where n is the total number of tapes being used inthe sorting process.  Any of the available presortingtechniques may be used in conjunction with the Polyphasemerge sort provided that the presort has thecapability of producing both ascending and descendingstrings and distributing the strings on the varioustapes as required by the Polyphase Merge.
862	Malcolm Jr., W. D.;	String Distribution for the Polyphase Sort	
863	Manker, H. H.;	Multiphase Sorting	
864	Hibbard, T. N.;	An Empirical Study of Minimal Storage Sorting	
865	Goetz, M. A.;	Internal and Tape Sorting Using the Replacement-Selection Technique	A general technique for sequencing unsortedrecords is presented.  The technique is shown tobe applicable for the first stage of a generalized sortprogram (the formation of initial strings) aswell as for sorting records within a memory storage (aninternal sort).  It is shown that given N recordsin memory storage, records are sequenced using 1+log2N tests per record, that initial string lengthswill average 2N for random input records, and that reading,writing and processing can be accomplishedsimultaneously if the computer permits such overlap.
866	Gotlieb, C. C.;	Sorting on Computers	
867	Gluss, B.;	Least Squares Fitting of Planes to Surfaces Using Dynamic Programming	Dynamic programming has recently been usedby Stone, by Bellman and by Gluss to determine thecloset fit of broken line segments to a curve in aninterval under the constraint that the number ofsegments is fixed.  In the present paper successivemodels are developed to extend the method to thefitting of broken plane segments to surfaces z=g(x,y) definedover certain types of subareas of the (x,y)-space.The first model considers a rectangular area, withthe constraint that the plane segments are definedover a grid in the (x,y)-space.  It is then shown howthis model may be incorporated into an algorithmthat provides successive approximations to optimal fitsfor any type of closed area.  Finally, applicationsare briefly described.
868	Shoffner, M. G.;Brown, P. J.;	A Suggested Method of Making Fuller Use of Strings in ALGOL 60	
869	Thoro, D.;	Term of Magic Square (Algorithm 148)	
870	Barnecut, J. N. R.;	Term of Magic Square (Algorithm 148)	
871	Thacher Jr., H. C.;	PSIF (Algorithm 147)	
872	McKeeman, W. M.;	Adaptive Numerical Integration by Simpson's Rule (Algorithm 145)	
873	Poore Jr., J. H.;	Random (Algorithm 133)	
874	Hale, R. P.;	Chebyshev Curvefit (Algorithm 91)	
875	van De Riet, R. P.;	Incomplete Elliptic Integrals (Algorithm 73)	
876	Thacher, H. C.;	Complete Elliptic Integral (Algorithm 149)	
877	Thacher Jr., H. C.;	Complete Elliptic Integral of the First Kind (Algorithm 55)	
878	Hennion, P. E.;	Reduction of a Matrix Containing Polynomial Elements (Algorithm 170)	
879	Kahan, W.;Farkas, I.;	Newton Interpolation with Forward Divided Differences (Algorithm 169)	
880	Kahan, W.;Farkas, I.;	Newton Interpolation with Backward Divided Differences	
881	Kahan, W.;Farkas, I.;	Calculation of Confluent Divided Differences (Algorithm 167)	
882	Rodman, R. D.;	Monte Carlo (Algorithm 166)	
883	Thacher Jr., H. C.;	Complete Elliptic Integrals (Algorithm 165)	
884	Clark, R. E.;Kubik, R. N.;Phillips, L. P.;	Orthogonal Polynomial Least Squares Surface Fit (Algorithm 164)	
885	Fettis, H. E.;	Modified Hankel Function (Algorithm 163)	
886	Stockton, F. G.;	XY-move Plotting (Algorithm 162)	
887	Wright, H. V.;Wolfson, M. L.;	Combinatorial of M Things Taken One at a Time,Two at a Time, Up to N at a Time (Algorithm 161)	
888	Wolfson, M. L.;Wright, H. V.;	Algorithm 160 Combinatorial of M Things Taken N at A Time	
889		Official Actions and Responses to ALGOL As a Programming Language	
890	Fritz, W. B.;	Selected Definitions	A selection of the definitions prepared by theACM Standards Committee's Subcommittee on ProgrammingTerminology is presented for review by the ACM membership.
891	Whitley, V. W.;	Everyman's Information Retrieval System	The information retrieval problem whose solutionis presented here was posed by a technicallibrary with limited bubget and personnel.  The solution,however, is quite general and is applicableto many different types of retrieval problems.  Further,themethod of solution makes it possible formany groups who have previously dismissed an informationretrieval program as expensive and difficult(from a programming stand-point) to reconsider their position,for the present solution makes it possibleto install an information retrieval program in less thanthree months, and with relatively little equipment.
892	Climenson, W. D.;	RECOL-A Retrieval Command Language	An interrogation scheme is described for theretrieval and manipulation of data file records.The language of the interrogation scheme allows for selectingfile records with the are of logical conditionstatements, defining record classes, associating filerecords, editing printed output, and summarizingthe results of the above operations.  Some examples ofa typical file application and the more significantfeatures of a particular machine implementation are given.
893	Goldstein, M.;	Significance Arithmetic on a Digital Computer	The 7090 at NYU has been modified to includea "Significance Mode" of operation which is intendedto facilitate the identification of significant bits inthe results of floating-point arithmetic operations.The manner in which floating-point arithmetic is handledin this mode is discussed.  Several numericalexperiments using this mode are described and comparisonsare made with the ordinary "normalized mode."Examples include power series evaluation, linear equationssolution, determinant evaluation and matrixinversion.
894	Luther, H. A.;	An Iterative Factorization Technique for Polynomials	An iterative technique is displayed whereby factorsof arbitrary degree can be found for polynomialsin one variable.  Convergence is shown to occur alwaysif a certain Jacobian does not vanish and if theinitial approximation to a factor is near enough to anactual factor.  The process is simply programmed,and preliminary results indicate it to be well adaptedto use with digital computers.  For factors ofdegree two, the technique is similar to that of Bairstow,the present method being somewhat simpler.
895	Scheinok, P. A.;	A Computational Extension of the Variate Difference Method	Presented here is a computational extensionof the variate difference method as developed byG. Tintner [1].
896	Thompson, G. T.;	Characteristic Values and Vectors of Defective Matrices	
897	Brown, P. J.;	Note on the Proof of the Non-existenceof a Phrase Structure Grammar for ALGOL 60	
898	Laughlin, D. L.;	Random (Algorithm 133)	
899	Bosworth, K. M.;	Magic Square (Algorithm 117 & 118)	
900	Thacher Jr., H. C.;	Ancestor (Algorithm 79)	
901	Clark, E. S.;	Difference Expression Coefficients (Algorithm 79)	
902	Digby, D. W.;	Determinant (Algorithm 159)	
903	Fettis, H. E.;	Exponentiation of Series (Algorithm 134 )	
904	Mifsud, C. J.;	Fourier Series Approximation (Algorithm 157)	
905	Mifsud, C. J.;	Algebra of Sets (Algorithm 156)	
906	Mifsud, C. J.;	Combination in any Order (Algorithm 155)	
907	Mifsud, C. J.;	Combination in Lexicographical Order (Algorithm 154)	
908	LaSor, W. S.;	Test Matrix for Inversion	
909	Conway, M. E.;Speroni, J.;	Arithmetizing Declarations (Corrigendum)	
910	Mayer, R. J.;	Selective Instruction Trap for the 7090	
911	McIlroy, M. D.;	A Variant Method of File Searching	
912	Garber, M. J.;	Addressing an Array Yi in k-Dimensionsby Fortran for Analysis of Variance	
913	Halstead, M. H.;	Neliac	
914	Shaw, C. J.;	Jovial and Its Documentation	
915	Newell, A.;	Documentation of IPL-V	
916	Heising, W. P.;	FORTRAN	
917	Yngve, V. H.;	COMIT	
918	Cunningham, J. F.;	COBOL	
919	Naur, P.;	Documentation Problems: ALGOL 60	
920	Yngve, V. H.;Sammet, J. E.;	Toward Better Documentation of Programming Languages	
921	Meyer, N. A.;	Incomplete Elliptic Integrals (Algorithm 73)	
922	Thacher Jr., H. C.;	Multint (Algorithm 32)	
923	Bauer, F. L.;	Gomory (Algorithm 153)	
924	Hopley, J.;	Nexcom (Algorithm 152)	
925	Walter, H. F.;	Location of a Vector in a Lexicographically Ordered ListAlgorithm 151)	
926	Rutishauser, H.;	Syminv2 (Algorithm 150)	
927	White, W. C.;Shapiro, B.;Pratt, A. W.;	Linear Programming Applied to Ultraviolet Absorption Spectroscopy	
928	Lewis, T. S.;	Character Manipulation in FORTRAN	
929	Grems, M.;	Glossary Construction	
930	Yarbrough, L. D.;	Decimal-to-Binary Conversion of Short Fields	
931	Miller, J. C.;Maloney, C. J.;	Systematic Mistake Analysis of Digital Computer Programs	
932	Naur, P.;	Matrix Inversion by Gauss-Jordan Inversion II (Algorithm 120)	
933	Naur, P.;	Magic Squares (Algorithm 117 & 118)	
934	Naur, P.;	Gauss's Method (Algorithm 107)	
935	Naur, P.;	Calculating Primes by Means of GPS (Algorithm)	
936	Naur, P.;	A Set of Test Matrices (Algorithm 52)	
937	Naur, P.;	Inverse of a Finite Segment of the Hilbert Matrix (Algorithm 50)	
938	Naur, P.;	Invert (Algorithm 42)	
939	Behrenz, P. G.;	Gamma Function (Algorithm 31)	
940	Marsaglia, G.;	Generating Discrete Random Variables in a Computer	This note is concerned with details of how toinstruct a computer to choose one from many thingswith assigned probabilities.  The method uses a uniformvariable to direct the computer to a memory location;if this is done by a sequence of appropriately chosenconditional probabilities, efficient use of memoryspace and quite fast programs will result.
941	Cadwell, J. H.;	A Recursive Program for the General n-Dimensional Integral	A general program is outlined for n-dimensionalintegration with variable limits.  The programis of a recursive nature and uses Simpson's rule combinedwith repeated bisection to attain the requiredaccuracy.  It was developed in the Ferranti Mercury Autocode Scheme.
942	Healy, M. J. R.;Bogert, B. P.;	FORTRAN Subroutines for Time Series Analysis	The authors have recently been concerned in atime-series study that constituted a fairly typicalpiece of applied statistical research, involving extensivecomputations on a moderately large quantityof data.  Wehave found that the many different numericalprocesses that were required could be builtup almost completely from a small number of basic operations,and a set of FORTRAN subroutines has beenwritten to perform these.  The main purpose of thisnote is to describe these subroutines, but sincethe question of general statistical programs istopical [1], we include some general remarks.
943	Grems, M.;	Terms Frequently Combined in Problem Description	
944	Scidmore, A. K.;Weinberg, B. L.;	Storage and Search Properties of a Tree-Organized Memory System	A memory with list properties [1] may be usedto construct numeric, alphabetic or alphanumerictrees.  Such trees have information storage and retrievalproperties applicable to problems involvinglarge quantities of data or to problems where the quantity,word length and distribution of stored informationis not known a priori, or changes rapidly during the processing.The purpose of this paper is to examinethe storage and search properties of a tree-organizedstorage system assuming that a memory possessingcertain list properties is available.  Of prime interestis the application where a symbol table, dictionaryor similar file is to be stored and searched.
945	Conway, M. E.;Speroni, J.;	Arithmetizing Declarations: An Application to COBOL	
946	Utman, R. E.;	Suggestions on ALGOL 60 (ROME) Issues - A Report by the AmericanStandards Association Subcommittee X3.4.2	
947	Woodger, M.;	Supplement to the ALGOL 60 Report	
948	Healy, M. J. R.;	Note on the Use of Procedures	
949	Petrone, L.;Vandoni, C. E.;	Integer and Signed Constants in ALGOL	A few remarks are given on the relations betweensyntax and semantics in the programming languages.The aim is to point out that, if it is true that the grammarof a context-free language should be conceivednot only as a strings-generating device but also as amethod for expressing a meaning, then the grammarof ALGOL is open to some criticism.
950	Nievergelt, J.;	Parallel Methods for Integrating Ordinary Differential Equations	This paper is dedicated to the proposition that,in order to take full advantage for real-timecomputations of highly parallel computers as can beexpected to be available in the near future, muchof numerical analysis will have to be recast in a more"parallel" form.  By this is meant that serialalgorithms ought to be replaced by algorithm whichconsist of several subtasks which can be computedwithout knowledge of the results of the other subtasks.As an example, a method is proposed for "parallelizing"the numerical integration of an ordinary differentialequation, which process, by all standard methods,is entirely serial.
951	Gargantini, I.;Pomentale, T.;	Rational Chebyshev Approximationsto the Bessel Function Integrals Kis(x)	The second Remes algorithm is used to approximatethe integrals Kis by rational functions.The related coefficients for the approximations ofKi1, Ki2, Ki3 are given for different precisions.
952	Drath, D. G.;	Another use of FORTRAN II Chaining	
953	Baker, J. J.;	Scanning Text with a 1401	
954	Smillie, K. W.;Anstey, T. H.;	A Note on the Calculation of Probabilities in an F-Distribution	
955	Cline, R. E.;	A Class of Matrices to Test Inversion Procedures	
956	Newbery, A. C. R.;	A Family of Test Matrices	
957	Miller, J. A.;	Method for Partial Rewriting of Magnetic Tape	
958	Synge, M. J.;	A Case of too Much Precision	
959	Lubbert, W. F.;	Mark Sense and Port-A-Punch Programming Inputs	
960	Garber, M. J.;	Curve Fitting with Format Fortran	
961	Oster, C. A.;	Limited Bit Manipulation Using FORTRAN II	Techniques are developed for manipulating bitsusing only FORTRAN II.  These techniques allowindividual bits to be tested, certain fields to beshifted, and numbers coded in BCD to be convertedto Binary.
962	Cody, W. J.;	Double-Precision Squares Root for The CDC-3600	In January of 1960, the late Hans J. Maehly completeda summary of approximations to the elementaryfunctions for the CDC-1604 computer.  The approximationsand techniques suggested by Maehly are equallyapplicable to the second large computer in the CDC line,the 3600.  Unlike the 1604, however, the 3600has built-in double-precision floating-point arithmetic.The present work, largely inspired by the successesof Maehly and his associates, concerns the extension of oneof Maehly's ideas to a double-precision subroutinefor the 3600.
963	White, P.;	Relative Effects of Central Processor and Input-OutputSpeeds Upon Throughput on the Large Computer	Presented in this paper is a technique fordetermining the relative effects of the internalspeed of the computer and the speed of the input-outputunits upon the overall speed of the system. Equationsare derived which permit the determination of theseeffects from hardware usage measurements.
964	Wactlar, H. D.;Barnett, M. P.;	Mechanization of Tedious Algebra-thee Coefficients of Theoretical Chemistry	A table of formulas for certain integralsinvolving Legendre functions has been constructedmechanically by a program which performed algebraic operations.The formulas are all rational algebraicexpressions in a single variable and were constructedby a recurrence procedure.  They are of interestin molecular quantum chemistry.  Trivial coding techniqueswere used to write the relevant programs inFORTRAN.  The results were photo composed on a PhotonS-560 system, that was controlled by tapes whichwere punched directly from the computer output, soavoiding manual keyboarding, transcription errorsand keyboarded correction.
965	Bray, T. A.;	Greatest Common Divisor (Algorithm 237 [A1])	
966	Hasselblad, V.;Rulifson, J.;	Evaluation of Determinant (Algorithm 224 [F3])	
967	Clausen, I.;Hansson,L.;	Complementary Error Function (Algorithm 181 [S15])	
968	Halton, J. H.;Smith, G. B.;	Radical-Inverse Quasi-Random Point Sequence (Algorithm 247 [G5])	
969	Boothroyd, J.;	Graycode (Algorithm 246 [Z])	
970	Floyd, R. W.;	Treesort 3 (Algorithm [M1])	
971	Green, L. E. S.;	Time Sharing in a Traffic Control Program	The Toronto traffic signal control system consistsof a variety of logically distinct computerprograms, all competing for machine time.  To satisfythese demands, a time-sharing program has beenwritten whose purpose is to execute, in the order of apredefined priority, the various subprograms withinthe real-time system.  In this paper the more interestingaspects of the time-sharing program are outlined.
972	Heistand, R. E.;	An Executive System Implemented as a Finite-State Automaton	The 473L command and control system used bythe Air Force permits many operators to accesslarge data files through the use of a computer.  The man-machineinterface is satisfied by several communicationconsoles from which operators may enter queries andview replies.  A data link permits remote stationsto send messages, status reports and inventories directlyto the computer.  The information receivedover the on-line data link is used to update the data fileswhich are stored on disk.  The 473L programmingsystem is divided into an Executive Control Program andfive components with different processing priorities.These priorities permit the system to be most sensitiveto the console inputs and permit the operatorsat all the consoles to time share the central processor.The Executive Control Program provides forthe orderly transitions of control among the programmingsystem components. The major emphasis of thepaper is on the technique of using the definition of afinite-state automaton for organizing the ExecutiveControl Program.
973	Bellman, R.;Collier, C.;Kagiwada, H.;Kalaba, R.;Selvester, R.;	Estimation of Heart Parameters Using Skin Potential Measurements	A fundamental problem of vector cardiographyis the estimation of the state of the heart onthe basis of skin potential measurements.  A mathematicalmodel relating ventricular dipoles to surfacepotentials is sketched.  Then it is shown that the inverseproblem-that of determining electrical heartparameters on the basis of skin potential measurements-maybe viewed as a nonlinear multipoint boundaryvalue problem.  A feasible solution, employing quasilinearizationand high-speed digital computers, isgiven.
974	Maher, A. S.;	A Technique for Reading Gapless Tapes Makes ElectrocardiographAnalysis Feasible on the IBM 7090	To study arrhythmias and higher frequencycomponents of the electrocardiogram, long seriesof patient heart cycles must be examined before validcomparison of different heart beats can be made.A technique is presented for the automatic analysisof long series heart cycles via a digital computer.
975	Traub, J. F.;	The New Program of Work for the InternationalStandard Vocabulary in Computers and InformationProcessing	
976	Gray, M.;	Fresnel Integrals (Algorithm 213 [S20])	
977	Oppenheim, D. K.;	Conversions Between Calendar Date andJulian Day Number (Algorithm 199 [Z])	
978	Lotsch, H.;	Fresnel Integrals (Algorithm 244 [S20])	
979	Collens, D. S.;	Logarithm of a Complex Number (Algorithm 243 [B3])	
980	Maer, R. M.;Redlich, M. G.;	Multiple-Precision Arithmetic and the ExactCalculation of the 3-j, 6-j and 9-j Symbols	Described in this paper is a system of general-purposemultiple-precision fixed-point routinesand their use in subroutines which calculate exactlythe quantum-mechanical 3-j, 6-j and 9-j symbolsof large arguments.
981	Kelley, T. B.;	Rounding Problems in Commercial Data Processing	A common requirement in commercial data processingis that the sum of a set of numbers, roundedin a generally understood manner, be equal to the sumof the numbers rounded individually.  Four roundingprocedures are described to accomplish this.  The particularprocedure that is appropriate depends uponwhether the numbers being accumulated can vary in sign,whether their sum can vary in sign, and whetherthe last number being summed can be recognized as such prior to its rounding.
982	Faulk, R. D.;	An Inductive Approach to Language Translation	The possibility of natural language translationby means of fixed operations on example translationsis considered.  The conception of sentence translationwhich motivates the work is informally presented,and the measurement of physical similarity in pairs ofstrings is discussed, a notion which plays a centralrole in the proposed type of translator.  Experimentalevidence is presented in support of the premiseupon which this conception is based.
983		Take-up reels for One-Inch Perforated Tape forInformation Interchange (Proposed American Standard)	
984		Report on Input-Output Procedures for ALGOL 60 (IFIP)	
985		Report on SUBSET ALGOL 60 (IFIP)	
986		Proposed Amendment to Proposed American Standardon Specification for General-Purpose Paper Cardsfor Information Processing	
987		FORTRAN vs. Basic FORTRAN (A Programming Languagefor Information Processing on Automatic DataProcessing Systems)	
988	Heising, W. P.;	History and Summary of FORTRAN Standardization Development for the ASA	
989	Iverson, K. E.;	A Method of Syntax Specification	
990	Wilkes, M. V.;	Constraint-Type Statements in Programming Languages	A proposal is made for including in a programminglanguage statements which imply relationsbetween variables but which are not explicit assignmentstatements.  The compiler sets up a Newtonianiteration making use for the purpose of a routine for formal differentiation.
991	Bray, T. A.;	Gamma Function with Controller Accuracy (Algorithm 225 [S14])	
992	McCombs, V. K.;	Gamma Function (Algorithm 221 [S14])	
993	Priebe, K. B.;	Kutta Merson (Algorithm 218 [D2])	
994	Blair, C. R.;	Stringsort (Algorithm 207 [M1])	
995	Wallack, P.;	Steep1 (Algorithm 203 [E4])	
996	Sag, T. W.;	Permutations of a Set with Repetitions (Algorithm 242 [G6])	
997	Jacobs, M. C.;	Patent Protection of Computer Programs	
998	Hamlin, K. B.;	Computer Programs are Patentable	
999	Hauptman, G. A.;	Joint Inventorship of Computers	
1000	Kates, J. P.;	Computer Patent Disclosures	
1001	Lawlor, R. C.;	Copyright Aspects of Computer Usage	This paper is concerned with the question ofwhat constitutes infringement of a copyright ona book or other nondramatic literary work when the workis fed into a computer and is indexed, analyzed,partially reprinted, or otherwise utilized by the computerto produce eye-readable output.  The questionof copyrightability of programs and infringement of copyrightson programs is also discussed.  The paperis directed primarily to a discussion of the presentlaw.  Some aspects of the proposed new copyrightlaw are also included.  General recommendations aremade with respect to the proposed revision of thecopyright law.
1002	Whittlesey, J. R. B.;	A Rapid Method for Digital Filtering	Since much of the computer time spent in time-seriesanalysis is used for multiplications,a minimum multiplication method was devised for digitalfiltering, with the expectation that it wouldbe useful in the on line, real-time analysis of biologicaldata.  The filters are constructed from a successionof readily analyzable components in a manner that facilitatescascading.  The repertoire of frequencyresponse curves includes relatively good low-pass andband-pass designs.  Programs are available forimplementing both the synthesis of these filters, andtheir application on computers whose assemblersallow the definition of recursive macros.
1003	Davids, N.;Berger, R. L.;	A Computer Analysis Method For Thermal Diffusion in Biochemical Systems	In the thermal detection of rapid biochemicalreactions it is necessary to correct the temperaturedata for transient heat conduction losses in a cylindricalcalorimeter.  To handle the complexities arisingfrom varying thermal-relaxation times of concentric insulatinglayers, a computer program was developedwhich gives the temperature distribution of the systemas a function of radius and time.  This distributionis corrected at each step by a subroutine which calculatesthe instantaneous chemical state of thereaction, as well as the heat produced by this reaction.The program is based on a direct statement ofFourier's law of heat conduction and the chemical rateequation to provide a "bookkeeping law" to followthe reactants and the flow of heat packets, in such away that the computer continually stores the heatdistribution.  A computer analysis method is here regardedas one in which the physical laws of a processare used explicitly in the program. Usually this resultsin by passing much of the mathematical proceduresconventionally used.  The program was tested againstsome known exact solutions of the heat equationand gave identical results, and compared well with experimentaldata of a known biochemical reaction.The construction of computer programs based on the directstatement of the physical laws is a principleof general applicability which has been appliedto several other physical phenomena.
1004	Mills, K. W.;	Arctangent (Algorithm [B1])	
1005	Dorrer, E.;	Coordinates on an Ellipsoid (Algorithm 240 [Z])	
1006	Fitzwater, D. R.;	A Storage Allocation and Reference Structure	A method is proposed and discussed which allowsa subscripted-variable capability (in the FORTRANsense) to be added to AUTOCODER-Type assembly systems.
1007	Benett, R. K.;Neumann, H. D.;	Extension of Existing Compilers By Sophisticated Use of Macros	A description is presented of an applicationin which macros and string concatenation wereemployed to add a new facility to BELFAP.
1008	Schultz, C. K.;Brooks, A.;Schwartz, P.;	Scheduling Meetings with a Computer	Computer scheduling of papers as it was developedfor the 1960 meeting of the Federation ofAmerican Societies for Experimental Biology (FASEB) is described.The FASEB meeting is the largest scientificmeeting held in the United States each year.  The techniquedeveloped for FASEB can be applied to scheduleany meeting with parallel sessions.
1009	Weinberg, G. M.;	Solution of Combinatorial Problems Using GeneratingFunctions on a Variable-Field Computer	The utility of generating functions in solvingcombinatorial problems is discussed.  Particularimplementation results are presented and evaluated.
1010	Dennis, J. B.;	A Multiuser Computation Facility for Education and Research	Present-day computing facilities are limitedin their value for scientific research by inabilityto interact strongly with users.  The full power of aresearch computing instrument should be availableat many terminals that give each user the ability to generate,correct and operate any procedure he wishes,either simple or complex.  Implementation is describedfor a small-scale multiuser computer system thatpermits several users to work independently with themachine, and to obtain satisfactory response usingtypewriter communication.
1011	Collens, D. S.;	Logarithm of a Complex Number (Algorithm 48 [B3])	
1012	Greibach, S. A.;	Formal Parsing Systems	Automatic syntactic analysis has recently becomeimportant for both natural language data processingand syntax-directed compilers.  A formal parsing systemG = (V,u,T,R) consists of two finite disjointvocabularies, V and T, a many-many map, u, from V ontoT, and a recursive set R of strings in T calledsyntactic sentence classes.  Every program for automaticsyntactic analysis determines a formal parsingsystem.  A directed production analyzer (I,T,X,p) is anondeterministic pushdown-store machine with internalvocabulary I, input vocabulary T, and all productionsof p in the form:  (Z,a) -> aY1 ... Ym where  Z,Yi are elements of the set I and a is an element of theset T.  Every context-free language can be analyzedby a directed production analyzer.  The Kuno-Oettingermultiple-path syntactic analyzer for English isa concrete example of a directed production analyzerand of a working parsing algorithm.  The connectionbetween structures assigned by the analyzer and those ofa conventional phrase structure grammar is examinedin this paper.
1013	Broder, S.;	Final Examination Scheduling	A method for scheduling final examinationsto yield a minimal number of student conflicts isdescribed.  The "minimization" is achieved by repetitivelyevaluating a nonlinear set of equations.Imbeded in the process is a random or Monte Carlo selectionof assignments.  As in such heuristic techniques,the solution may not be optimum and many solutionsmay be found which yield locally minimal results.Computer programs are described and empirical results given.
1014	Weldon, R. J.;	Machine Controls for Analysis of Variance	A major problem in using the analysis of variance,as the number of factors increases, is theexponential rise in the number of interactions.  Eventhough the experimenter may not be interested inthese interactions it is impossible to ignore them inmost experimental designs because of the problemof getting error terms.  It is natural therefore to lookto the computer to handle the bulk of work involvedin computing the interactions.  A program deviceto get the computer to do this is described.
1015	Fraser, W.;Hart, J. F.;	Near-Minimax Polynomial Approximations and Partitioning of Intervals	A method of near-minimax polynomial approximationis described.  As a by-product, this methodprovides a formula for an estimate of the maximum errorassociated with a given degree of approximation.Using this formula, a partitioning algorithm is obtainedfor dividing a basic interval into subintervalsfor which approximations of equal degree give equal maximum error.
1016		Interchangcable Perforated Tape Variable BlockFormats for Positioning and Straight Cut (RS-273)and Contouring and Contouring/Positioning (RS-274) NumericallyControlled Machine Tools (Proposed AmericanStandards)	
1017	Bemer, R. W.;Booth, J.;	Comments on Bit-Sequencing of the ASCIIin Serial-by-Bit Data Transmission	
1018	Pike, M. C.;	Gauss (Algorithm 209 [S15])	
1019	Cavin, D. K.;	XY move Plotting (Algorithm 162 [J6])	
1020	McKeeman, W. M.;	Free Field Read (Algorithm 239 [I5])	
1021	Reeves, C. M.;	Conjugate Gradient Method (Algorithm 238 [F4])	
1022	Peck, J. E. L.;	Greatest Common Divisor (Algorithm 237 [A1])	
1023	Gautschi, W.;	Bessel Functions of the First Kind (Algorithm 236 [S17])	
1024	Waite, W. M.;	A Note on the Formation of Free List	
1025	Lietzke, M. P.;	A Method of Syntax-Checking ALGOL 60	A syntax checker was designed based on the syntaxof ALGOL as described in the ALGOL 60 Report[Communications of the ACM, May, 1960].  Since the definitionof the elements of the language is recursiveit seemed most desirable to design the syntax checkeras a set of mutually recursive processors tiedtogether by subroutines which perform certain bookkeepingfunctions.  Because of the recursive natureof the language and of the syntax checker the problemof recovery after an error required much attention.A method was devised which permits most programsto be checked completely despite errors.
1026	Stein, M. L.;	Divide-and-Correct Methods for Multiple Precision Division	A division problem is defined and notationto relate it to the problem of multiple precisionoperation in a digital computer is introduced.  A basicdivide-and-correct method for multiple precisiondivision is formulated and its known properties brieflyreviewed.  Of particular interest is the factthat the method produces at each step a set of preciselythree estimates for the desired result, oneof which is exact.
1027	Newhall, N. S.;	An Alternate Checksum Method	
1028	Wilkins, R. D.;	Investigation of a New Analytical Methodfor Numerical Derivative Evaluation	A recently proposed analytical approach tonumerical derivative evaluation is discussed.  Thetechnique is shown to be both accurate and easy toapply, though certain indicated modifications arerequired.  Its use should greatly facilitate the writingand debugging of programs requiring derivativesof highly complex functions.
1029	Wengert, R. E.;	A Simple Automatic Derivative Evaluation Program	A procedure for automatic evaluation of total/partialderivatives of arbitrary algebraic functionsis presented.  The technique permits computation ofnumerical values of derivatives without developinganalytical expressions for the derivatives.  The keyto the method is the decomposition of the givenfunction, by introduction of intermediate variables,into a series of elementary functional steps.  Alibrary of elementary function subroutines is providedfor the automatic evaluation and differentiationof these new variables.  The final step in this processproduces the desired function's derivative.The main feature of this approach is its simplicity.It can be used as a quick-reaction tool where thederivation of analytical derivatives is laborious andalso as a debugging tool for programs which containderivatives.
1030	Breuer,M. A.;	Techniques for the Simulation of Computer Logic	The simulation of a digital computer is anintegral part of most computer design automationsystems.  The evaluation of the Boolean functions whichcharacterize the computer being simulated constitutesone major portion of a simulation system.  Four generalprocedural classes for evaluating these functionsare defined.  Toward greatly increased efficiency of a simulationsystem, methods are presented for simultaneouslyevaluating many functions for one set of values of thevariables,and for evaluating simultaneously onefunction for many sets of values for the variables.
1031	Beyer, W. A.;	A Note on Starting the Newton-Raphson Method	Determination of a suitable initial estimatefor a root of an equation f(x) = 0 by means ofcomputing the roots of a sequence of related equations is described.
1032	Belzer, J.;Goffman, W.;	Theoretical Considerations in Information Retrieval Systems	Information storage and retrieval systems are composedof three major components: (a) identificationof information and tagging it for effective retrieval,(b) searching strategy, how to enter the fileto circumvent the scanning of nonrelevant material, and(c) file organization to make access to informationefficient.  For identification of information the papersuggests that a metalanguage (recently discussedin a paper by Goffman, Verhoeff and Belzer) associatedwith an object language be used.  For searchingstrategy, a linear model for an evaluation functionof relevancy is developed which rewards the systemfor retrieving relevant documents and not retrievingthe nonrelevant, and penalizes the system for theescaped relevant documents and false drops.  The inadequaciesof a linear model are indicated.  Two approachesto file organization are discussed.  One is self-organizationof the file based on its history and pastperformance, and the second is a self-generating subsetof the file with a high probability of beingrelevant.
1033	Hellerman, H.;	Experimental Personalized Array Translator System	A system designed for intimate man-machineinteraction in a general-purpose problem-solvingenvironment is experimentally operational.  The systemutilizers an array-oriented symbolic source languagecontaining powerful statement types.  These include numeric,Boolean, relational and selection operatorson operands which can be entire arrays.  The system alsopermits simple specification of test and argumentarrays in single statements.  The completely symbolicoperating system includes display and entry ofprogram and data.  Sequence control is aided by an interruptswitch which allows the user to interactwith the program during execution. In addition to normalstored program sequencing, the system providestrace options and the ability to enter any statementfor immediate execution.  Present implementationof the system is with an interpretive translator on an IBM 1620 computer.
1034	Gatto, O. T.;	Autosate	An automated data system analysis technique isdescribed. The technique is designed to alleviatesome of the principal problems that beset current analysis-largedata workloads, long span of time betweenproject inception and system operational date, the lackof explicit directions for conducting data systemanalysis and using the results, and the lack of a techniqueto control data system changes throughoutits lifetime. The analysis is geared to determining workload,relationships and storage characteristicsof documents in the information network automatically.
1035	Mancino. O. G.;	Characteristics of the FORTRAN CEP Language	The FORTRAN CEP languages differs from FORTRANII mainly because: (1) it extends the varietyof the modes for real quantities; (2) it allows suitablemixtures, in an input/output list or in an expression,of quantities that occur under different modes; (3)it makes it possible to address a greater numberof input/output equipment; and (4) it removes the restrictionson the complexity of the list of quantitiesto be transmitted between the magnetic core memoryand the drum or the magnetic tape units.
1036	Garwick, J. V.;	Remark on Further Generalization of ALGOL	
1037	Priebe, K. B.;	Reduction of a Matrix Containing PolynomialElements (Algorithm 170 [F3])	
1038	McKeeman, W. M.;	Crout with Equilibration and Iteration (Algorithm 135 [F4])	
1039	Thacher Jr., H. C.;	Summation of Fourier Series (Algorithm 128 [C6])	
1040	Thacher Jr., H. C.;	Romberg Integration(Algorithm 60 [D1])	
1041	Durstenfeld, R.;	Random Permutation (Algorithm 235 [G6])	
1042	Simoes Pereira, J. M. S.;	Poisson-Charlier Polynomials (Algorithm 234 [S23])	
1043	verSteeg, R. L.;	Talk-A High-Level Source Language DebuggingTechnique With Real-Time Data Extraction	TALK, meaning Take A Look, is a debugging techniquewhich aids substantially in debugging complexreal-time programming systems by interrupting the usersprogram at desired points to extract previouslyspecified data.  The extracted data is later edited,listing the associated data with its high-levelsource language identification.
1044	Kanner, H.;	An Automatic Loader for Subroutine Nests	A method for automatic loading of library subroutines,which can be adapted to operate in conjunctionwith any conventional two-pass assembler is described.The method is specifically designed to cope witha nested library structure.
1045	Peng, K. C.;	Programming Analysis of Variance by Sequencesof Operators and Isomorphic Mappings	A special operator calculus developed by Hartleyin 1956 together with a new mapping schemehas been found to be efficient in programming analysisof variance for multifactor experiments. The operatorcalculus and the mapping scheme are described in detail.
1046	Rosen, S.;	A Compiler-Building System Developed by Brooker and Morris	In a number of articles published during thepast two years, R. A. Brooker and D. Morris (joinedby J.S. Rohl in their most recent paper have presenteda very interesting programming system that theyhave developed for the Ferranti Atlas computer.  Thepresent paper describes some of the major featuresof their system. it expands on some points that the originalauthors cover briefly, and treats only verylightly some topics to which they devote considerable space.The purpose of this paper is purely expository.Except in some very small details, and in some comments,it does not intentionally depart from or addto the material published in the listed references.
1047	Ortega, J. M.;	Generation of Test Matrices by Similarity Transformations	A method for obtaining test matrices witha prescribed distribution of characteristic rootsis given.  The process consists of using particularlysimple similarity transformations to generate fullmatrices from canonical forms.  The matrices generatedalso have known characteristic vectors, inversesand determinants.
1048	Greenspan, D.;	Approximate Solution of Axially Symmetric Problems	A variety of physical problems in such diversefields as electrostatic  field theory, heatand ideal fluid flow, and stress concentration theoryreduce, under the assumption of axial symmetry,to the study of an elliptic partial differential equation.Dirichlet-type problems associated with thisequation are studied on regions whose boundaries includea nondegenerate portion of the x-axis and exceedinglyaccurate numerical methods are given for approximating solutions.
1049	Holt, J. F.;	Numerical Solution of Nonlinear Two-PointBoundary Problems by Finite Difference Methods	Solution of nonlinear two-point boundary-valueproblems is often an extremely difficult task.Quite apart from questions of reality and uniqueness,there is no established numerical technique forthis problem.  At present, shooting techniques are theeasiest method of attacking these problems.  Whenthese fail, the more difficult method of finite differencescan often be used to obtain a solution.This paper gives examples and discusses the finite differencemethod for non-linear two-point boundary-valueproblems.
1050	Brian, W. J.;	A Parts Breakdown Technique Using List Structures	List structured parts breakdown is proposedand discussed.  Implementation facts are presentedon operating program using these techniques.
1051	Comfort, W. T.;	Multiword List Items	The list concept as originally proposed byNewell, Simon and Shaw specified single computerwords as elements of a list.  This report describes theuse of two or more consecutive words as one element.Such use results in a considerable saving in both thespace required to hold a given amount of data,and in the execution time required to perform a givenprocess on the data.  Following a brief descriptionof standard list structures with single-word items, themultiword items are introduced.  Then variable-lengthitems are described, along with the corresponding space-utilizationproblems.  Finally, several examplesare given to illustrate the use of multiword lists. Thispaper attempts to draw together various recentpapers which have applied some of these concepts in differentways, and indicate how they relate to themore general problems.
1052	Wolfe, J. M.;	Reducing Truncation Errors by Programming	In accumulating a sum such as in a numericalintegration with a large number of intervals,the sum itself becomes much larger than the individualaddends.  This may produce a less accurate sumas the number of intervals is increased.  Separate variablescan be established as accumulators to holdpartial sums within various distinct intervals.  Thus,the extensive successive truncations are eliminated.
1053	Hassitt, A.;	Design and Implementation of a General-Purpose Input Routine	A general-purpose input routine is discussedand advocated for FORTRAN.  The philosophy ofsuch programs is examined and exemplified.
1054	Batson, A. P.;	Gauss-Seidel (Algorithm 220 )	
1055	Simoes Pereira, J. M. S.;	q-Bessel Functions In(t) (Algorithm 214)	
1056	Batty, M. A.;	Shellsort (Algorithm 201)	
1057	Hoffman, I. A.;	Critical Path Scheduling (Algorithm 40)	
1058	Olynyk, F.;	Simpson's Rule for Multiple Integration (Algorithm 233)	
1059	Williams, J. W. J.;	Heapsort (Algorithm 232)	
1060	Boothroyd, J.;	Matrix Inversion (Algorithm 231)	
1061	Boothroyd, J.;	Matrix Permutation (Algorithm 230)	
1062	Bailey, M. J.;Barnett, M. P.;Burleson, P. B.;	Symbol Manipulation in FORTRAN-SASP I Subroutines	A set of subroutines for use in FORTRAN aredescribed whose purpose is to synthesize outputstrings from (i) input strings which have been analyzedby the SHADOW general syntactic analysis subroutinereported earlier, and/or (ii) packed BCD strings formedin any way.  Function-type subroutines are includedfor intermediate manipulations, which are performedon the strings which are stored in an abbreviatedinternal representation.  The automatic way in whichan internal representation for each newly createdsubstring is stored sequentially in a block of commonstorage, and the manner in which a storage blockis dynamically allocated for that purpose, are discussed.
1063		One-Inch Perforated Paper Tape for InformationInterchange (Proposed American Standard)	
1064		Perforated Tape Code for InformationInterchange (Proposed American Standard)	
1065		Bit Sequencing of the American Standard Code forInformation Interchange (ASCII) in Serial-by-BitData Transmission (Proposed American Standard)	
1066	Aronofsky, J. S.;	Growing Applications of Linear Programming	Use of linear programming models has grown soextensively in recent years that the whole conceptfor organizing a computer code has undergone a radicalchange.  It no longer is adequate merely to reducea mathematical algorithm (i.e. the simplex method) toa computer code.  An advanced code must cope withsuch a variety of situations that the respective computersubprograms must be organized into an integratedsystem.  Emphasis in this paper is devoted to the underlyingprinciples upon which future linear programmingsystems must be based.  These viewpoints are influencedby the new demands that applications within thepetroleum industry are placing on such systems.  Someof the components of such a system are: translationof problem statement in terms of basic data to linearprogramming matrix coefficients, data transmissionfor direct computer entry, data file at the computer center,data processing and editing prior to solvingthe simplex algorithm, an efficient and reliable codefor solving the above-mentioned algorithm, andflexible means for summarizing the results.
1067	Perry, B.;Mendelsohn, M. L.;	Picture Generation With a Standard Line Printer	A method is described for producing gray-tonedpictures on a line printer by utilizing thedifferent degrees of blackness of standard print characters.Gray scales with 17, 32 and 64 levels havebeen devised.  Scanned images of blood cells are used to display the technique.
1068	Ackermann, A. F.;	A FORTRAN II Load-Time-Saver	
1069	Raichelson, E.;Collins, G.;	A Method for Comparing the Internal Operating Speeds of Computers	
1070	Warrington, J. A.;Norris, J. H.;	Expand, A System for Input Card Replication	
1071	Rosenberg, A. M.;	Computer-Usage Accounting for Generalized Time-Sharing Systems	The current development of general time-sharingsystems requires a revision of accounting proceduresfor computer usage. Since time-sharing system usersoperate concurrently, it is necessary to be moreprecise as to the amount of computer time and storagespace that a user actually utilizes.  The variouscost factors which should be considered for computer usageaccounting in generalized time-sharing systemsare discussed.
1072	Galler, B. A.;Fisher, M. J.;	An Improved Equivalence Algorithm	An algorithm for assigning storage on the basisof EQUIVALENCE, DIMENSION and COMMON declarationsis presented.  The algorithm is based on a tree structure,and has reduced computation time by 40 percentover a previously published algorithm by identifying allequivalence classes with one scan of the EQUIVALENCEdeclarations.  The method is applicable in any problemin which it is necessary to identify equivalenceclasses, given the element pairs defining the equivalence relation.
1073	MacLaren, M. D.;Marsaglia, G.;Bray, T. A.;	A Fast Procedure for Generating Exponential Random Variables	A very fast method for generating exponentialrandom variables in a digital computer is outlined.
1074	Schumaker, L.;	Shanks (Algorithm 215)	
1075	Juelich, O. C.;	Shuttlesort (Algorithm 175)	
1076	Wirth, N.;	Multiple Integration (Algorithm 146)	
1077	Naur, P.;	Chebyshev Curve Fit (Algorithm 91)	
1078	Morelock, J. C.;	Elementary Functions by Continued Fractions (Algorithm 229)	
1079	Simoes Pereira, J. M. S.;	Q-Bessel Functions (Algorithm 228)	
1080	Cyvin, S. J.;	Chebyshev Polynomial Coefficients (Algorithm 227)	
1081	Cyvin, S. J.;	Normal Distribution Function (Algorithm 226)	
1082	Cyvin, S. J.;Cyvin, B. N.;	Gamma Function with Controlled Accuracy (Algorithm 225)	
1083	Klerer, M.;May, J.;	An Experiment in a User-Oriented Computer System	A version of a software-hardware system forthe purpose of facilitating the programming andanalysis of well-formulated problems is described.  A modifiedFlexowriter is used to generate computer-acceptableinput when equations or computable requests are typedin much the same manner as they would appear inconventional mathematical texts.  The typing and languagerules are quite flexible and unrestrictive.While the compiler part is efficient, the system asa whole has much broader aspects as a tool for thestudy of problem solving and self-teaching systems.
1084	Shaw, C. J.;	On Declaring Arbitrarily Coded Alphabets	The inability of existing programming languagesto handle character strings from more thanone or two alphabets is mentioned and a scheme for declaringadditional alphabets is proposed.  The schemeprovides for: many-to-one encodings, right or leftjustification, collating sequences different fromnumeric sequence, variations in character size (numberof bits.) from alphabet to alphabet, and arbitrarysource-language character representation.
1085		Specification for General-Purpose Paper Cards forInformation Processing (Proposed American Standard)	
1086		A Proposal for Input-Output Conventions in ALGOL60-A Report of the Subcommittee on ALGOL ofthe ACM Programming Language Committee	
1087	Edmundson, H. P.;	Problems in Automatic Abstracting	A variety of problems concerning the designand operation of an automatic abstracting systemare discussed.  The purpose is to a general view ofseveral major problem areas.  No attempt is madeto discuss details or to indicate preferences among alternative solutions.
1088	Balistfy, J. L.;	Menu Planning by Computer	A computer code has been developed which plansmenus by finding minimum cost combinations ofmenu items such that the daily dietary, gastronomicand production requirements can be satisfied fora sequence of days.  A fast, special integer programmingalgorithm is described which approximates thetheoretical solution to the problem.  If necessary, anymenu can be changed on-line and then post-optimized.Up to 30 percent saving on food cost is possible.A FORTRAN program for the IBM 1410 is available onrequest.  A considerable amount of data processingmust precede the implementation of the system.
1089	Denison, A.;Popov, G.;	Designing a Computer Center	
1090	Gautschi, W.;	Incomplete Beta Function Ratios (Algorithm 222)	
1091	Thacher Jr., H. C.;	Hypergeometric and Confluent Hypergeometric (Algorithm 191 & 192)	
1092	Butler, H. S.;	Nonrecursive Adaptive Integration (Algorithm 182)	
1093	Rotenberg, L. J.;	Evaluation of Determinant (Algorithm 224)	
1094	Shimrat, M.;	Prime Twins (Algorithm 223)	
1095	Griebrok, M.;	Decimal Tables of Binary Coded Tables	
1096	Stevens, D.;Benson, B.;	On Avoiding Matrix Reversals Between 7090 FORTRAN II and 7090 FORTRAN IV	
1097	Gladwin, H. T.;	An Algorithm for Converting Integers from Base A to Base B	A little known, simple algorithm for integerconversion between number systems is presentedand proved.
1098	Bobrow, D. G.;Raphael, B.;	A Comparison of List-Processing Computer Languages(Including a Detailed Comparison of COMIT,IPL-V, LISP 1.5, and SLIP)	A detailed comparison is presented of COMIT,IPL-V, LISP 1.5 and SLIP - four well-known computerprogramming languages which, among them, exhibit all theprincipal characteristics of existing list-processinglanguages.  Important common features of list-processinglanguages are reviewed: forms of data structureswhich are manipulated, necessity for dynamic allocationof storage, use of pushdown stores, and use ofrecursive operations.  Principal differences between thefour languages under consideration are detailed:representations of data, both by the programmer and withinthe machine; methods for storage allocation;programming formalisms and special processes available,including arithmetic facilities; and usabilityin terms of availability, documentation, learning aidsand debugging facilities.  A rough comparisonshows that all the languages discussed have approximatelythe same speed.  Finally, the authors givesome heuristics to aid in the selection of one of theselanguages for use in particular problem applications,concluding that no one of the languages considered isdistinctly superior in all possible list-processingapplications.
1099	Sterling, T. D.;Lichstein, M.;Scarpino, F.;Stuebing, D.;	Professional Computer Work for the Blind	Developments in computer technology have openednew professional opportunities for the intelligentblind.  Since there are few if any occupations in which theblind can participate without serious disadvantage,the opportunities offered them to gain entrance intovarious occupations through computer use includingthat of programmer, is important for future rehabilitationplanning. Also of immediate interest is thefact that the blind may be especially suited for programmingwork.  Because of intense training in andconstant experience with locating objects in the unseenenvironment and also because of superbly trainedmemory, the blind brings to the work of programming skillswhich the sighted has had little need to acquire.These qualifications should result in fewer debuggingproblems and make the blind a valuable additionto any systems group.  Before the blind could become aserious professional, a number of aids and techniqueshad to be developed that can mediate between machinesand programmer.  This paper describes the techniquesand aids which were designed by the staff of the MedicalComputing Center of the University of CincinnatiCollege of Medicine.
1100	Atchison, W. F.;Hamblen, J. W.;	Status of Computer Sciences Curricula in Colleges and Universities	
1101	Muller, D. E.;	The Place of Logical Design and SwitchingTheory In The Computer Curriculum	
1102	Gorn, S.;	Mechanical Languages: A Course Specification	
1103	Korfhage, R. R.;	Logic for the Computer Sciences	
1104	Forsythe, G. E.;	An Undergraduate Curriculum in Numerical Analysis	
1105	Arden, B. W.;	On Introducing Digital Computing	
1106	Perlis, A. J.;	Programming of Digital Computers	
1107	Keenan, T. A.;	Computers and Education	
1108	Wilcox, H. J.;	Digital Data Processor for Tracking the Partially Illuminated Moon*	A study of lunar tracking techniques and fabricationof a breadboard to assess the feasibilityof the best technique selected was conducted to definea tracking system for observation of the sight lineto the center of a partially illuminated moon.  Thedata processing portion of the system is presentedin detail and then described in general are the operationof the tracker head assembly for data readout,the operation of the entire system and the effect dataprocessing considerations have on the design ofthe tracker system.  The system basically consists ofan optical sensor, digital computer and trackerdrive mechanism.  The three system units, connectedin cascade, comprise the control loop.  For thisapplication, an optical telescope with a radial mechanicalscanning mechanism was used that read outlunar sight line measurement information.  This informationis sequentially read into a special purposedigital computer that extracts the measurements andcomputes the error signals that drive the trackerto the appropriate attitude.
1109	Thacher Jr., H. C.;	Conversion of a Power to a Series of Chebyshev Polynomials*	Even slowly convergent power series can berearranged as series in Chebyshev polynomials ifappropriate sequence transformations are used in evaluatingthe coefficients.  The method is illustratedby computing the coefficients for the expansionof the logarithm and dilogarithm.
1110	Forrington, C. V. D.;	A Fourier Series Method for the Numerical Solutionof a Class of Parabolic Partial DifferentialEquations*	A Fourier series method is described which, whenapplied to a certain class of parabolic partialdifferential equations, reduces the problem to a systemof ordinary differential equations.  An applicationis given for which the method shows a considerable advantageover conventional finite difference methods.
1111	Luther, H. A.;	A Class of Iterative Techniques For the Factorization of Polynomials*	A method of iteration is developed in termsof a function of somewhat arbitrary character.Sufficient conditions are given for convergence ofthe process, yielding factors of arbitrary degreefor polynomials in one variable.  Both Lin's methodand Newton's method occur as special cases.
1112	Damerau, F. J.;	A Technique for Computer Detection and Correction of Spelling Errors*	The method described assumes that a wordwhich cannot be found in a dictionary has at mostone error, which might be a wrong, missing or extra letteror a single transposition.  The unidentifiedinput word is compared to the dictionary again, testingeach time to see if the words match-assumingone of these errors occurred.  During a test run on garbledtext, correct identifications were made forover 95 percent of these error types.
1113	Zajac, E. E.;	Computer-Made Perspective Movies as a Scientific and Communication Tool*	It is easy to program the basic transformationrequired for a perspective drawing.  This factplus the advent of high speed microfilm printers suchas the General Dynamics Electronics S-C 4020 makespossible perspective movies as the direct output froma computer.  The programming of such a movie isbriefly described for studying the angular motions ofa satellite containing an attitude control system.In the movie, a domino-shaped box represents the satelliteand a sphere with circles of latitude andlongitude represents the earth.  The cost was approximatelythree to eight minutes of IBM 7090 time perone minute of movie.
1114	Schwartz, E. S.;Kallick, B.;	Generating a Canonical Prefix Encoding*	Computer programs for generating a minimum-redundancyexhaustive prefix encoding are described.One program generates a Huffman frequency tree, anotherdetermines the structure functions of an encoding,and a third program assigns codes.
1115	Clampett Jr., H. A.;	Randomized Binary Searching With Tree Structure	A more efficient method of using tree structuresis proposed, which utilizers both plus andminus branches in the search path.  Very significantgains result when the search key includes alphabeticcharacters.
1116	Csima, J.;Gotlieb, C. C.;	Tests on a Computer Method for Constructing School Timetables*	A previously proposed computer method for constructingtimetables, based on an iteration involvingBoolean matrices, is described.  In limited tests themethod has successfully produced timetables onevery trial.  References are given which relate thetimetable problem to theorems on matrices of zerosand ones, and to theorems on bipartite graphs.  Someproblems of applying the method to constructingtimetables in real situations are noted.
1117	McAlester, R. L.;	Polyphase Sorting With Overlapped Rewind*	A variation of the polyphase merge techniqueof sorting is described which permits one tapeat a time to be rewound while the merge is continued onthe remaining tapes.  The result is the overlappingof a major portion of the rewind time.  The techniqueshould be considered whenever a sort is writtento operate on five or more tapes that cannot be read backwards.The savings of the overlap method appearto increase as the number of available tapes is increased.
1118	MacGowan, R. A.;	FORTRAN Subroutines for Time Series Data Reduction*	
1119		An Open Letter to X3.4.3 (FORTRAN Standards -- American Association)	
1120		"ALCOR Group Representations of ALGOL Symbols,"Comm. ACM 6 (1963), 597-599. (Corrigenda)	
1121	Barnett, M. P.;Gerard, J. M.;Sambles, A. W.;	Comments on "A Continued Operation Notation"*	This note is intended to clarify and correctseveral points in a recent paper describing somenotations for symbol manipulation by M.P. Barnett [Comm. ACM 6(August, 1963)].
1122	Anderson, J. P.;	A Note on Some Compiling Algorithms	Two compiling generators for arithmetic expressionsare discussed: one presently in use inan experimental compiler, and an improvementsuggested by K. Speierman of Burroughs.
1123	Gladfelter, G. W.;	Gauss (Algorithm 209)	
1124	Wells, M.;	Matrix Division (Algorithm 197)	
1125	Naur, P.;	Syminv2 (Algorithm 150)	
1126	Barton, S. P.;Wagner, J. F.;	ERF (Algorithm 123)	
1127	Naur, P.;	Tridiagonal Matrix (Algorithm 122)	
1128	Rotenberg, L. J.;	Evaluation of Determinant (Algorithm 41)	
1129	Gautschi, W.;	Incomplete Beta Function Ratios (Algorithm 222)	
1130	Gautschi, W.;	Gamma Function (Althm 221)	
1131	Ross, D. T.;	On Context and Ambiguity in Parsing*	
1132	Perlis, A. J.;Iturriaga, R.;	An Extension to ALGOL for Manipulating Formulae*	
1133	Brooker, R. A.;	A Programming Package for Some General Modes of Arithmetic*	
1134	Allard, R. W.;Wolf, K. A.;Zemlin, R. A.;	Some Effects of the 6600 Computer on Language Structures*	The problem of compiling efficient 6600 codesprompted the development of an intermediate languagereflecting the structure of the machine, that is moreeasily manipulated in improving object programefficiency.  The subject of this paper is the intermediatelanguage and methods of manipulating it.Compilations of a series of arithmetic statements arediscussed.  It is assumed that all functions andexponentials have been removed from these statements,and replaced by simple variables.  For purposesof simplicity the treatment of subscripts is ignored.A simplified 6600 structure is presented to illustratethe compiling method.  Several assumptions are madefor purposes of simplification, although there arecases in which the assumptions are violated in the actual machine.
1135	Lombardi, L. A.;	A General Business-Oriented Language Based on Decision Expressions*	The structure of a digital compute programminglanguage which covers a wide class of businessand file processing applications is presented.  Sucha structure, based on identifying and incorporatinginto a compiler the aspects common to all processesof such class, permits writing extremely compactprograms, even for comparatively complex applications,in terms of tables of control expressions whichexpress only information characteristic of the particularapplication.  Furthermore,local changes ofa process (e.g. changes affecting only one of the outputfiles involved) can be effected by local modificationsin the program (e.g. modification of only one entry of thetables).  This structure also allows for inexpensivepreparation of loading-speed compilers which translate thesource programs into efficient machine codes.The approach adopted here departs from conventional mechanicallanguage design philosophies.  It stressesthe structural analysis of the class of processes to be representedin the languages, as opposed to emphasizingformal (i.e., contents-independent) syntactical definitions.It relies exclusively on nonproceduralrepresentation of process as sets (tables) of relationsbetween data and results (there are no controlstatements such as GO TO, etc.), instead of using proceduredescriptions (which are one-to-one translationsof flowcharts).  Here an invariant pattern of procedureis identified as characteristic of the classof all batch file processes.  This new philosophy hasthe potential to overcome well-known deficienciesof other business-oriented languages and fully meetsthe requirements set by CODASYL for such languages,including machine-independence.
1136	Steel Jr., T. B.;	Beginnings of a Theory of Information Handling*	
1137	Perlis, A. J.;	A Format Language*	
1138	Iverson, K. E.;	Formalism in Programming Languages*	
1139	Leavenworth, B. M.;	FORTRAN IV as a Syntax Language*	
1140	Irons, E. T.;	"Structural Connections" in Formal Language*	
1141	Floyd, R. W.;	Bounded Context Syntactic Analysis	
1142	Rose, G. F.;	An Extension of ALGOL-Like Languages	
1143	Worsley, B. H.;	Analysis of Decay-Type Data*	A comparative study has been made of a varietyof numerical techniques for fitting experimentaldata of the decay type by forms involving the sums ofexponentials.  Statistical errors of the fittedparameters are also calculated.  These methods have beenapplied to artificially-generated sets of dataas well as to the results of experiments with radioactivetracers on both human and animal subjects.Results show that the values of the fitted parametersare very sensitive to variations in the fittingprocedure.  Therefore great care very sensitive to variationsin the fitting procedure.  Therefore greatcare must be exercised in identifying such values withphysical constants.  Although the values of functionsderived from these fitted parameters which can definitelybe associated with physical entities are generallymore stable under variations in the fitting techniques,error bounds can be so large that no great confidencecan be placed even in them.  It would therefore appearbest to select a uniform technique both for runningthe experiments and for analyzing the data, and thento consider as significant only relative resultsbetween one subject and the next.
1144	Robbins, D.;Taylor, W. E.;	Digital Computer Determination of Alpha Source Activity	A technique is described for determining theactivity and homogeneity of an alpha source.It is believed that the technique, using a digital computer,has many uses and applications in the fieldof nuclear physics. The technique involves computermanipulation of the digital image of the nuclearsource.  Experimental details are given.
1145	Unger, S. H.;	GIT-A Heuristic Program for Testing Pairsof Directed Line Graphs for Isomorphism*	Given a pair of directed line graphs, the problemof ascertaining whether or not they are isomorphicis one for which no efficient algorithmic solution is known.Since a straightforward enumerative algorithmmight require 40 years of running time on a very highspeed computer in order to compare two 15-nodegraphs, a more sophisticated approach seems calledfor.  The situation is similar to that prevailingin areas such as game-playing and theorem-proving, wherepractical algorithms are unknown (for the interestingcases), but where various practical though only partiallysuccessful techniques are available.  Git-GraphIsomorphism Tester-incorporates a variety of processesthat attempt to narrow down the search for anisomorphism, or to demonstrate that none exists.  No onescheme is relied upon exclusively for a solution,and the program is designed to avoid excessive computationalong fruitless lines.  GIT has been writtenin the COMIT language and successfully tested on the IBM 7090.
1146	Thacher Jr., H. C.;	An Efficient Composite Formula for Multidimensional Quadrature	A (2s+1)-point second-degree quadrature formulafor integration over an s-dimensional hyper-rectangleis presented.  All but one of the points lie on thesurface with weights of opposite sign attached topoints on opposite faces.  When a large volume is subdividedinto congruent rectangular subdivisions,only one point is required in each interior subdivisionto achieve second-degree accuracy.
1147	Day, J. T.;Collins II, G. W.;	On the Numerical Solution of Boundary Value Problemsfor Linear Ordinary Differential Equations*	A numerical method is presented for the solutionof boundary value problems involving linearordinary differential equations.  The method describedis noniterative and makes use of any one-stepnumerical integration scheme to reduce the problem fromone of boundary values to one of initial values.Comments are made concerning some numerical resultsof applying the method to a specific problem.  Inaddition an extension of the algorithm describedto more general problems is discussed.
1148	Miller, R. H.;	An Example in "Significant-Digit" Arithmetic*	Different methods of handling the summing processfor the geometric series are shown to giveresults indicating widely differing significances when carriedout in a machine incorporating "significant-digit"arithmetic.
1149	Garwick, J. V.;	GARGOYLE , A Language for Compiler Writing*	
1150	Kahan, W.;Leppik, J. J.;	A Fortran Post-Mortem Procedure	
1151	Comstock, D. R.;	A Note on Multiplying Boolean Matrices II	
1152	Gregory, R. T.;Raney, J. L.;	Floating-Point Arithmetic with 84-Bit Numbers	A classic and straightforward technique ispresented which is not limited to the size or typeof number representation used or multiple precision arithmetic.
1153	Marsaglia, G.;MacLaren, M. D.;Bray, T. A.;	A Fast Procedure for Generating Normal Random Variables*	A technique for generating normally distributedrandom numbers is described.  It is fasterthan those currently in general use and is readilyapplicable to both binary and decimal computers.
1154	Fischer, P. C.;	Multi-Tape and Infinite-State Automata -- A Survey	A survey of machines which are more powerfulthan finite automata and less powerful than generalTuring machines is presented.  It is felt that the machinesin this category are as closely related todigital computers as either the finite automata or theunrestricted Turing machines.  Intermediate machinescan be created by adjoining on infinite-state memoryto a finite-state machine and then performing anyor all of the following: (1) restrict the manner inwhich the unbounded portion of the memory can beaccessed, (2) bound the number of steps allowed for acomputation by some increasing recursive functionof the length of the input, (3) restrict the total amountof memory available in the same manner.  Examplesfrom all three classes and their properties are discussed.
1155	Slagle, J. R.;	Experiments with a Deductive Question-Answering Program	As an investigation in artificial intelligence,computer experiments on deductive question-answeringwere run with a LISP program called DEDUCOM, an acronymfor DEDUctive COMmunicator. When given 68 facts,DEDUCOM answered 10 questions answerable from the facts.A fact tells DEDUCOM either some specific informationor a method of answering a general kind of question.Some conclusions drawn in the article are: (1)DEDUCOM can answer a wide variety of questions.  (2)A human can increase the deductive power of DEDUCOMby telling it more facts.  (3) DEDUCOM can write verysimple programs (it is hoped that this abilityis the forerunner of an ability to self-program, whichis a way to learn).  (4)DEDUCOM's search procedureat present has two bad defects: some questions answerablefrom the given facts cannot be answered andsome other answerable questions can be answered only ifthe relevant facts are given in the "right" order.(6) At present, DEDUCOM's method of making logical deductionsin predicate calculus has two bad defects:some facts have to be changed to logically equivalent onesbefore being given to DEDUCOM, and some redundantfacts have to be given to DEDUCOM.
1156	Reilly, G. A.;	Hankel Function (Algorithm 124 [S17])	
1157	MacLaren, M. D.;	Procedure for the Normal Distribution Functions (Algorithm 272 [S15])	
1158	Anderson, J. P.;	Program Structures for Parallel Processing	Constructs for organizing and explicating parallelprogram segments are discussed as extensionsto ALGOL 60.  The constructs serve as meta-commands andare motivated by equipment having multiprocessingcapability.
1159	Halpern, M. I.;	Machine Independence: Its Technology and Economics	A survey is offered of techniques for transferringprograms, and especially compilers, fromone computer to another.  Of the methods examined, the"bootstrap" technique is singled out for detaileddiscussion, with emphasis on its economics. The considerationsthat determine the applicability of bootstrappingin any specific case are discussed, and an attemptis made to assign appropriate qualitative weightsto them.  Finally, reasons are given for believing that themachine-independence problem is being substantiallydiminished by current trends in computer design, andthat it is this process of convergence in hardwaredesign rather than any foreseeable software developmentsthat will lead to its satisfactory resolution.
1160	Wilson, D. M.;Moss, D. J.;	CAT: A 7090-3600 Computer-Aided Translation	A semi-automatic translation system has been implementedwhich converts 7090 FAP language programsinto 3600 assembly language.  The input to the systemis a FAP program deck which has been speciallyprepared for translation by the user.  The output consistsof the translated COMPASS language programtogether with a comprehensive diagnostic listing which theuser must analyze in order to verify any questionableareas of the translation.  The translation processorconsists of three distinct phases: an assembly ofthe FAP program, a comprehensive analysis of the assembledcode with particular regard to the actionsof instructions upon other instructions and upon data,and finally the output pass which generates theCOMPASS program in the form of macro instructions.
1161	McCormack, M. A.;Schansman, T. T.;Womack, K. K.;	1401 Compatibility Feature on the IBM System/360 Model 30	The "second generation" of stored-program computers,of which IBM 1400 series was a part, broughtEDP into the mass market for the first time on a largescale.  As this era unfolded, rapid changes intechnology led to rapid obsolescence of data processingequipment.  Program written for a particularsystem required tedious conversion as incompatible newmachines came into use.  The IBM System/360 hasbeen designed with the conversion problem specificallyin mind.  One of the conversion aids availableon the Model 30 is the 1401 compatibility feature.  Thisfeature, in conjunction with other aids, permitsa smooth and inexpensive transition to optimum use of the new system.
1162	Graham, M. L.;Ingerman, P. Z.;	An Assembly Language for Reprogramming	Complete reprogramming of compiler language programsis seldom necessary.  It is assembly languageprograms which present the greatest difficulty.  Assemblylanguages generally provide a one-for-one translationfrom a symbolic to a numeric version of a program, thatis, from assembly language to machine language.The meta-language presented here can be used to specifythe mapping of any language which conforms toa canonical list form into an arbitrary stream of bits.This bit stream may be treated as a machinelanguage program, a character stream, or whatever elsethe user might desire.  Thus, this meta-languagecan be used to map from one assembly language into anotheror from the assembly language for one machineinto the machine language of another.
1163	Olsen, T. M.;	Philco/IBM Translation at Problem-Oriented, Symbolic and Binary Levels	A translation system has been developed toeliminate most of the effort formerly required toreprogram Philco 2000 series codes for IBM 7094 operation.Experience with this system is limited buthighly successful encouraging application of thetechniques to other source and object languages.
1164	Tucker, S. G.;	Emulation of Large Systems	The conversion problem and a new techniquecalled emulation are discussed.  The technique ofemulation is developed and includes sections on both theCentral Processing Unit (CPU) and the Input/Outputunit (I/O).  This general treatment is followed by threesections that describe in greater detail theimplementation of compatibility features using the emulationtechniques for the IBM 7074, 7080 and 7090systems on IBM System/360.
1165	Benjamin, R. I.;	The Spectra 70/45 Emulator for the RCA 301	The RCA 301 Emulator System is supplied withthe Spectra 70/45 as a reprogramming aid.  Itallows an RCA 301 object program to be run on the Spectra70/45 without necessitating changes in theRCA 301 object code.  Execution rates are considerablybetter than traditional simulation.  The Emulatorprovides an increase in throughput capacity for the301 user on the Spectra 70/45.  The Emulator makesuse of both hardware micro-program routines andsoftware routines to accomplish its function.
1166	Dellert Jr., G. T.;	A Use of Macros in Translation of SymbolicAssembly Language of One Computer to Another	A set of macro-operations has been preparedto assist in translating IBM 7090 symbolic assemblylanguage programs to IBM 7040 machine language programs.This set, inserted at the beginning of the7090 symbolic deck, treats incompatible instruction mnemonicsas macro-instructions to produce equivalent7040 instruction sets.  Incompatible instructions arecategorized into basic operational classes whichcan be expressed by a single basic skeleton.  Several levelsof macro calls are required to supply argumentsto the basic skeleton for each particular instruction.Modification at execution time of the addressor tag of an incompatible instruction requires incorporationof an address-tag equivalent.  I/O is handledby generating calls to I/O simulation subroutines.
1167	Gaines, R. S.;	On the Translation of Machine Language Programs	Automatic translation of machine languageprograms is becoming a highly desirable goal withthe advent of new large-scale computers.  The pitfalls thatmake it difficult to achieve completely automatictranslations are analyzed, and it is shown that these areprimarily of a semantic nature.  A semi-automaticprocedure for resolving semantic problems is suggested.
1168	Fredericks, D. S.;Warburtin, C. R.;	Across Machine Lines in COBOL	The production of a large, file-maintenance-and-retrievalprogram system written in COBOL isdescribed.  The COBOL language was used specifically toenable the system to operate on three IBM computers.
1169	Pomentale, T.;	An Algorithm for Minimizing Backboard Wiring Functions	A partially exhaustive algorithm is presentedfor solving the following problem arising fromautomatic layout of a computer.  Given an ordered setE1, E2,..., EN of N computer components, for eachpermutation of the elements E1, E2.., EN, there is attacheda value of an integer function F.  The algorithmfinds a local minimum of F by evaluating the set {DeltaF} of the increments corresponding to a certainset of exchanges of two elements.Then the exchangecorresponding to the least negative increment of{Delta F} is performed.  The process is iterated and stoppedwhen the set of the increments is a positiveor empty set, which, it is proved, corresponds to aminimum.  The procedure is similar to the DownhillMethod for finding the minimum of a real function F(P),and can be applied to other placement problems.Experimental results are presented with backboards formedby many elements and different initial placements.
1170	McConlogue, K.;Simmons, R. F.;	Analyzing English Syntax with a Pattern-Learning Parser	A dependency analysis system based on patternrecognition and learning logic was developedto infer word classes and rules of syntactic combinationfrom experience with text which had been analyzed.The characteristics used to form word classes are thedepth in the dependency tree of each word, thedirection of its governor and the same features foreach of its immediate neighbors. Syntactic rulesof combination show the relation of a word to its governorin the depth pattern of the sentence.  Thesystem was tested on 400 elementary basic English sentencesincluding 300 used earlier by Knowlton ina different learning parser of all 400 sentences.  Afterexperience with 300 sentences it was able togeneralize with 77 percent accuracy to the next 100.In accumulative learning trials after the first200 sentences it averaged a probability of .9 for accuratelyparsing each new sentence it encountered.It was concluded that the system is adequate for learningto parse the bulk of basic English but thatfurther development is required before conclusions aboutits application to ordinary English can be stored.The system is operational and available onthe ARPA/SDC time-shared computing system.
1171	Mueller, R. K.;Cooper, L.;	A Comparison of the Primal-Simplex and Primal-DualAlgorithms for Linear Programming	A statistical comparison of the primal-dualand the more commonly used primal-simplex algorithmfor solving linear programming problems has been made underthe assumption of starting with a full artificialbasis.  Under these conditions the primal-dual methodshows a statistically significant superiority onrandomly generated problems.  It has also been found, viaa regression analysis, that the relevant parametersin determining the difference in the number of iterationsbetween the algorithms is not only the numberof constraints and the number of variables butalso the ratio of the latter to the former.
1172	Pollack, S. L.;	Conversion of Limited-Entry Decision Tables to Computer Programs	Decision tables are useful for describing aset of complex decision rules based on given setsof conditions.  Algorithms that can efficiently convertthe tables into computer programs will extendthe usefulness of decision tables to computer users.Two such algorithms, based on work done by M. S.Montalbano, are described and extended here to handledashes and ELSE-decision rules.  The first algorithmminimizes the computer storage space required for theresultant program, the second minimizes computerrunning time. During the conversion process, both pinpointany contradictions or redundancies among therules in a table.
1173	Naur, P.;	The Performance of a System for Automatic Segmentationof Programs Within an ALGOL Compiler (GIERALGOL)	The GIER ALGOL compiler makes use of an automaticsystem for handling the transfers of programsegments from the drum store to the core store at programexecution time.  The logic of this system isdescribed. The performance of the system is discussed,primarily on the basis of execution times relatedto two specific programs.  This discussion concludes withan assessment of the potential gains of variousways of improving the system.
1174	Medlock, C. W.;	Inverse Permutation (Algorithm 250 [G6])	
1175	Scowen, R. S.;	Quickersort (Algorithm 271 [M1])	
1176	Newhouse, A.;	Finding Eigenvectors by Gaussian Elimination (Algorithm 270 [F2])	
1177	Pfann, J.;	Determinant Evaluation (Algorithm 269 [F3])	
1178	McKeeman, W. M.;	ALGOL 60 Reference Language Editor (Algorithm 268 [R2])	
1179	Rosen, S.;Spurgeon, A.;Donnelly, J. K.;	PUFFT-The Purdue University Fast FORTRAN Translator	A core resident, compile-and-go system designedfor the IBM 7090/7094 computer is described.In little more than half of the 32k word core memoryPUFFT provides a monitor for job sequencing, atranslator for the full FORTRAN IV language, the FORTRANsubroutine library, an input--output systemfor use at compile time and at execute time, and a ratherelaborate diagnostic message writing routine.Batches of small- and medium-sized FORTRAN IV sourcelanguage programs are processed at very high speeds.Language compatibility has been maintained so thatprograms may be debugged in the PUFFT system andthen recompiled and run in the IBJOB-IBFTC system supplied by the manufacturer.
1180	Cohen, I.;Wegstein, J. H.;	AXLE: An Axiomatic Language for String Transformations	AXLE is a language designed for data manipulation.Data arranged in a linear form in a workspaceis transformed according to a table of axioms, called imperatives.A transformation consists of a matchingprocedure, which decides where an imperative is applicable,and a replacement procedure that modifiesthat part of the workspace.  Imperatives are appliedin accordance with definitions of symbolic terms,presented systematically in an assertion table.  Theprocess of definition includes the special caseof recursive assertions.  Several complete programsof imperatives are given to show a few applicationsof the language.
1181	Neilsen, I. R.;	A Simple Data Transmission System Using the Office Telephone	A method has evolved for transmitting data ofa type originating in many laboratory situationdirect to a central computer.  The method requires almostno specialized equipment and uses any ordinarytelephone on a "callup" basis.  Present applicationsinclude cardiac-output calculations, radio-activitytracer studies and neurophysiology time-sequence studies of nerve impulses.
1182	Rubenstein, H.;Goodenough, J. B.;	Contextual Correlates of Synonymy	Experimental corroboration was obtained forthe hypothesis that the proportion of words commonto the contexts of word A and to the contexts of wordB is a function of the degree to which A and Bare similar in meaning.  The shapes of the functions,however, indicate that similarity of context isreliable as criterion only for detecting pairsof words that are very similar in meaning.
1183	Veronis, G.;	A Note on the Use of a Digital Computerfor Doing Tedious Algebra and Programming	A special purpose compiler was written withFORTRAN II language and made possible the writingof very long programs by the computer.  The procedure isbased on a straight-forward use of FORMAT statementsfor generating machine-written programs.
1184	Knowlton, K.C.;	A Fast Storage Allocator	A fast storage bookkeeping method is describedwhich is particularly appropriate for list-structureoperations and other situations involving many sizesof blocks that are fixed in size and location.This scheme, used in the LLLLLL or L6 (Bell Telephone LaboratoriesLow-Level List Language), makes availableblocks of computer registers in several different sizes:the smaller blocks are obtained by successivelysplitting larger ones in half, and the larger blocks are reconstitutedif and when their parts are simultaneouslyfree.
1185	Fletcher, J. G.;	A program to Solve the Pentomino Problem by the Recursive Use of Macros	A coding technique is described in which certainmacro-instructions are given lists as argumentsand are thereby used recursively.  The discussion coversprimarily an example in which the techniqueis used to solve the pentomino problem-the problem offitting 12 pentominos without overlapping intoa plane area formed of 60 elemental squares.
1186	Lynch,W. C.;	Recursive Solution of a Class Of Combinatorial Problems: An Example	Combinatorial problems requiring the selectionof n elements from a set of m elements may besolved by a recursion process analogous to that forcomputing binomial coefficients.  Several specificproblems are analyzed, the general technique is exposed,and an ALGOL program is developed for one ofthe problems.
1187	Crosby, W. S.;	Note on an ASCII-Octal Code Table (Standards)	
1188	Chu, Y.;	An ALGOL-like Computer Design Language	The idea of constructing a computer designlanguage by making use of an ALGOL-like programminglanguage is presented.  A computer designer can benefitfrom using a design language at a higher leveljust as a computer user can benefit from a higher levelprogramming language.  The purposes and requirementsof the design language are enumerated.  To achieve mostof the purposes a translator is required to translatea design of computer logic into a set of Boolean equations.The design language is presented in termsof vocabulary, statements, sequences and microprogram.Included are examples of identifiers, expressionswith both unary and binary operators, declaration statements,transfer statements, terminal statements,exchange statements, if statements, do statements, goto statements, several sequences and a microprogram.
1189	Pike, M. C.;	Random Normal Deviate (Algorithm 267 [G5])	
1190	Pike, M. C.;Hill, I. D.;	Pseudo-Random Numbers (Algorithm 266 [G5])	
1191	Wirth, N.;	Find Precedence Functions (Algorithm 265 [L2])	
1192	Stafford, J.;	Interpolation in a Table (Algorithm 264 [E1])	
1193	Langmaack, H.;	Gomory 1 (Algorithm 263 [H])	
1194	Rubinoff, M.;White Jr., J. F.;	Establishment of the ACM Repository and Principlesof the IR System Applied to its Operation	The history of the establishment of the ACM Repositoryat the Moore School, University of Pennsylvania,is reviewed briefly.  Two principles are presented asparamount in the provision of information services:(1) easy accessibility to the information files by usersunfamiliar with file organization, and (2) valueof service exceeding user costs.  These principles serveas guides in mechanizing the ACM Repository.The main features of the information system are directuser access via on-line teletypewriter console,direct user access to all details of the system organization,unrestricted and expandable search vocabulary,user access through many facets of document indexing,and stochastic search through linked index termsand other file relationships.  The first contributionto the ACM Repository consisted of 315 documents,relating primarily to early research on compilers.  Thesedocuments have been cataloged and indexed andthe catalog is scheduled to appear in Computing Reviews.The indexing system is described in detail.The Main Catalog is used to describe the documents,and inverted lists are provided by the Repositorysystem for retrieval by concept coordination.
1195	Canter, J. D.;Donaghey, C. E.;	UPLIFTS-University of Pittsburgh Linear File Tandem System	A series of computer programs has been developedand is now operational for processing theNational Aeronautics and Space Administration linear filesystem on an IBM 1401-7090 combined data processingsystem.  The program are note-worthy in that they createfixed length logical records and fixed lengthblocks from variable length source data, and formatthe output for optimization of processing on theIBM 7090 system.  The programs are completely self-checkingand test for both validity and accuracy ofthe input materials as provided by the NationalAeronautics and Space Administration.
1196	Klopfenstein, R. W.;	Applications of Differential Equations in General Problem Solving	A large class of problems leading to digitalcomputer processing can be formulated in termsof the numerical solution of systems of ordinary differentialequations.  Powerful methods are in existencefor the solution of such systems.  A good general purposeroutine for the solution of such systems furnishesa powerful tool for processing many problems.  This istrue from the point of view of ease of programming,ease of debugging, and minimization of computer time.A number of examples are discussed in detail.
1197	Henrich, P.;Watkins, B. O.;	Finding Zeros of a Polynomial by the Q-D Algorithm	A method which finds simultaneously all the zerosof a polynomial, developed by H. Rutishauser,has been tested on a number of polynomials with realcoefficients.  This slowly converging method (theQuotient-Difference (Q-D) algorithm) provides startingvalues for a Newton or a Bairstow algorithm formore rapid convergence.  Necessary and sufficient conditionsfor the existence of the Q-D scheme arenot completely known; however, failure may occur whenzeros have equal, or nearly equal magnitudes.Success was achieved, in most of the cases tried, withthe failures usually traceable to the equal magnitudedifficulty.  In some cases, computer roundoff may resultin errors which spoil the scheme.  Even if theQ-D algorithm does not give all the zeros,it will usually find a majority of them.
1198	Dijkstra, E. W.;	Solution of a Problem in Concurrent Programming Control	A number of mainly independent sequential-cyclicprocesses with restricted means of communicationwith each other can be made in such a way that at anymoment one and only one of them is engaged in the"critical section" of its cycle.
1199	Hutchinson, G. K.;	A Computer Center Simulation Project	Today's computation centers are based on rapidlychanging technologies of hardware and softwaresystems.  It is difficult, therefore, to base decisionson experience; in most instances, the benefitsof comparable experience for a given problem situationare not available.  In this paper, a mathematicalmodel of the Lockheed Central Computer Center is formulatedthat describes the operation of a computationcenter in terms of information nets, decision processes,and control functions.  Experiments performedwith this model, the results of the experiments,and the application of the results are discussed.
1200	Reily, E. D.;Federighi, F. D.;	On Reversible Subroutines and Computers that Run Backwards	A computer design is describe which permitssubroutines to be executed backward as well asforward, either with their instructions unchanged orreplaced with conjugate instructions.  It is shownthat using this concept a number of new subroutine typescan be developed with rather unusual properties.Since these properties are analogous to certain matrixoperations, a parallel nomenclature is suggestedfor their classification.
1201	Elliott, R. W.;	Generation of Permutations in Lexico-GraphicalOrder (Algorithm 202 [G6])	
1202	Pike, M. C.;	Normal Random (Algorithm 200 [G5])	
1203	Pike, M. C.;	Normdey (Algorithm 121 [G5])	
1204		Character Structure and Character Parity Sense forSerial-by-Bit Data Communication in the AmericanStandard Code for Information Interchange (Proposed American Standard)	
1205	A Report from the ACM Curriculum Committee on Computer Science;	An Undergraduate Program in Computer Science-Preliminary Recommendations	
1206	DeMaine, P. A. D.;	The Self-Judgment Method of Curve Fitting	A computer-oriented method for processing andcommunicating numerical data is described.  TheInstrument Reliability Factors (IRF), which exactlydefine the limits of reliability of each measureditem of information, are used to compute the MaximumPermitted Error (MPE) associated with each valuesof each ordinate.  The Self-Judgment Principle (SJP)is used to discard wrong information and to computemean values of the parameters and their MPE's in termsof the IRF.  Data compatibility tests with anynumber of different equations can be made quickly.Otherwise intractable problems are easily solved,and the design of many experiments is greatly simplified.The computational and mathematical techniquesused to reduce bias in the SJP are discussed.  Inadequaciesin the statistical and graphical methodsof curve fitting are noted.
1207	Dodd, G. G.;	Remarks on Simulation of Boolean Functions	
1208	Weingarten, F. W.;	Simulation of Computer Logic by Fortran Arithmetic	
1209	Garber, M. S.;	Negative and Zero Subscripts in Fortran II Programming for the IBM 1620	
1210	Harrison, M. C.;	File-Handling Within FORTRAN	This note describes some FORTRAN subroutinesto facilitate handling of tape files.  They allowsymbolic naming of information files, without violatingthe casual scientific programmer's idea of simplicity.Some comments on two years use of these subroutines are given.
1211	Berztiss, A. T.;	A Note on Storage of Strings	A method for storing strings is described whichuses blocks of indefinite size, and is thereforecompletely dynamic.  Its relation to similar schemes is discussed.
1212	Bellman, R.;Kagiada, H.;Kalba, R.;	Non-linear Extrapolation and Two-Point Boundary Value Problems	It is suggested that the convergence propertiesof the usual Picard successive approximationscheme may be improved through use of non-linrar extrapolationtechniques.  A numerical example is provided.
1213	Ranelletti, J. E.;	Dynamic Format Specifications	The use and implementation of two new FORTRANformat conversions are discussed.  These formattypes give the FORTRAN programmer control of input/outputspecifications at execution time.
1214	Lapidus, A.;Goldstein, M.;	Some Experiments in Algebraic Manipulation by Computer	A set of subroutines to allow algebraic manipulationson the IBM 7094 computer has been writtena List Processor, SLIP.  A series of four problems of increasingdifficulty were solved using these routines.
1215	Gries, D.;Paul, M.;Wiehle, H. R.;	Some Techniques Used in the ALCOR ILLINOIS 7090	An ALGOL compiler has been written by theALCOR group for the IBM 7090.  Some little knownbut significant techniques in compiler writing, togetherwith organizational details of this compiler,are described.  Timing estimates and an indicationof compiler requirements are also given.
1216	Smith, P. J.;	Symbolic Derivatives Without List Processing, Subroutines, or Recursion	A routine has been developed which computes andprints out the symbolic derivative of an absolutelycontinuous elementary function of one or several variables.No use is made of list-processing languages.The chain rule is applied and the result is edited toproduce results as elegant and efficient as thoseobtained by hand computation.  A subset may be imbededin a formula translator to introduce a differentiationoperator into an "algebraic" programming language.
1217	McKay, J. K. S.;	Map of Partitions into Integers (Algorithm 264 [A1])	
1218	McKay, J. K. S.;	Partition Generator (Algorithm 263 [A1])	
1219	McKay,J. K. S.;	Number of Restricted Partitions of N (Algorithm 262 [A1])	
1220	Gunn, J. H.;	9-J Symbols (Algorithm 261 [Z])	
1221	Gunn, J. H.;	6-J Symbols (Algorithm 260 [Z])	
1222	Gautschi, W.;	Legendre Functions for Arguments Larger Than One (Algorithm 259 [S16])	
1223	Gear, C. W.;	High Speed Compilation of Efficient Object Code	A three-pass compiler with the following propertiesis briefly described:  The last two passesscan an intermediate language produced by the precedingpass in essentially the reverse of the orderin which it was generated, so that the first pass is theonly one which hasto read the bulky problem-orientedinput.  The double scan, one in either direction, performedby the first two passes, allows the compilerto remove locally constant expressions and recursivelycalculable expressions from loops and to do theimportant part of common subexpression recognition.Optimization such as the effective use of indexregisters, although as important, is not discussed sincethe object code which would be most efficientis highly machine dependent.  The discussion is in termsof a FORTRAN-like language, although the techniqueis applicable to most algebraic languages.
1224	Rosin, R. F.;	Determining a Computing Center Environment	An investigation is described in which severalgenerally unavailable parameters descriptiveof a computing center environment are obtained.  Theactual data collection and reduction is described,and the results of one month of this collection are tabulated and summarized.
1225	Kuno, S.;	The Predictive Analyzer and a Path Elimination Technique	Some of the characteristic features of a predictiveanalyzer, a system of syntactic analysisnow operational at Harvard on and IBM 7094, are delineated.The advantages and disadvantages of thesystem are discussed in comparison to those of an immediateconstituent analyzer, developed at the RANDCorporation with Robinson's English grammar.  In addition,a new technique is described for repetitivepath elimination for a predictive analyzer, which cannow claim efficiency both in processing time andcore storage requirement.
1226	Dzubak, B. J.;Warburton, C. R.;	The Organization of Structured Files	A data file is an integral part of a data processingsystem.  In many systems, the selectionof an organization for the data within the file canbe critical to the system's operating efficiency.This paper provides the systems designer with an informationsource which describes ten techniques thatmay be employed for organizing structured data.  Thecharacteristics of the organizations described areapplication independent, thus providing the designer witha reference which allows him to limit the numberof file organizations he must consider for his system.
1227	Bayer, G.;	Transport (Algorithm 258 [H])	
1228	Abrams, P. S.;	Treesort 3 (Algorithm 245 [M1])	
1229	Pike, M. C.;	Random Permutation (Algorithm 235 [G6])	
1230	Rich, R. P.;Stone, A. G.;	Method for Hyphenating at the End of a Printed Line	A description of a method of hyphenation ispresented as a result of application of severalgeneral rules.  The character sets considered by theroutine and the method are briefly outlined.
1231	McKeeman, W. M.;	Peephole Optimization	Redundant instructions may be discarded duringthe final stage of compilation by using a simpleoptimizing technique called peephole optimization.The method is described and examplesare given.
1232		Representation of the Standard ECMA 7-BitCode in Punched Cards (ECMA Standard)	
1233		Conventions for the Use of Symbols in the Preparationof Flowcharts for Information ProcessingSystems (A Standard Working Paper)	This paper is intended as an outline of thevarious conventions which are being consideredfor the use of flowcharts for information processingsystems.  The conventions are applied to the useof the symbols appearing in the proposed American StandardFlowchart Symbols and not with the symbolsper se.
1234	Kanner, H.;Kosinski, P.;Robinson, C. L.;	The Structure of Yet Another ALGOL Compiler	A high-speed "top down" method of syntax analysiswhich completely eliminates "back-up" ofthe source string has been implemented in a convenientmacro-language.  A technique of  simulation atcompile time of the use of a conventional run-time stackenables the generation of code for expressionswhich minimizes stores, fetches and stack-pointer motionat run time, while properly trating recursionand side effects of procedures.  Block structure andrecursion are handled without need for interpretivemethods at run times.  The "context problem" in the transmissionto recursive procedures of parameters"called by name" is solved in a manner which permits thehandling of the common cases of simple expressionsand array identifiers with particular efficiency.
1235	Stolz, W. S.;Tannenbaum, H.;Carstensen, F. V.;	A Stochastic Approach to the Grammatical Coding of English	A computer program is described which willassign each word in an English text to its formclass or part of speech.  The program operates at relativelyhigh speed in only a limited storage space.About half of the word-events in a corpus are identifiedthrough the use of a small dictionary of functionwords and frequently occurring lexical words.  Some suffixtests and logical-decision rules are employedto code additional words.  Finally, the remaining wordsare assigned to one class or another on the basisof the most probable form classes to occur within the alreadyidentified contexts.  The conditional probabilitiesused as a basis for this coding were empirically derivedfrom a separate hand-coded corpus.On preliminarytrials, the accuracy of the coder was 91% to 93%, withobvious ways of improving the algorithm beingsuggested by an analysis of the results.
1236	Salton, G.;Lesk, M. E.;	The SMART Automatic Document Retrieval System-An Illustration	A fully automatic document retrieval systemoperating on the IBM 7094 is described.  The systemis characterized by the fact that several hundred differentmethods are available to analyze documentsand search requests.  This feature is used in the retrievalprocess by leaving the exact sequence ofoperations initially unspecified, and adapting thesearch strategy to the needs of individual users.The system is used not only to simulate an actual operatingenvironment, but also to test the effectivenessof the various available processing methods.  Results obtainedso far seem to indicate that some combinationof analysis procedures can in general be relied upon toretrieve the wanted information.  A typical searchrequest is used as an example in the present report to illustratesystems operations and evaluation procedures.
1237	Press, L. I.;	Conversion of Decision Tables To Computer Programs	Several translation procedures for the conversionof decision tables to programs are presentedand then evaluated in terms of storage requirements,execution time and compile time.  The proceduresare valuable as hand-coding guides or as algorithms fora compiler.  Both limited-entry and extended-entrytables are analyzed.  In addition to table analysis,the nature of table-oriented programming languagesand features is discussed.  It is presumed that the readeris familiar with the nature of decision tablesand conventional definitions.
1238	Budea, N.;Kamena, J. G.;Kamena, R. M.;	A Technique for Integrated Reports from a Multi-run System	The requirements of a requisition accountingsystem for the San Francisco Overseas Supply Agency(OSA) included exception reporting to OSA itself.  The simultaneoussatisfaction of the reporting requirementand the accounting requirements posed definite problemsin system design, particularly the handling ofthe reporting function.  A practical and satisfactorysolution was developed by expanding the basic systemwith two tailored service runs for report production.These two runs permitted a final system that waseasier to debug, easy to maintain, efficient in productionand responsive to the changing requirementsof OSA.
1239	Allen, W. D.;	Graycode (Algorithm 246 [Z])	
1240	Bayer, G.;	Transport (Algorithm 258 [H])	
1241	Kubik, R. N.;	Havie Integrator (Algorithm 257 [D1])	
1242	Grau, A. A.;	Modified Graeffe Method (Algorithm 256 [C2])	
1243	Weil, R. L.;	Testing the Understanding of the Difference BetweenCall by Name and Call by Value in ALGOL 60	
1244	Tobey, G. D.;	Bit Manipulation in Fortran Language	
1245	Kent, W.;	A Fortran n-Ary Counter	
1246	Korphage, R. R.;	Deeply Nested Iterations	
1247	Brown, W. S.;	An Operating Environment for Dynamic-RecursiveComputer Programming Systems	Presented in this paper is a brief nontechnicalintroduction to OEDIPUS, a computer programmingsystem which can serve as an operating environment fordynamic and/or recursive programs and programmingsystems.  The available services include dynamic allocationof storage for contiguous blocks of arbitrarysize, input and output for a hierarchy of data types,a public pushdown list for automatic recursiveprogramming, a rudimentary compiler for subroutinecommunication and bookkeeping, and debugging aids.
1248	Nievergelt, J.;	On the Automatic Simplification of Computer Programs	Presented in this paper is the problem of writinga program which would examine any other programand perform such simplifications on it as can be detectedfrom the argument-program's form alone, withouthaving any knowledge of what it is supposed to do.
1249		Recorded Magnetic Tape for Information Interchange(200 CPI, NRZI) (On the Revised ProposedAmerican Standard)	
1250		Graphic Symbols for Problem Definitionand Analysis-A Standards Working Paper	
1251	Traub, J. F.;	American Standard and IFIP/ICC Vocabularies compared	The "Proposed American Standard Vocabulary ofInformation Processing" and the "IFIP/ICC Vocabularyof Terms Used in Information Processing" are analyzed and compared.
1252	Smith, B. W.;	Symbolic Notations for Statistical Tablesand an Approach Towards Automatic System Design	The preparation of statistical tables is animportant function of the data processing systemsof some organizations, and a symbolic notation for thedescription of tables has been shown to be a usefulaid to documentation.  Such a notation also providesthe first step towards making automatic a tediousand time-consuming part of system design and programmingin many computer applications.  One notationis described and suggestions are made for the implementation of the larger goal.
1253	Tonge, F. M.;Keller, P.;Newell, A.;	QUIKSCRIPT-A SIMSCRIPT- Like Language for the G-20	QUIKSCRIPT is a simulation language based onSIMSCRIPT and programmed entirely in an algebraiclanguage, 20-GATE.  The QUIKSCRIPT language, its internalimplementation, and major differences betweenQUIKSCRIPT and SIMSCRIPT are presented.  This paper isnot a programming guide to the language, but ratheran attempt to present its flavor.  A brief description ofSIMSCRIPT is included, as is a sufficient descriptionof 20-GATE to render this material understandableto the reader familiar with algebraic languages.
1254	Galler, B. A.;Fischer, M. J.;	The Iteration Element	A recent addition to the MAD language has madethe iteration structure of the MAD THROUGH statement(corresponding to the ALGOL for statement and the FORTRANDO statement) available within expressions.
1255	Philpott, C. M.;Lago, G. V.;	A Method of Data List Processing With Application to EEG Analysis	A set of subroutines is discussed, which isdesigned to aid in the programming of computationson indexed lists of numbers using machine languageor a symbolic assembly system.  The most commonlyperformed list operations are outlined, and logicallyarranged into five groups.  As an example, thecomputation of power spectral density from the autocovariancefunction is discussed for a class of EEGsignals.
1256	King, D. R.;	Dynamic Variable Formatting	
1257	Evans, T. G.;Darley, D. L.;	DEBUG-An Extension to Current On-Line Debugging Techniques	A method of on-linr assembly-language debuggingwhich greatly simplifies several of the bookkeepingtasks characteristically associated with that processhas been developed and implemented in a programfor the UNIVAC M-460 computer at Air Force Cambridge ResearchLaboratories.  With this program, an onlineuser may insert or delete (in symbolic assembly language)any number of lines at any point of his previouslyassembled program in core, with the remainderof the program being relocated appropriately.
1258	Blum, B. I.;	An Extended Arithmetic Package	In many fields, for example algebraic numbertheory, arithmetic must be carried out to a degreeof precision which exceeds the normal hardware capacityof most machines.  In such cases, an extendedarithmetic package provides a comprehensive and easy-to-useway of performing such arithmetic.  Sucha package was coded for the IBM 7090.  In discussingthe general problems associated with the designof an extended arithmetic package, specific reference is made to this program.
1259	Weldon, R. J.;Baker, R. L.;	Applications of Binary Numbers In Computer Routines	A binary number can be thought of as an alternateform of expression for either a set of lettersor a decimal number.  There are then three equivalentexpressions, easily translatable to one another,each having different characteristics.  Four examplesare given in which the form of an expression ischanged to an equivalent expression to save space or gain power.
1260	Marshall, S. W.;Nelson, J. A.;Wilenzick, R. M.;	Least-Squares Analysis of Resonance Spectra on Small Computers	The problem of analyzing data from a Mossbauereffect experiment is discussed.  By using thecut step procedure for convergence and by imposing physicalconstraints on the functional form of thecalculation it is possible to make the analysis on asmall computer.  The analysis has been carried outon an IBM 1410 computer with a 40,000 BCD core memory.
1261	Larsen, R. P.;Mano, M. M.;	Modeling and Simulation of Digital Networks	The simulation of digital networks on a digitalcomputer provides the engineer with an effectivemeans of analyzing time-quantized logical behavior.  Thedigital network is modeled as a set of time-dependentor time-independent Boolean transformations; each transformationdescribing the input-output relationshipof a model element comprising the network mode.  Thesimplicity of utilizing the FORTRAN IV ProgrammingSystem as a digital Network Simulator is discussed anillustrated.  This simplicity is derived from acommon modeling technique applicable to combinationaland sequential digital networks and a systematicprogramming approach.
1262	Opler, A.;	Procedure-Oriented Language Statements to Facilitate Parallel Processing	Two statements are suggested which allow a programmerwriting in a procedure-oriented languageto indicate sections of program which are to be executedin parallel.  The statements are DO TOGETHERand HOLD.  These serve partly as brackets in establishinga range of parallel operation and partly todefine each parallel path within this range.  DO TOGETHERsmay be nested.  The statements should be particularlyeffective for use with computing devices capable ofattaining some degree of compute-compute overlap.
1263	Burkhardt, W. H.;	Metalanguage and Syntax Specification	Two metalanguages are described, one sufficientfor the table specification of the ALGOL syntax,the other with additional metaoperators adequate and usedfor the formal table description of Basic FORTRAN.
1264	Landwehr, J. B.;McLaughlin, C.;Mueller, H.;Lichstein, M.;Pollack, S. V.;	BLNSYS-A 1401 Operating System with Braille Capabilities	BLNSYS is an operating system designed fora 4K 1401 with common optional features and twoattached tape drives.  Printed output of this systemor of executing programs may be in either Englishor braille.  Even though this system was written fora small machine with minimal peripheral equipment,jobs may be batched, so that card handling and lostprocessing time is at a minimum.  This system willperform any or all of the following users specifiedfunctions: assemble SPS source decks, post list,produce condensed or uncondensed object decks, executeuser's program, list card input to a program,list punched output, provide a storage dump, executea program submitted for execution as an uncondensedobject deck under debugging trace control, card-to-brailleconversion, brailled listings of 7040 IBSYSbatch output, and update or duplicate the system tapeitself.  Input-ouput subroutines are also includedin the system.
1265	Griffiths, T. V.;Petrick, S. R.;	On the Relative Efficiencies of Context-Free Grammar Recognizers	A number of diverse recognition proceduresthat have been proposed for parsing sentences withrespect to a context-free grammar are described in thispaper by means of a common device.  Each procedureis defined by giving an algorithm for obtaining a nondeterministicTuring Machine recognizer that isequivalent to a given context-free grammar.  The formalizationof the Turing Machine has been chosento make possible particularly simple description ofthe parsing procedures considered.  An attempt hasbeen made to compare recognition efficiencies for theprocedures defined.  For a few simple grammarsand sentences a formal comparison has been made.  Empiricalcomparison of the recognition of more realisticprogramming languages such as LISP and ALGOL has beenmade by means of a program which simulates theTuring Machine on the Univac M-460 computer.  Severalalgorithms for producing grammars equivalent toa given context-free grammar have been considered, andthe increase in recognition efficiency they affordhas been empirically investigated.
1266		Considerations Relating to Purpose of FORTRAN Standardization(Appendixes to ASA FORTRAN Standard)	
1267		Performance of Systems Used for Data TransmissionTransfer Rate of Information Bits -An ASA TutorialStandard	Information thruput as a characteristic ofsystems performance is discussed.  This discussionincludes the pertinent aspects of information transfer,of determination of transfer rate of informationbits (TRIB), of residual errors, and of standard measurementconditions.  The paper also presents anorderly arrangement of characteristics and parametersthat affect information thruput, and some exampleson procedures for determining a thruput rate in terms ofTRIB.  It concludes that a performance characteristicinvolving information rate can best be expressed as theTRIB in conjunction with the Residual Error Rate.
1268	Boothroyd, J.;	Logarithm of a Complex Number (Algorithm 243 [B3])	
1269	Teijelo, L.;	Computation of Fourier Coefficients (Algorithm [C6])	
1270	Forsythe, G. E.;Wirth, N.;	On ALGOL Education: Automatic Grading Programs	Two ALGOL grader programs are presented forthe computer evaluation of student ALGOL programs.One is for a beginner's program; it furnishes random dataand checks answers. The other provides a searchingtest of the reliability and efficiency of an integrationprocedure.  There is a statement of the essentialproperties of a computer system, in order thatgrader programs can be effectively used.
1271	Davis, D. R.;Lin, A. D.;	Secondary Key Retrieval Using an IBM 7090-1301 System	The secondary key retrieval method involvesthe preparation of secondary storage lists fromprimary data records. Search requests are satisfied bylogical operations on appropriate lists, producinga complete set of addresses of primary records relevantto the request.  Experimental results are presentedand a comparative analysis is given.
1272	Doule, L. B.;	Expanding the Editing Function In Language Data Processing	In automatic abstracting, citation indexing,mechanical translation and other such procedures,editing is required whenever the automatic method leavessomething to be desired.  This paper discussesthe economy of editing as a function of the amount of condensationof text in language processing operations,and then contends that editing can be regarded as anopportunity rather than as an unwelcome necessity."Heavy editing," which goes beyond mere correctionand improvement of computer output, is exemplifiedby the use of a concordance in preparing a survey articleor lecture.  Other opportunities for heavyediting are described, chief among them being interpretation andexpansion of computer output in suchprocesses as factor analysis.  Applications are described,such processes as factor analysis.  Applicationsare described, such as the quick, unbiased evaluationof a large volume of incoming mail or telegrams,yielding summary reports not possible for eitherhumans or computers to produce alone.
1273	Krasun, A. M.;Prager, W.;	Remark on Romberg Quadrature	A modified form of Romberg quadrature is described,which is less sensitive to the accumulationof rounding errors than the customary one.
1274	Day, J. T.;	On the Numerical Solution of an N-Point BoundaryValue Problem for Linear Ordinary DifferentialEquations	A method for the numerical solution of then-pointboundary value problem for homogeneous linearordinary differential equations is developed.  Themethod requires two Runge-Kutta integrations overthe interval under consideration and the solution ofa linear system of equations with n-1 unknowns.
1275	Ramamoorthy, C. V.;	Code Structures for Protection and Manipulationof Variable Length Items (Corrigendum)	
1276		Still Another Use for FORTRAN II Chaining	
1277	Tajiri, K.;	The Use of Cobol Subroutines in Fortran Main Programs	
1278	Bellman, R. E.;Kagiwada, H.;Kalaba, R. E.;	Wengert's Numerical Method for Partial Derivatives,Orbit Determination and Quasilinearization	In a recent article in the Communicationsof the ACM, R. Wengert suggested a technique formachine evaluation of the partial derivatives of a functiongiven in analytical form.  In solving non-linearboundary-value problems using quasilinearization manypartial derivatives must be formed analyticallyand then evaluated numerically.  Wengert's method appearsvery attractive from the programming viewpointequations which might not otherwise be undertaken.
1279	Brown, R. M.;	Use of a Conditional Base Number System forEncoding Sequences of Correlated Characters	A procedure is described for the relativelyefficient encoding of sequences of characters whichhave predecessor-successor selection rules.  The procedureis shown to assign a unique integer to eachsequence and to generate a reasonably compact set of values.
1280	Bellman, R. E.;Buell, J. D.;Kalaba, R. E.;	Numerical Integration of a Differential-DifferenceEquation with a Decreasing Time-Lag	Systems in which variable time-lags are presentare of common occurrence in biology.  Variableflow rates are a common cause of these variable lags.At present no extensive body of knowledge existsconcerning the effects which these variable lags cancause.  Shown here is a method of reducing somedifferential-difference equations to ordinary differentialequations which can then be studied numericallywith ease.  Subsequent study will deal with situationsin which multiple-lags and lags dependent on thesolution itself are present.
1281	Pyle, I. C.;	Data Input by Question and Answer	A data input scheme for a time-sharing computeris described in this paper.  Instead of usingformat statements to determine the input, the computerasks the user for the required values one at atime.  The computer converses with the user during theinput process, checks for errors, provides standarddata, and allows editing of values input.
1282	Shavell, Z. A.;	The Use of FORTRAN in Subroutines with COBOL Main Programs	By using the proper COBOL coding techniques andaccounting for differences in storage allocationand library routines between the two languages, it ispossible to write FORTRAN IV subroutines that maybe called from COBOL main programs.  Such a techniqueenables the programmer to take advantage of themost useful properties of each language whileminimizing their respective disadvantages.
1283	Ferring, M.;	Matrix Inversion (Algorithm 231 [F1])	
1284	Stafford, J.;	Bessel Function for a Set of Integer Orders	
1285	Businger, P. A.;	Eigenvalues and Eigenvectors of a Real SymmetricMatrix by the QR Method (Algorithm 254 [F2])	
1286	Businger, P. A.;	Eigenvalues of a Real Symmetric Matrixby the QR Method (Algorithm 253 [F2])	
1287	Gunn, J. H.;	Vector Coupling or Clebsch-Gordan Coefficients (Algorithm 252 [Z])	
1288	Conway, R. W.;Delfausse, J. J.;Maxwell, W. L.;Walker, W. E.;	CLP-The Cornell List Processor	Presented in this paper are the highlights ofCLP, a teaching language which has been employedat Cornell University and was constructed to serve as a meansof introducing simulation and other list-processingconcepts.  The various advantages of CLP are discussed and examples are given.
1289		Proposed Revised American Standard Code for Information Interchange	
1290		Transparent-Mode Control Procedures for DataCommunication, Using the American Standard Codefor Information Interchange -A Tutorial	This paper gives the considerations of TaskGroup X3.3.4 in the area of transparent-mode datacommunication control philosophy.  The appearance of thispaper was forecast (underthe name of "second-levelcontrol") in the earlier tutorial paper, "Control Proceduresfor Data Communications," Task Group documentX3.3.4.44, dated May 1964.  The present paper elaboratesupon solutions to the problems of transparencyto the basic ASCII communication control charactersas outlined in the previous paper mentioned above.Moreover, it goes on to cover the additional control problemsof handling material such as off line encrypteddata or non-ASCII codes by means of systems providingcomplete character transparency.  It does not coverconcepts of transparency in which the normal characterstructure or modulation rate of a system may beabandoned.  In conjunction with the earlier tutorialpaper, this paper is expected to lead to a proposalfor stand ardizationof data communication control proceduresusing the American Stand ard Code for InformationInterchange.
1291	George, R.;	Tabular Input of Data	
1292	Krishnamurthy, E. V.;	On a Divide-and-Correct Method For Variable Precision Division	Described in this paper is a divide-and-correctmethod for variable precision division in digitalcomputers.  Unlike the earlier methods of Stein andPope, the present method uses a suitably roundedform of the normalized divisor for getting an estimateof the quotient characters.  This results in acorrection of at most plus or minus one to the estimate,to obtain the exact quotient character.  Itis believed that this method will be widely applicablefor division operations in variable word-lengthcharacter-oriented machines.
1293	Greenberger, M.;	Method is Randomness	Certain nonrandom properties of a commonly usedrandom number generator are described and analyzed.
1294	Ikebe, Y.;	Note on Triple-Precision Floating-Point Arithmetic with 132-Bit Numbers	In a recent paper, Gregory and Raney describeda technique for double-precision floating-pointarithmetic.  A similar technique can be developed fortriple-precision floating-point arithmetic andit is  the purpose of this note to describe this technique.Only the multiplication and the divisionalgorithms are described, since the addition-subtractionalgorithm can be obtained by a trivial modificationof the algorithm in Gregory's and Raney's paper.
1295	Lass, S. E.;	PERT Time Calculations Without Topological Ordering	A simplified technique is presented for PERTTime calculations without topological ordering.Each event is assigned a unique memory location.  An activityis represented by a link.  A link is definedas a memory location containing the address of anothermemory location.  The time information for anactivity is carried with its link.  For a typical net,the majority of activities can be described byone 36-bit cell each.  The remainder use two 36-bitcells each.  The links are unidirectional; forwardduring the T(E) calculation (expected completion time foran activity);backward during the T(L) calculation(time latest allowable for completion of an activity).The calculations progress through the net topologicallyeven though the net is not represented topologically in core.
1296	Wasscher, E. J.;	Ative (Algorithm 205 [E4])	
1297	Varah, J. M.;	Steep1 (Algorithm 203 [E4])	
1298	Pike, M. C.;	Adaptive Numerical Integration by Simpson's Rule (Algorithm 145 [D1])	
1299	Bowlden, H. J.;	Solutions of the Diophantine Equation (Algorithm 139 [A1])	
1300	Wells, M.;	Function Minimization (Algorithm 251[E4])	
1301	Zaremba, W. A.;	On ALGOL I/O Conventions	
1302		Parallel Signaling Speeds for Data Transmission(Proposed American Stand ard)	
1303	Landin, P. J.;	A Correspondence Between ALGOL 60 and Church's Lambda-Notation: Part II*	
1304	Irons, E. T.;	A Rapid Turnaround Multi-Programming System	In this paper, basic features, system characteristicsand the control algorithm for a multi-programmingsystem with rapid turnaround time are described.
1305	Mancino, O. G.;Cecchi, M. M.;	The Internal Structure of the FORTRAN CEP Translator	The FORTRAN CEP translator converts a sourceprogram written in the FORTRAN CEP language intoan object program written in the language of the CEPcomputer.  In this paper, after an outline of theCEP computer, the internal structure of the translatoris described.  Emphasis is on the compilationof expressions, of input/output lists, and of subscripted variables.
1306	Johnston, J. B.;	A Class of Unambiguous Computer Languages	Discussed in this paper is the concept ofa fully nested computer language which may be onemeans of designing computer languages which would be completelyfree of ambiguities.  Several suggestionsare also given here for the redefinition of ALGOL as a fully nested language.
1307	Goodenough, J. B.;	A Lightpen-Controlled Program For On-Line Data Analysis	This paper describes a technique designedto ease the use of a data processing system by aperson, in particular, a scientist, who is intimately andprimarily concerned with interpreting the significanceof data handled by the system.  Since such a person isoften unable to spend the time necessary to mastera programming language, it is essential that he be aidedin composing commands to the computer.  In thesystem described, the user is not required to learnor remember the vocabulary of the language becausethe vocabulary is displayed before him on"menus" bymeans of a computer-drive scope.  He selects thevarious vocabulary elements required by pointing withthe light pen.  By use of a small unordered setof rewriting rules applied as a result of light penselections, the user generates only syntacticallycorrect commands to the system.  He does not have to learnor remember the grammar.  The program restrictsthe user severely in the particular language he can use,but the method for communicating with the programmakes these restrictions seem quite natural and unconstraining.The program has been used successfullyfor over ten months.
1308	Luh, J. Y. S.;Krolak, R. J.;	A Mathematical Model for Mechanical part Description	The flexibility of a mathematical model takesadvantage of the common information requirementsof computer-aided engineering drawing, numerical controltape generation, and physical characteristiccomputation.  By judicious control of man-machine communicationrequirements, improved results over conventionalengineering design processes are possible.  An English-likeinput language, tailored for use by draftsmenand designers, will describe the part and specify theoutput desired.  One approach to the mathematicalmodel consists of a group of surface-defining quadricequations, which are created by a system of modularsubprogram.  Other subprograms will convert the mathematicalmodel into instructions for driving automaticdrafting machines and numerical controlled machine tools.Physical part characteristics, such as centerof gravity, can be computed by subprograms and used indynamic analysis work.  The proposed overall systemis presented and experiments and demonstrations are discussed.
1309	Montillon, G. D.;	A Computer User-Oriented System	A computer language system has been developedwhich makes possible fast preparation of managementreports, regardless of computational complexity or formatvariety.  Costs are sufficiently low so thatindividually tailored reports can be prepared for everymanager.  The system requires initial preparationof large data banks containing data in elementary form.Use of two special languages, EXTRACT and MATRAN,permits selective extraction of any data subset, efficientprocessing through any computational sequence,and flexible presentation of results in either tabularor graphical form.  Matrix algebra is used asa fundamental vehicle for accomplishing both manipulation and computation.
1310	Weiler, W. J.;Klema, V. C.;	A Rapid Braille Transliteration Technique for Certain IBM Machines	
1311	Schmid, L. P.;	Efficient Autocorrelation	
1312	Rice, H. G.;	Recursion and Iteration	
1313	Rosen, J. B.;Suzuki, S.;	Construction of Nonlinear Programming Test Problems	
1314	Batson, A.;	The Organization of Symbol Tables	An efficient symbol table organization is animportant feature in the design of any compiler.During the construction of the Virginia ALGOL 60 compilerfor the Burroughs B205, the primary considerationin the symbol table design was that the recognition ofidentifiers and reserved words should be as rapidas possible.  The general features of the technique are described.
1315	Lahners, E. L.;	Automation of the Radioisotope Accountability System	The Radioisotope Service of the Veterans AdministrationHospital, Omaha, Nebraska, used a manualsystem of radioisotope accountability for three years.  Theprocedure which was satisfactory but time-consumingwas converted from manual to a fully automated computersystem in January, 1963.  The program for purchasedradioisotopes is written in FORMAT FORTRAN for the IBM1620 Computer.  A second program for maintainingaccountability for reactor-created radioisotopes is writtenin the FORCOM programming language.  A minimumamount of bookkeeping is required by the reactor operatingstaff.  The United States Atomic Energy Commissionregulations specify that records be kept.  This systemprovides detailed records for each container ofradioactive material purchased and/or created in the Trigareactor indicating the amounts received, used,and/or transferred to the health physicist for disposal.Consolidated records contain total amountsreceived, used, and/or disposed of for any specified periodof time.  Purchased radioisotopes are reportedin millicuries; reactor-created radioisotopes in microcuries.
1316	Gautschi, W.;	Bessel Functions of the First Kind (Algorithm 236 [S17])	
1317	Samet, P.A.;	Poisson-Charlier Polynomials (Algorithm 234 [S23])	
1318	Bowlden, H. J.;	Arccossin (Algorithm 206 [B1])	
1319	Meissner, L. P.;	Crout with Equilibration and Iteration (Algorithm 135 [F4])	
1320	Boonstra, B. H.;	Inverse Permutation (Algorithm 250 [G6])	
1321	Wirth, N. E.;	Outreal N (Algorithm [I5])	
1322	Briggs, W. A.;	Netflow (Algorithm 248 [H])	
1323	Landin, P. J.;	A Correspondence Between ALGOL 60 and Church's Lambda-Notation: Part I*	This paper describes how some of the semanticsof ALGOL 60 can be formalized by establishinga correspondence between expressions of ALGOL 60 and expressionsin a modified form of Church's L-notation.First a model for computer languages and compute behavioris described, based on the notions of functionalapplication and functional abstraction, but also havinganalogues for imperative language features.Then this model is used as an "abstract object language"into which ALGOL 60 is mapped.  Many of ALGOL60's features emerge as particular arrangements ofa small number of structural rules, suggesting newclassifications and generalizations.  The correspondenceis first described informally, mainly by illustrations.The second part of the paper gives a formal description,i.e. an "abstract compiler" into the "abstractobjct language."  This is itself presented in a "purelyfunctional" notation, that is one using onlyapplication and abstraction.
1324	Simmons, R. F.;	Answering English questions by Computer: A Survey	Fifteen experimental English language question-answeringsystems which are programmed and operatingare described and reviewed.  The systems range from a conversationmachine to programs which make sentencesabout pictures and systems which translate from Englishinto logical calculi.  Systems are classifiedas list-structured data-based, graphic data-based, text-basedand inferential.  Principles and methodsof operations are detailed and discussed.  It is concludedthat the data-base question-answer has passedfrom initial research into the early developmentalphase.  The most difficult and important researchquestions for the advancement of general-purpose languageprocessors are seen to be concerned with measuring,dealing with ambiguities, translating into formallanguages and searching large tree structures.
1325	Whipple, G. H.;Dickson, J. F.;Horibe, H.;Stark, L.;	Remote, On-Line, Real-time Computer Diagnosisof the Clinical Electrocardiogram	Presented in this paper is a brief report onthe hardware, software, system configuration andfunction of a system for the remote, online, real-time digitalcomputer diagnosis of clinical electrocardiograms.It seems likely that efforts of this sort will leadto a satisfactory solution to the problem of theautomatic diagnosis of electrocardiograms.  Currentattempts by the authors to extend the diagnosticcapabilities of the present system are particularly concernedwith increasing the fidelity of the adaptivematched filters, the development of three dimensional pattern analysis,the analysis of parallel electrocardiographer-computerdiagnostic interaction, and a study of the possibilityof introducing major, tree-like branching decisionsearly in the diagnostic process.
1326	Loomis, R. G.;	Boundary Networks	A feasible computer procedure is describedfor determining the total or partial inclusion ofarbitrarily given points and lines with respect to aset of general polygonal domains which partitiona plane bounded region.  A scheme for the computer representationof the boundaries of the domains andan algorithm, based on this  scheme, for evaluatingthe inclusion relations are specified in detail.The method employs several levels of selection criteriafor the purpose of reducing the number of accessesto auxiliary storage devices and the amount of boundarydata for which processing is required.
1327	Kirk, H. W.;	Use of Decision Tables in Computer Programming	A decision table is a tabular form for displayingdecision logic.  Decision tables have manyinherent advantages.  The technique to be illustratedputs these advantages to use in that it enablesone to program directly from a decision table.  The techniqueis based on the creation of a binary imageof a limited entry decision table in computer memory.A binary image of a given set of input conditionscan also be created.  This data image is used to scanthe decision table image to arrive at the propercourse of action.  There are several advantages gainedfrom the programming point view: (1) amount ofcomputer memory used is drastically reduced, (2) programmingis simplified, and (3) documentation isbrief and clear.
1328	Kahan, W.;	Further Remarks on Reducing Truncation Errors	
1329	Mano, M. M.;	Simulation of Boolean Functions in a Decimal computer	
1330	Anderson, H. E.;	Automated Plotting Flow-Charts on a Small Computer	
1331	Ramamoorthy, C. V.;	Code Structures for Protection and Manipulation of Variable-Length Items	When items are made up of a variable numberof characters, each containing the same numberof bits, certain control information (partition symbols)is inserted to mark their separations.  Sinceerrors in identification of these control characterscan lead to serious trouble, methods of protectingthese symbols are indicated.  A 6-bit code assignmentof alphanumeric characters for fixed word-lengthcomputers is given and its suitability for error detectionand variable-length item manipulation is shown.Also indicated is its flexibility during certain arithmetic operations.
1332	Samet, P. A.;	Subroutine Assembly	A description is given of an assembly system,which requires only one pass and does not maintaina table of information about the subroutine library.
1333	Ross, D. R.;	Reducing Truncation Errors Using Cascading Accumulators	When accumulating a large number of quantitiesas in numerical integration, the sum itselfmay become much larger than the individual addends.This results in truncation error.  Much of thiserror can be eliminated using cascading accumulatorsas noted in a recent article by Wolfe.  A simplerand slightly more flexible algorithm is presented whichdeals also with the case of negative addends.
1334	Gerard, J. M.;Izsak, I. G.;Barnett, M. P.;	Mechanization of Tedious Algebra: TheNewcomb Operators of Planetary Theory	A computer program has been written to generatetables of formulas for the Newcomb operatorsof planetary theory.  The Newcomb operators are expressedas polynomials in two variables, one of whichstands for a simple differential operator, and the otherfor an arbitrary integer.  The polynomials aregenerated by a recurrence scheme.  The program is coded inFORTRAN, using simple array manipulation techniquesto perform the algebraic operations.  Formulas for over100 Newcomb operators have been produced by theprogram and typeset photographically on an S-560 Photon system.
1335		Character Set for Optical CharacterRecognition (Proposed American Stand ard)	
1336	Radin, G.;Rogoway, H. P.;	NPL: Highlights of A New Programming Language	
1337	Wirth, N.;Weber, H.;	EULER: A Generalization of ALGOL, and its Formal Definition	
1338	Knuth, D. E.;	Additional Comments on a Problem in Concurrent Progamming Control	
1339	Wirth, N.;Hoare, C. A. R.;	A Contribution to the Development of ALGOL	
1340	Abraham, C.;Lance, G. N.;Pearcey, T.;	Multiplexing of Slow Peripherals	The philosophy of a monitor which allows slowoutput devices to be multiplexed is presented.
1341	Bryant, P.;	Levels of Computer Systems	In building current computer systems, we tendto break them down into "levels" of control,command and communication; in using the system, we breakour problems down correspondingly.  The continueduse of such a structure raises questions about its effectson the usefulness of future systems, particularlywith regard to such trends as time sharing, parallelprogramming, and, eventually, systems which learn.In this essay some of these questions are posed, andthe general attitude we must take in pursuing theproblem further is discussed.
1342	Bayer, G.;	Transportation Problem (Algorithms 293 [H])	
1343	Farkas, I.;	Havie Integrator (Algorithm 257 [D1])	
1344	Schlater, J. E.;Hemerle, W. J.;	Statistical Computations Based Upon Algebraically Specified Models	Based upon a machine-readable statistical modeland related symbolic specifications, an efficientmethod of performing calculations for statistical modelsof a balanced complete nature is presented.Fixes, mixed, and random analysis of variance modelsare considered.  A procedure for obtaining variancecomponents and calculated F statistics for the model terms is included.
1345	Waltons, J. J.;	Tensor Calculations on the Computer	A FORMAC program has been written which is capableof calculating various quantities of interestin tensor calculus.  Using this code, Christoffel symbolshave been calculated for 12 basic orthogonalcoordinate systems.
1346	Gargantini, L.;	On the Application of the Process of Equalizationof Maxima to Obtain Rational Approximationto Certain Modified Bessel Functions	The second Remes algorithm as originally establishedfor polynomials, may converge or not whenthe approximating functions are rational.  However, thefew results known in this domain show how efficientthe algorithm can be to obtain approximations with asmall error, much more than in the polynomial case,in which the best approximation can be very nearlyapproached directly by a series development.  Theaim of this paper is to investigate the limitationsof the applicability of certain extensions of thealgorithm to the case where the approximations are rationalas well as to present some numerical results.
1347	Wilkins, R. D.;	General Time-Varying Systems Error Sensitivities Program	The evaluation, by the propagation of variancetechnique, of the sensitivity of time-varyingsystems to initial condition and parameter errors, involvesthe determination of several system-dependentpartial derivative matrices.  This requirement has led toseparate programs for each system under investigation.A new program, through utilization of the Wengert differentiationtechnique, automatically determinesthe required matrices from specific system equations suppliedin subroutine form at execution time, eliminatingthe need for individualized programs, and presaging thefurther development of extremely general computerprograms.
1348	Sherman, P. M.;	FLOWTRACE, A Computer Program for Flowcharting Programs	The FLOWTRACE system produces flowcharts of programswritten in "almost any" programming language.One most describe the syntax of the control statementsin his language; for this purpose a metalanguageis available.  The resultant object deck is used toflowchart any programs in the language described.Several examples of FAP and SNOBOL flowcharts are given.However, it is not necessary to confine one'sscope to existing languages.  One may define his ownlanguage in any "well-structured" manner.  Thisfeature is particularly useful when it is desirableto chart only comments within a program.  Such anapproach permits the documentation of descriptive remarksand avoids the inclusion of coding details.
1349	Finerman, A.;	Computing Capabilities at Western European Universities	This report on the author's trip to universitiesin Western Europe in the summer of 1966 givesbrief descriptions of computing activities at each institutionvisited.  Present equipment capabilitiesvary from moderate to large scale; however, many institutionsplan to acquire complex time-shared systemsin the near future.  In the author's opinion, the stateof the art lags behind that on this continent.This lag is attributed to four principal factors: (a)the handicapping organization of academic procedures;(b) the university-government financial relationship;(c) the subordinated organization of the computingfacility; (d) the paucity of professional interchangeof knowledge.  The effects of these constraintsare explicated.
1350	Kuno,S.;	The Augmented Predictive Analyzer for Context-FreeLanguages-Its Relative Efficiency	It has been proven by Greibach that for a givencontext-free grammar G, a standard-form grammarGs can be constructed, which generates the same languagesas is generated by G and whose rules are allof the form Z --> cY(1) ... Y(m), (m >= O) where Z andY(i) are intermediate symbols and c a terminalsymbol.  Since the predictive analyzer at Harvard usesa standard-form grammar, it can accept the languageof any context-free Grammar G, given an equivalent standard-formgrammar Gs.  The structural descriptionsSD(Gs,X) assigned to a given sentence X by the predictiveanalyzer, however, are usually different fromthe structural descriptions SD(G,X) assigned to thesame sentence by the original context-free grammarG from which Gs is derived.  In Section 1, an algorithm,originally due to Abbott is described standard-formgrammar each of whose rules is in standard form, supplementedby additional information describing itsderivation from the original context-free grammar.A technique for performing the SD(Gs,X) to SD(G,X)transformation effectively is also described.  In section2, the augmented predictive analyzer as a parsingalgorithm for arbitrary context-free languages is comparedwith two other parsing algorithms: a selectivetop-to-bottom algorithm similar to Irons' "error correctingparse algorithm" and an immediate constituentanalyzer which is an extension of Sakai-Cocke's algorithmfor normal grammars.  The comparison is basedupon several criteria of efficiency, covering core-storagerequirements, complexities of the programsand processing time.
1351	Dargel, R. H.;Loscalzo, F. R.;Witt, T. H.;	Automatic Error Bounds on Real Zeros of Rational Functions	A procedure for implementing an interval arithmeticversion of the Newton-Raphson method isproposed.  The procedure require only a starting intervalover which the zeros of a given rational functionare to be located.  The method automatically provides boundsfor roundoff error.
1352	Rabinowitz, P.;	Automatic Integration of a Function with a Parameter	Two efficient methods for automatic numericalintegration are Romberg integration and adaptiveSimpson integration.  For integrands of the form f(x)g(x,a)where a is a parameter, it is shown thatRomberg's method is more efficient.  A FORTRAN programshows how to achieve this greater efficiency.
1353	Clasen, R. J.;	Techniques for Automatic Tolerance Control in Linear Programming	In this technical note, the numerical stepsfor the simplex method of linear programming arereviewed and the tolerances needed in the numerical procedureare defined.  Objective criteria are givenfor accomplishing the numerical steps of the methodand the calculation of necessary tolerances.
1354	King, P. J. H.;	Conversion of Decision Tables to ComputerPrograms by Rule Mark Techniques	The rule mask technique is one method of convertinglimited entry decision tables to computerprograms.  Recent discussion suggest that in many circumstancesit is to be preferred to the techniqueof constructing networks or trees.  A drawback of thetechnique as hitherto presented is its liabilityto produce object programs of longer run time than necessary.In this paper a modification of the techniqueis discussed which takes into account both rule frequenciesand the relative times for evaluating conditions.This can materially improve object program run time.
1355	Gautschi, W.;	Regular Coulomb Wave Functions (Algorithm 292 )	
1356	Hillstrom, K.;	Havie Integrator (Algorithm 257 [D1])	
1357	Williams, R.;	Examination Scheduling (Algorithm 286 [H])	
1358	Leavenworth, B. M.;	Syntax Macros and Extended Translation	A translation approach is described which allowsone to extended the syntax and semantics ofa given high-level base language by the use of a newformalism called a syntax-macro.  Syntax-macrosdefine string transformations based on syntactic elementsof the base language.  Two types of macrosare discussed, and examples are given of their use.  Theconditional generation of macros based on optionsand alternatives recognized by the scan are also described.
1359	Larsen, R. P.;	Data Filtering Applied to Information Storage and Retrieval Applications	Manipulation of data strings is the most complexprocessing function in information storageand retrieval applications.  Data string manipulationis discussed within the context of an interpretiveprocessing environment controlled by the use of proceduraldirectives.  The sequence of procedural directivesis derived from a job assumed to be expressed in a user-orientedsource language.  Each data string withthe structured data environment (data bank) is explicitlyor implicitly related to a format declarationresiding in a format library.  The processing mechanicsassociated with data string manipulation is developedin accordance with a generalized data filtering concept.This results in the implementation of a two-partdata filter module that satisfies internal processingfunctions by filtering data strings through formatdeclarations associated with its input and output ports.
1360		Description of Systems Used for Data Transmission* (An ASA Tutorial)	
1361		Rectangular Holes in Twelve-Row PunchedCards* (Proposed American Standard)	
1362		Code Extension in ASCII* (An ASA Tutorial)	The American Standard Code for InformationInterchange (ASCII) contains a number of controlcharacters associated with the principle of code extension,that is, with the representation of informationwhich cannot be directly represented by means of the charactersin the Code.  The manner of use of thesecharacters has not previously been completely described.This paper presents a set of mutually consistentphilosophies regarding code extension applications,and suggests a corollary set of doctrines for theapplication of the code extension characters.  Distinctionsare drawn between code extension and suchother concepts as "graphic substitution" or "syntacticrepresentation" which are often used to meet similarrequirements.  Also covered are certain topics whichare not truly concerned with code extension butwhich are often linked with it in discussion on code applications.The material in this paper is equallyapplicable in principle to the (proposed) ISO international7-bit code for information interchange.
1363	Martin, W. C.;Paulson, K. C.;Sashkin, L.;	A General Method of Systematic Interval Computationfor Numerical Integration of Initial ValueProblems	A procedure is given for continuously computingand monitoring the step size to be used bya self-starting, p-th order numerical integration methodto solve an initial value problem.  The procedureuses an estimate of the truncation error to calculate the step size.
1364	Bellman, R.;Buell, J.;Kalaba, R.;	Mathematical Experimentation in Time-Lag Modulation	Equations of the form du/dt = g(u(t),u(h(t)))arise in a number of scientific contexts.  Theauthors point out some interesting properties of thesolution u'(t) = -u(t-1-k*sin(wt))+sin(at).  Theseproperties were obtained by means of numerical solution.
1365	Tobey, R. G.;	Eliminating Monotonous Mathematics with FORMAC	The FORMAC (FORmula MAnipulation Compiler)programming system provides a powerful tool forperforming mathematical analysis.  It is an extensionof FORTRAN IV which permits the use of the computerto perform the tedious algebraic computations that arisein many different fields.  Among the areas inwhich it has been successfully used are: differentiationof complicated expressions, expansion of truncatedpower series, solution of simultaneous equations withliteral coefficients, nonlinear maximum likelihoodestimation, tensor analysis, and generation of the coefficientsof equations in Keplerian motion.  Thesetypes of analysis-which arose in the solution of specificpractical problems in physics, engineering,astronomy, statistics and astronautics-are discussed inthe paper.  In addition to its usage for specificproblem solutions, FORMAC can also be used to automatethe analysis phase in certain production programming.Several such applications are presented.
1366	Teichroew, D.;Lubin, J. F.;	Computer Simulation-Discussion of theTechnique and Comparison of Languages	The purpose of this paper is to present a comparisonof some computer simulation languagesand of some of the involved in comparing software packagesfor digital computers are discussed in PartI.  The issue is obvious: users of digital computersmust choose from available languages or write theirown.  Substantial costs can occur, particularly in training,implementation and computer time if an inappropriatelanguage is chosen.More and more computer simulationlanguages are being developed: comparisons andevaluations of existing languages are useful for designersand implementers as well as users.  The secondpart is devoted to computer simulation and simulationlanguages.  The computational characteristics ofsimulation are discussed with  special attention beingpaid to a distinction between continuous and discretechange models.  Part III presents a detailed comparisonof six simulation languages and packages: SIMSCRIPT,CLP, CSL, GASP, CPSS and SOL.  The characteristics ofeach are summarized in a series of tables.  Theimplications of this analysis for designers of languages,for users, and for implementers are developed.The conclusion of the paper is that the packages nowavailable for computer simulation offer featureswhich none of the more general-purpose packages do andthat analysis of strengths and weaknesses of eachsuggests ways in which both current and future simulationlanguages and packages can be improved.
1367		Character Structure and Character Parity Sensefor Parallel-by-Bit Data Communication in ASCII*(Proposed American Standard)	
1368	Roberts, S. M.;	Systematic Generation of Hamiltonian Circuits	For a combinatorial matrix which may specifyboth directed and nondirected arcs, the paperdescribes a computer program which generates systematicallyand exhaustively all the Hamiltonian circuits.Specific application is made to the "traveling salesman" problem.
1369	McCamon, R. B.;	Half Rotations in N-Dimensional Euclidean Space	An iterative procedure is described for determininghalf rotations in n-dimensional Euclideanspace. The method is a variant of the cyclic Jacobiprocedure and utilizers elementary plane rotationsto obtain the half rotation matrix.  Numerical examples are given.
1370	Boothroyd, J.;	Linear Equations, Exact Solutions (Algorithm 290 [F4])	
1371	Pike, M. C.;Hill, I. D.;	Logarithm of Gamma Function (Algorithm 291 [S14])	
1372	Bell, M.;Pike, M. C.;	Direct Search (Algorithm 178 [E4])	
1373	Pike, M. C.;Hill, I. D.;	Gamma Function; Gamma Function for Range 1 to2; Reciprocal Gamma Function to Real Argument;Gamma Function; Logarithm of Gamma Function (Algorithms34[S14]; 54[S14]; 80[S14]; 221[S14]; 291[S14])	
1374	Bergson, A.;	Evaluation of Determinant; DeterminantEvaluation (Algorithms 41[F3]; 269[F3])	
1375	Fletcher, R.;	Function Minimization (Algorithm 251 [E4])	
1376	Stern, G.;	Modified Graeffee Method (Algorithm 256 [C2])	
1377	Hansson, L.;	Pseudo-Random Numbers (Algorithm 266 [G5])	
1378	Hill, I. D.;Pike, M. C.;	Pseudo-Random Numbers (Algorithm 266 [G5])	
1379	Abrahams, P. W.;	A Final Solution to the Dangling Else of ALGOL 60 and Related Languages	The dangling else problem consists of a classof potential ambiguities in ALGOL-like conditionalstatements whose basic form is "if B1 then if B2 thenS1 else S2" where B1 and B2 are Boolean expressionsand S1 and S2 are basic statements.  The difficultylies in whether to attach the else to the first ifor to the second one.  Existing solutions to the problemare either ambiguous or unnecessarily restrictive.Let Sand S1 be statements.  We define S to be closedif "S else S1" is not a statement, and to be openif "S else S1" is a statement.  Thus an unconditionalstatement is  a closed statement.  Open and closedconditional statements are defined by syntax equationsin such a way as to preserve openness and closure.In each case, an else must always be preceded by a closedstatement.  It is shown that the syntax equationsare unambiguous, and that may change in the statementtypes required within the syntax equations wouldlead to either ambiguity or unnecessary restriction.
1380	Dahl, O. J.;Nygaard, K.;	SIMULA-an ALGOL-Based Simulation Language	This paper is an introduction to SIMULA, aprogramming language designed to provide a systemsanalyst with unified concepts which facilitate theconcise description of discrete event systems.  Asystem description also serves as a source language simulationprogram.  SIMULA is an extension of ALGOL60 in which the most important new conceptsis that of quasi-parallel processing.
1381	Murray, F. J.;	Impact of Computers on the Undergraduate Mathematics Curriculum	The use of computers to permit the widespread applicationof mathematical ideas requiring computationin science and technology is extremely significant forthe understanding of our current society.  Studentinterest in this development is intense and if properlyutilized should yield a much better understandingof mathematical concepts as well as the ideas of programmingand logical structure which have been introducedinto many fields by the use of computers.  The presentpaper suggests that that portion of the undergraduatemathematical curriculum which is preparation for the useof mathematics by persons who are not professionalmathematicians be modified to include the extensionsand clarifications which are possible because ofcomputers.  An early introduction to programming isdesirable to permit a continuing use of automaticcomputation to illustrate and clarify mathematical concepts.Following the calculus equation stage anintensive introduction to numerical analysis shouldbe added to the current curriculum.  In additionto providing competence in the mostly used computingtechniques, it would permit a more sophisticatedutilization of the advanced mathematical ideas associatedwith complex variables and transform theories.
1382	Macon, N.;	Desired Computer Impact on Undergraduate Mathematics	Three matters relating to the theme of theSymposium are discussed here.  The author examinessome projections concerning the supply and demand formathematicians in the United States through themid-1970s, comments briefly on some of the factors whichmay influence the professional activities ofapplied mathematicians over the next several years,and discusses in broad terms how this informationmay relate to the undergraduate training of mathematicians.
1383	Givens, W.;	Implications of the Digital Computerfor Education In the Mathematical Sciences	The digital computer has profoundly altered thedefinition of what is interesting in mathematics.The importance of applied logic in human affairs ischanged by the existence of the "logical engine."The result is that one should no longer think in termsof a single discipline of mathematics but interms of a complex of mathematical sciences.
1384	Atchison, W. F.;	Mathematics for Undergraduate Computer Scientists	The mathematical requirements for an undergraduateprogram in Computer Science are a subjectof debate.  The Association for Computing Machinery'sCurriculum Committee, however, believes that theserequirements are essentially the same as the mathematicalcontent of physical sciences undergraduateprograms.  The Committee believes that these requirementsshould assure the student of a broad mathematicalbackground and should enable him to take a wide varietyof courses in other scientific disciplines.The Committee's concern is to develop a solidscientific  approach to Computer Science.
1385	Audette, D. G.;	Computer Technology in Communist China, 1956-1965	Based on information from translations of CommunistChinese news items and periodical literaturefor the 1965 period, computer technology in China isreviewed under the following headings: (1) initialplanning, organization and educational aspects of computertechnology and automation; (2) machine developmentprogress: two major specific machines in 1958-59, withSoviet aid; a vacuum in 1960-64 due to the withdrawalof Soviet aid; then presumably all-Chinese-made machinesfrom 1965 to the present; (3) computer applications;(4) the trend of automation: control of production processesrather than data processing; and (5) the"Yun Ch'ou Hsueh" (Science of Operation and Programming)campaign of 1958-60, during which an attemptwas made to bring concepts such as linear programmingto ordinary Chinese workers and peasants.  CommunistChina is adjudged to have a marginal computer capability,with most of its machines probably being ofa binary nature; however, a turning point may have been reached in mid-1965.
1386	Jordan, D. E.;Kain, R. Y.;Clapp, L. C.;	Symbolic Factoring of Polynomials in Several Variables	An algorithm for finding the symbolic factors ofa multi-variate polynomial with integer coefficientsis presented.  The algorithm is an extension of a techniqueused by Kronecker in a proof that the primefactoring of any polynomial may be found in a finite numberof steps.  The algorithm consists of factoringsingle-variable instances of the given polynomial byKronecker's method and introducing the remainingvariables by interpolation.  Techniques for implementing thealgorithm and several examples are discussed.The algorithm promises sufficient power to be used efficientlyin an online system for symbolic mathematics.
1387	Moses, J.;	Solution of Systems of Polynomial Equations By Elimination	The elimination procedure as described by Williamshas been coded in LISP and FORMAC and usedin solving systems of polynomial equations.  It is foundthat the method is very effective in the caseof small systems, where it yields all solutions withoutthe need for initial estimates. The method, byitself, appears in appropriate, however, in the solutionof large systems of equation due to the explosivegrowth in the intermediate equations and the hazardswhich arise when the coefficients are truncated.A comparison is made with difficulties found in otherproblems in non-numerical mathematics such assymbolic integration and simplification.
1388	Ball, W. E.;Berns, R. I.;	AUTOMAST: Automatic Mathematical Analysis and Symbolic Translation	A procedure for numerically solving systemsof ordinary differential equation is shown to alsogenerate symbolic solutions.  The procedure is basedon a finite Taylor series expansion that includesan estimate of the error in the final result.  A computerprogram is described that reads in a systemof such equations and then generates the expansionsfor all of the dependent variables. The expansionsare determined symbolically, hence any non-numeric parametersin the original equations are carried automaticallyinto the final expansions.  Thus the exact influenceof any parameters on the problem solution can beeasily displayed.
1389	Knowlton, K. C.;	A Programmer's Description of L^6	Bell Telephone Laboratories' Low-Linked List LanguageL^6 (pronounced "L-six") is a new programminglanguage for list structure manipulations.  It containsmany of the facilities which underlie such listprocessors as IPL, LISP, COMIT ad SNOBOL, but permitsthe user to get much closer to machine code inorder to write faster-running programs, to use storagemore efficiently and to build a wider varietyof linked data structures.
1390	Guzman, A.;McIntosh, H. V.;	CONVERT	A programming language is described whichis applicable to problems conveniently describedby transformation rules.  By this is meant that patternsmay be prescribed, each being associated witha skeleton, so that a series of such pairs may be searcheduntil a pattern is found which matches anexpression to be transformed.  The conditions for a matchare governed by a code which also allows subexpressionsto be identified and eventually substituted into thecorresponding skeleton.  The primitive patternsand primitive skeletons are described, as well as theprinciple which allow their elaboration in to morecomplicated patterns and skeletons.  The advantages of thelanguage are that it allows one to apply transformationrules to lists and arrays as easily as strings, that bothpatterns and skeletons may be defined recursively,and that as a consequence programs may be stated quite concisely.
1391	Maurer, W. D.;	Computer Experiments in Finite Algebra	A medium-scale programming system is writtenin MAD and FAP on the IBM 7094 to manipulate someof the objects of modern algebra: finite groups, mapsand sets of maps, subsets and sets of subsets,constant integers and truth-values.  Designed to operatein a time-sharing environment, the system canserve as a teacher's aid to the undergraduate student ofmodern algebra, as well as for the working scientistor engineer wishing to familiarize himself with the subset.
1392	Tobey, R. G.;	Experience with FORMAC Algorithm Design	Various facets of the design and implementationof mathematical expression manipulation algorithmsare discussed.  Concrete examples are provided by theFORMAC EXPAND and differentiation algorithms, abasic FORMAC utility routine, and an experiment in theextraction of the skeletal structure of an expression.One recurrent theme is the need to avoid excessiveintermediate expression swell in order to minimizecore storage requirements. Although many details fromthe FORMAC implementation are presented, an attemptis made to stress principles and ideas of general relevancein the design of algorithms for manipulatingmathematical expressions.
1393	Collins, G. E.;	PM, A System for Polynomial Manipulation	PM is an IBM 7094 program system for formal manipulationof polynomials in any number of variables,with integral coefficients unrestricted in size.  Someof the formal operations which can be performedby the system are sums, differences, products, quotients,derivatives, substitutions and greater commondivisors.  PM is based on the REFCO III list processingsystem, which is described and compared withthe LISP and SLIP systems.  The PM subroutines for arithmeticof large integers are described as constitutingan independently useful subsystem.  PM is compared withthe ALPAK system in several respects, includingthe choice of canonical forms for polynomials.  A newalgorithm for polynomial greatest common divisorcalculation is mentioned, and exaples areincluded to illustrate its superiority.
1394	Hearn, A. C.;	Computation of Algebraic Properties of ElementaryParticle Reactions Using a Digital Computer	A large number of calculations in high-energyelementary particle physics involve the manipulationof complicated algebraic expressions containing bothtensor and noncommutative matrix quantities.  Manyof these calculations take several months to complete, althoughthe operations involved follow straightforwardrules.  In this paper a program is described, which hasbeen developed in LISP for solving such problems.The manner in which these problems are encountered isoutlined, and their representation in the computerdiscussed.  At present, about six months of human worktakes less than fifteen minutes on an IBM 7090.Limitations of the present system and future plans are also outlined.
1395	Christensen, C.;	On the Implementation of AMBIT, A Language for Symbol Manipulation	A brief description is given of the implementationtechnique for the replacement rule of theAMBIT programming language.  The algorithm for the "AMBITscan" and an example of its application aregiven.  The algorithm is applicable to other membersof the family of string transformation languagesof which AMBIT is a member, and it provides a rationalefor the design of the AMBIT language.
1396	Sammet, J. E.;	Survey of Formula Manipulation	The field of formula manipulation is surveyed,with particular attention to the specific capabilitiesof differentiation, integration and the supporting capabilitiesof simplification, displays and input/outputediting, and precision arithmetic.  General systems-bothbatch and online-are described.  Finally, someprograms to solve specific applications are discussed.
1397		Proceedings of the ACM Symposium on Symbolic and Algebraic Manipulation	The ACM Symposium on Symbolic and AlgebraicManipulation brought together over four hundredpeople interested in programming languages designedfor manipulation of algebraic formulas and symbolstrings, in their applications, and in algorithms fortheir implementation.  Twenty-eight papers werepresented, followed by a lively panel discussion offuture directions.  Evening meetings were arrangedfor several interest groups.  The conference was sponsoredby the ACM Special Interest Committee on Symbolicand Algebraic Manipulation.  The program committee consistedof Chairman Jean E. Sammet, Paul Abrahams,Thomas E. Cheatham, Max Goldstein, and Douglas Mcllroy.Conference arrangements were made by Lewis C.Clapp, Daniel Bobrow and James H. Griesmer.-Robert W. Floyd, Editor
1398	Sterling, T.;Gleser, M.;Haberman, S.;Pollack, S.;	Robot Data Screening: A Solution to MultivariateType Problems in the Biological and Social Sciences	A new approach is outlined toward the solutionof the type of multivariate problem that isfound usually in the biological and social sciences aswell as in medicine.  This approach uses a "logical"rather than a "statistical" criterion by which variablesare grouped into a deterministic model.  Algorithmare developed by which some variables are kept on forfurther analysis while others are eliminated.Criteria for the acceptance of a variable as well as thetermination of the searching process are derivedfrom information theory.
1399	Kurki-Suonio, R.;	On Top-to-Bottom Recognition and Left Recursion	A procedure is given for obtaining structuraldescriptions in a context-free grammar by performingthe recognition according to a strongly equivalent,left-recursion-freegrammar. The effect of allowingnull strings in the rewriting rules is discussed.
1400	Blum, R. I.;	Free-Text Inputs to Utility Routines	Through the use of some rather simple techniques,it is frequently possible to produce a programwhich will accept free-text inputs.  The techniques arediscussed and related to a general tape manipulationroutine.
1401	Bellman, R., Kagiwada, H.;Kalaba, R.;	Quasilinearization and the Calculation of Eigenvalues	Several eigenvalue problems for systems ofordinary differential equations are considered.They are resolved computationally using the quasilinerizationtechnique, a quadratically convergentsuccessive approximation scheme related tothe Newton-Raphson-Kantorovich method.
1402	Glauz, R. D.;	Partial Step Integration	A partial step integration equation is derivedfor use with the Adams or Adams-Bashforth methodof integration of differential equations.  This methodof obtaining functional values at points intermediateto the integration points yields accuracy comparableto the integration and does not require storingof additional information as in interpolation methods.
1403	Sigillito, V. G.;	A Method for Finding the m Smallest Values ofa Monotonic Function Defined on Ordered Sets ofPositive Integers	The minimum value of a monotonic increasingfunction defined on a partially ordered set S isassumed on the set of minimal points of S.  This observationis used to devise an efficient method forfinding the m smallest functional values of monotonicfunctions defined on ordered pairs of positiveintegers.  The method is easily extended to includemonotonic functions defined on ordered n-tuples.Included is a FORTRAN program which was written to implementthe procedure for a certain important case.
1404	Peng, K. C.;	Computational Aspects of Multiple CovarianceAnalysis on a Multifactor Structure	The computational procedure for the analysisof multiple covariance in statistics is discussedwith reference to the analysis of variance.  A specialoperator calculus developed by Hartly for programminganalysis of variance for multifactor experiments is extendedto cover the analysis of covariance.  Thisextension is accomplished by utilizing the connectionbetween the analysis of covariance and the analysisof variance and by introducing a new operator.  Theresults are illustrated by a numerical example foranalysis of covariance, in which the basic computationsare shown to be carried out by an analysis-of-varianceprogram.
1405	Blankinship, W. A.;	Matrix Triangulation with Integer Arithmetic (Algorithm 287 [F1])	
1406	Blankinship, W. A.;	Solution of simultaneous Linear DiophantineEquations (Algorithm 288 [F4])	
1407	Hill, I. D.;Pike, M. C.;	Confidence Interval for a Ratio (Algorithm 289 [G1])	
1408	Weingarten, A.;	The Eschenbach Drum Scheme	The prime function of a drum, operating inreal time, is to perform accesses quickly.  Theusual means for increasing this capacity is to incorporateengineering or hardware improvements.  Inthis paper the problem is attacked not by changing thedrum, but rather by modifying the manner in whichit operates.  At the outset, a drum is given a functionaldefinition.  Then a simple design scheme (Eschenbach)is introduced which enormously increases the rate ofaccessing for drums so defined.  This is shown toenable a system to perform a job by employing fewer orless expensive drums.  It is suggested that althoughthe design scheme has a specific use, the method underlying ithas more general applicability.  The questionof the efficacy of the drum scheme is then raised.  Todeal with this, a standard of efficiency is developedin light of realistic real-time circumstances.  The drumscheme is then modelled in a manner which permitsit to be analyzed as a problem in queueing theory.Thus one is enabled to ascertain whether the drumscheme is efficient enough for its application.  Again,whereas the analysis of the drum scheme has aspecific use, the methods underlying it have more general applicability.
1409	Boles, J. A.;Rux, P. T.;Weingarten Jr., F. W.;	NEBULA: A Digital Computer Using a 20 Mc Glass Delay Line Memory	Oregon State University has designed and constructeda medium-speed serial digital computerusing glass delay lines circulating at 22 Mc as memory.The design objectives as originally conceivedin a special seminar were: (1) to be a research projectin computer design; (2) to be usable as an educationalmachine;and (3) to have easily modifiable hardware forbasic research in computer systems design.  Anunusual arrangement of information within the 22 Mcmemory allows a simple interface with the 340 Kcarithmetic unit, which results in an effective zero latencytime and provides possibilities for an associativememory.  The arithmetic unit has a command structure similarto large parallel machines, and uses flip-floparithmetic and control registers throughout.  All hardwaredevelopment has been aimed toward the conceptof easy modification, elaborate console controls foreffective man-machine interaction and low cost.
1410	Coffman, E. G.;Wood, R. C.;	Interarrival Statistics for Time Sharing Systems	The optimization of time-shared system performancerequires the description of the stochasticprocesses governing the user inputs and the program activity.This paper provides a statistical descriptionof the user input process in the SDC-ARPA general-purposeTime-Sharing System (TSS).  The input processis assumed to be stationary, and to be defined by theinterarrival time distribution.  The data obtainedappear to justify satisfactorily the common assumptionthat the interarrival times are serially independent.The data do not appear to justify, except as a veryrough approximation, the usual assumption off anexponential distribution for interarrival time.  A muchmore satisfactory approximation to the data canbe obtained with a biphase or triphase hyperexponential distribution.
1411	Neely, P. M.;	Comparison of Several Algorithms for Computationof Means, Standard Deviations and CorrelationCoefficients	Several algorithms for computation of basicstatistics are compared by their performance onsystematically generated test data.  The statisticscalculated were the mean, standard deviation andcorrelation coefficient.  For each statistic, the algorithmincluded the usual computing formulas, correctiondue to an accumulated error term, and a recursive computationof the current value of the statistic.The usual computing formulas were also evaluated indouble precision.  Large errors were noted for somecalculation using the usual computing formulas.  The mostreliable technique was correction of the initialestimate by use of an accumulated error term.  To eliminatethe need for making two passes on the data,it was suggested that the initial estimate of themean be obtained from a subset of the data.
1412	Head, R. V.;	The Banking Information System Concept	Most large commercial banks have progressed tothe  point where their major accounting applicationshave been automated and more sophisticated usage ofdata processing equipment is being sought.  This,coupled with the availability of equipment well suitedto real-time, direct access processing,has ledto development within some banks of the central fileof data base approach toward a banking informationsystem.  The banking information system now serves thetwo-fold purpose of providing real-time responsesto inquires about individual account stasus and providingmore complex combinations of information formanagement use.  Both kinds of processing draw upon acommon store of data contained in the direct accesscentral file.  This data base includes indexes whichfacilitate cross referencing of account informationso that all relationships between bank and customer maybe discerned.  In introducing the banking informationsystem concept, a gradual approach to account cross-referencingand file conversion is most prudent.Generally, this system must interface with other computerapplications already existing within the bank.
1413	Oettinger, A. G.;	A Vision of Technology and Education	Educational technology is currently quitefashionable.  Here, as in many other branches oraspects of technology, changes possible in the next generationor two are now known as ideas, discoveriesor inventions.  The unknown is whether the potentialwill become the actual and, if so, on what timescale.  This ignorance stems largely from ignorance aboutthe social response to potential technologicalchange.  The object of this paper is to present a visionof potential educational technology and to raisequestions about the modes of social response andadaptation likely to be evoked by such a vision.
1414		Twelve-Row Punched-Card Code for InformationInterchange* (Proposed American Standard)	
1415	Carmody, B. T;Jones Jr., P. E.;	Automatic Derivation of Microsentences	The decomposition of long complex English sentencesinto shorter kernel-like constituent sentences(microsentences)has often been suggested as an avenuetoward conducting automatic retrieval of naturallanguage messages.  To explore the prospects of sucha step, the authors attempted in 1963 to preparea general program for deriving microsentences from longersentences that had been syntactically analyzedby the Harvard Multipath Analysis Program.  The basicidea was to extract the subject, verb and object(if any) of each clause and to reassemble these materialsinto a grammatical microsentence.  A programis described in this paper, which was designed to operateon the tree structure output of the analyzer,and the microsentences that were produced are exhibited.The authors conclude that while microsentencesof the quality achieved do not open up immediate prospectsfor improving the performance of automaticmessage retrieval systems, they may have practicalvalue in man-machine systems using human monitorsto select the preferred syntactic interpretation of a sentence.
1416	Cleary, J. G.;	A Fortran Technique for Simplifying Input to Report Generators	Typical report generators allow the productionof standard forms when tabulating a magnetictape file; the extraction of nonstandard sets of information,with suitable annotation, involves troublesomeforms design.  A method of information extraction involvingthe calculation of suitable FORTRAN FORMATstatements, which combats this problem, is described.
1417	Solomon Jr., M. B.;	Economies of Scale and the IBM System/360	Cost functions among five System/360 modelsare analyzed through examinations of instructiontimes, program kernels and a "typical" instruction mix.Comparisons are made between the data developedhere and Grosch's Law which seems to be applicable tomuch of the data.  Sizable economies of scale areunquestionably present in computing equipment.
1418	Peck, J. E. L.;Williams, M. R.;	Examination Scheduling (Algorithm 286 [ZH])	
1419	Hopgood, F. R. A.;Litherland, C.;	Chebyshev Quadrature (Algorithm 279 [D1])	
1420	Hutchinson, D. W.;	A New Uniform Pseudorandom Number Generator	A new multiplicative congruential pseudorandomnumber generator is discussed, in which themodulus is the largest prime within accumulator capacityand the multiplier is a primitive root of thatprime.  This generator passes the usual statisticaltests and in addition the least significant bitsappear to be as random as the most significant bits-aproperty which generators having modulus 2^k donot possess.
1421	Wirth, N.;Hoare, C. A. R.;	A Contribution to the Development of ALGOL	A programming language similar in many respectsto ALGOL 60, but incorporating a large numberof improvements based on six years experience with thatlanguage, is described in detail.  Part I consistsof an introduction to the new language and a summaryof the changes made to ALGOL 60, together with adiscussion of the motives behind there visions.  Part IIis a rigorous definition of the proposed language.Part III describes a set of proposed standard proceduresto be used with the language, including facilitiesfor input/output.
1422		Eleven-Sixteenths Inch PerforatedPaper Tape (Proposed American Standard)	
1423	Rust, R.;Burrus, W. R.;Schneeberger, C.;	A Simple Algorithm for Computing the Generalized Inverse of a Matrix	The generalized inverse of a matrix is importantin analysis because it provides an extensionof the concept of an inverse which applies to all matrices.It also has many applications in numericalanalysis, but it is not widely used because the existingalgorithms are fairly complicated and requireconsiderable storage space.  A simple extension hasbeen found to the conventional orthogonalizationmethod for inverting non-singular matrices, which givesthe generalized inverse with little extra effortand with no additional storage requirements.  The algorithmgives the generalized inverse for any m byn matrix A, including the special case when m+n and Ais non-singular and the case when m>n and rank(A)= n.  In the first case the algorithm gives the ordinaryinverse of A.  In the second case the algorithmyields the ordinary least squares transformation matrixINV(A'A)A' and has the advantage of avoidingthe loss of significance which results in forming the product A'A explicitly.
1424	Shalla, L.;	Automatic Analysis of Electronic Digital Circuits Using List Processing	A mapping from black diagrams of digital circuitsto list structures is described, togetherwith a list processing program written for the ControlData 3600 which uses this mapping to automaticallycarry out circuit analysis.
1425	Bohm, C.;Jacopini, G.;	Flow Diagrams, Turing Machines AndLanguages With Only Two Formation Rules	In the first part of the paper, flow diagramsare introduced to represent inter al. mappingsof a set into itself.  Although not every diagram isdecomposable into a finite number of given basediagrams, this becomes true at a semantical level dueto a suitable extension of the given set and ofthe basic mappings defined in it.  Two normalizationmethods of flow diagrams are given.  The first hasthree base diagrams; the second, only two.  In the secondpart of the paper, the second method is appliedto the theory of Turing machines.  With every Turingmachine provided with a two-way half-tape, thereis associated a similar machine, doing essentiallythe same job, but working on a tape obtained fromthe first one by interspersing alternate blank squares.The new machine belongs to the family, elsewhereintroduced, generated by composition and iteration fromthe two machines L and R.  That family is a propersubfamily of the whole family of Turing machines.
1426	Smith, W. G.;Solomon Jr., M. B.;	A Simulation of Hospital Admission Policy	A study is described which simulates differentadmission policies of a large specialized hospital.The objective is to determine better policies forstabilization of admission and census rates whilemaintaining a reasonably full hospital.  There types ofpolicies were examined: admission based on percentagesof discharge rates, discharge rates plus or minus aconstant, and fixed authorizations independent ofdischarge rates.  The last type policy produced more stablesimulated results, and when put into practice,improvements were realized.
1427	Pizer, S. M.;	Simulation of Radioisotope Scans by Computer	In radioisotope scanning, a field which is assumingincreasing importance in medical diagnosis,the scan is a two-dimensional pattern made up of dots.Areas of increased source activity are representedon the scan by areas of increased dot density.  To studythe output of scanners with various characteristics,a program which simulates radioisotope scans has beenwritten  for a PDP-1 computer with auxiliary diskstorage and cathode ray tube display.  Past and presentresearch using the output of the simulator hasshown the flexibility of the system to be important.The structure of this program can be useful inthe simulation of the output of any quantum-limited system.
1428	Rockwell Jr., M. A.;Shubin, H.;Weil, M. H.;Meagher, P. F.;	SHOCK III, A Computer System As an Aidin the Management of Critically III Patients	SHOCK III, an online digital computer systemto assist the physician, nurse and paramedicalpersonnel in monitoring and reporting on critically ill patients, is described.
1429	Lions, J.;	Matrix Reduction Using the Hungarian MethodFor The Generation of School Timetables	The application of Kuhn's Hungarian Methodto the problem of matrix reduction as needed inGotlieb's method for timetable generation is described.The method is suited to both hand and computercalculation.  Devices to improve the efficiencyof the basic algorithm are discussed.
1430	Mancino, O. G.;	Multiple Precision Floating-Point Conversionfrom Decimal-to-Binary and Vice Versa	Decimal-to-binary and binary-to-decimal floating-pointconversion is often performed by usinga table of the powers 10^i, (ia positive integer) forconverting from base 10 to base 2, and by usinga table of the coefficient of a polynomial approximationof 10^x, (0<=x<1) for converting from base 2to base 10.  These tables occupy a large storage regionin the case of a nonsingle precision conversion.This paper shows that a single small table sufficesfor a floating-point conversion from decimal tobinary, and vice versa, in any useful precision.
1431	Deuel, P.;	On a Storage Mapping Function For Data Structures	Some basic facts about certain data structuresare reviewed and an efficient algorithm is presentedfor constructing a storage mapping function fora structure from the structure's definition.
1432	Cohn, C. E.;	Incorporation of Nonstandard Input/Output Devices into FORTRAN Systems	A FORTRAN system may readily be modified tohandle input/output with nonstandard media on thesame basis on which it handles the standard media.  Thisis done by providing a character-handling subroutinesuited to the nonstandard medium and arranged to be calledby an otherwise unused output statement typeor unit number. This method was used to control outputof alphanumeric information on a digital graphplotter.
1433	Roes, P. B. M.;	A Note on Linear Programming Algorithm Design: A Combinatorial Problem	As linear programming models grow bigger andbigger in size, much actual data that must bememorized is often put on magnetic tape or disk, andconsequently there is an improportionality fastrise in the consumption of computer time.To cut downthis expense, an ever increasing effort is madeto design more efficient algorithms.  This paper ismeant to support the effort.  It is attempted tofind some characteristics of the way a pivot columnis found.  The number of repetitions of a certaintransfer of data from tape to core memory is considered.After some simplification, the problem is restatedin a general way.  The generating function of the probabilitydistribution and the moment generatingfunction of the number of repetitions is found.  Asymptoticformulas are given for the moments usinga result from a paper of S. Narumi [1].  The resultsmay be applied to write very efficient routinesthat search for an extreme value in a table.  Formulasprovide a means of calculating the computer timingsin this case.
1434	Macon, N.;Walker, E. E.;	A Monte Carlo Algorithm for Assigning Students to Classes	A technique of random choice is illustratedby application to the problem of assigning studentsto a fixed schedule of courses.  Using the techniqueit is possible to reduce or eliminate difficultiesthat result when a popular section is filled and closedbefore all students requesting and requiringit have been scheduled.  The effectiveness of automaticscheduling is retained without loss of the studentsprivilege of picking favorite instructors.
1435	Burdick, D. S.;Naylor, T. H.;	Design of Computer Simulation Experiments for Industrial Systems	The aim of this paper is to provide backgroundinformation on the existing literature on experimentaldesign techniques which may be applicable to the designof computer simulation experiments for industrialsystems.  Although major emphasis is placed on analysisof variance techniques, three other techniquesof data analysis are considered-multiple ranking procedures,sequential sampling and spectral analysis.The paper treats four specific experimental designproblems and several techniques for solving them.The four experimental design problems are: (1) theproblem of stochastic convergence, (2) the problemof factor selection, (3) the problem of motiveand (4) the many response problem.
1436	Fletcher, W.;	Interchange of Two Blocks of Data (Algorithm 284 [K2])	
1437	Aird, T. J.;	The Mutual Primal-Dual Method (Algorithm 285 [H])	
1438	Cain Jr., G. L.;	A Method for Locating Zeros of Complex Functions	A method for computing the index, or windingnumber, is developed and applied to the problemof finding zeros of functions from the plane into the plane.
1439	Simonsen, R. H.;Anketell, D. L.;	Mechanization of the Curve Fitting Process: DATAN	A process for fitting a curve to approximate dataand the problem it creates for the engineer-programmeris defined.  An approach has also been defined and a systemhas been written for the SRU 1107 to mechanizea major portion of this process.  The techniques developedto accomplish the mechanization are largelyempirical, and are dependent for their informationonly on the actual data points.
1440	Fike, C. T.;	Starting Approximations for Square Root Calculation on IBM System/360	Several starting approximations for squareroot calculation by Newton's method are presentedin a form to facilitate their use in IBM System/360 squareroot routines.  These approximations includeseveral for the range [1/16, 1], which is the intervalof primary interest on IBM System/360.
1441	Waters, J.;	Methods of Numerical Integration Applied toa System Having Trivial Function Evaluations	A study has been made to determine which methodsof numerical integration require the leastcomputation time for a given amount of truncation errorwhen applied to a particular system of ordinarydifferential equations where function evaluations arerelatively trivial.  Recent methods due to Butcherand Gear are compared with classic Runge-Kutta, Kutta-Nystromand Adams methods.  Some of the newer one-stepmethods due to Butcher are found to be slightly superior,but no one method is found to have any greatadvantage over the others in the application to this particular problem.
1442		Recorded Magnetic Tape For Information Interchange(800 CPI, NRZI)* (Proposed American Standard)	
1443	Royston, R. J.;Gregory, J.;	A Method for Finding the Least Squares Estimateof the Intersection Point of Two Helices in Space	When the helical trajectories of two chargedparticles moving away from a common point in amagnetic field are reconstructed from measurements onthe tracks, the reconstructed tracks are perturbedby measurement and other errors and do not, in general,intersect.  A method is given for adjusting thereconstructed tracks in a least squares manner so that they do intersect.
1444	Reeves, C. M.;	An Algorithm for Generating Projective ReductionFormulas for Matrix Elements of Many-ElectronWavefunctions	An ALGOL procedure is given for automaticallygenerating formulas for matrix elements arisingin the variational solution of the Schrodingerequation for many-electron systems.
1445	Sterling, T. D.;Pollack, S. V.;	Use of the Computer to Teach Introductory Statistics	It has always been obvious that the aid to calculationoffered by the computer forces a changein the curricula of mathematics, statistics, physics,engineering and other courses.  Not so obviousare the many pedagogic aids the computer can offer inteaching the subject matter.  The possibilitiesof giving the student a better technical as well as conceptualunderstanding of statistics were exploredfor a number of years at the College of Medicine ofthe University of Cincinnati and are reported here.
1446	Hopgood, F. R. A.;Litherland, C.;	Chebyshev Quadrature (Algorithm 279 [D1])	
1447	Welsch, J. H.;	Abscissas and Weights for Gregory Quadrature [D1])	
1448	Welsch, J. H.;	Abscissas and Weights for Romberg Quadrature (Algorithm 281 [D1])	
1449	Gautschi, W.;	Derivatives (Algorithm 282 [S22])	
1450	Kerner, I. O.;	Simultaneous Displacement of PolynomialRoots if Real and Simple (Algorithm 283 [C2])	
1451	Thacher Jr., H. C.;	Runge-Kutta Integration (Algorithm 9 [D2])	
1452	Bayer, G.;	Kutta-Merson (Algorithm 218 [D2]	
1453	Carr III, J. W.;Weiland, J.;	A Nonrecursive Method of Syntax Specification	The use of the Kleene regular expression notationfor describing algebraic language syntax,in particular of ALGOL, is described in this paper.A FORTRAN II computer program for carrying out theelimination algorithm of Gorn,similar to Gaussian eliminationfor linear systems of algebraic equations,is described.  This was applied to numerous smallerlanguages, including some sublanguage of ALGOL.A hand calculation result of the application of the algorithmto all of ALGOL is given, thus expressingthe Revised ALGOL 1960 syntax in completely nonrecursiveterms, as far as its context-free portion isconcerned.  This description in many ways is far moreintuitively understood than the previous recursivedescription, it is suggested.  The paper also includesresults of the machine program, which does notinclude a simplification algorithm.
1454	Scheff, B. H.;	A Simple User-Oriented Compiler Source Languagefor Programming Automatic Test Equipment	For the nonprogrammer, difficulty in usinga language increases rapidly with the number ofnonproblem-oriented conventions.  A simple language, evenif inelegant, which considers the user's backgroundas part of the problem may be more effective than a sourcelanguage containing subtle and more powerfulcapabilities.  The language described in this paper isused to write computer programs which test electronicequipment.  Because this testing process contains fewcomplex ideas, there is little need for the eleganceand redundancy of a highly syntax-oriented language.A simple and direct language will suffice for theproblem.  The eventual users of this language are militarydepot personnel who cannot he expected tohave computer programming skill or significant programmingtraining.  For this nonprogramming-orienteduser, it was essential to create a language using familiarengineering statements; programming-orientedconventions would have unnecessarily complicated his task.
1455	Mooers, C. N.;	TRAC, A Procedure-Describing Language for the Reactive Typewriter	A description of the TRAC (Text ReckoningAnd Compiling) language and processing algorithmis given.  The TRAC language was developed as the basisof a software package for the reactive typewriter.In the TRAC language, one can write procedures foraccepting, naming and storing any character stringfrom the typewriter; for modifying any string in any way;for treating any string at any time as an executableprocedure, or as a name, or as text; and for printingout any string.  The TRAC language is based uponan extension and generalization to character stringsof the programming concept of the "macro."  Throughthe ability of TRAC to accept and store definitions ofprocedures, the capabilities of the language canbe indefinitely extended, and can deal with characterstrings, integers and Boolean vector variables.
1456	Simmons, R. F.;	Storage and Retrieval of Aspects of Meaning in Directed Graph Structures	An experimental system that uses LISP to makea conceptual dictionary is described.  The dictionaryassociates with each English word the syntactic information,definitional material, and references tothe contexts in which it has been used to define other words.Such relations as class inclusion, possession,and active or passive actions are used as definitionalmaterial.  The resulting structure serves as apowerful vehicle for research on the logic of question answering.Examples of methods of inputting informationand answering simple English questions are given.  Animportant conclusion is that, although LISP andother list processing languages are ideally suited forproducing complex associative structures, theyare inadequate vehicles for language processing on anylarge scale-at east until they can use auxiliarymemory as a continuous extension of core memory.
1457	Salton, G.;	Data Manipulation and Programming Problemsin Automatic Information Retrieval	Automatic information retrieval programs requirethe manipulation of a variety of differentdata structures, including linear text, sparse matrices,and tree or list structures.  The main datamanipulations to be performed in automatic informationsystems are first briefly reviewed.  A varietyof data representations which have been used to describestructured information are then examined, andthe characteristics of various processing languages areoutlined in the light of the procedures requiringimplementation.  Advantages of these programming languagesfor the retrieval application are examined,and suggestions are made for the design of programmingfacilities to aid in information retrieval.
1458	Schwartz, J. I.;	Online Programming	When the transition has been made from off lineto online programming, there are a number ofchanges in the working conditions noted.  These changesin the environment make necessary correspondingchanges in the processes related to producing and checkingout programs.  In the main, it it not theprogramming language itself which must be changed toprovide a facility for the online user; it is thesystem surrounding the programming language.  In thispaper the online environment and its effect onprogramming are discussed.
1459	Opler, A.;	Requirements for Real-Time Languages	Real-time languages have different requirementsfrom other programming languages because ofthe special nature of their applications, the environmentin which their object programs are executedand the environment in which they may be compiled.  Itmay not be the language extensions that ultimatelyadvance developments in the field.  Progress may be madeby attacking the special compiling and executingsystem problems that must be solved.
1460	Ferguson, D. E.;	Evolution of the Meta-Assembly Program	A generalized assembler called a "meta-assembler"is described.  The meta-assembler is definedand factors which contributed to its evolution are presented.How a meta-assembler is made to functionas an assembly program is described. Finally, the implicationof meta-assemblers on compiler design isdiscussed.
1461		Discussion Summary on Operating Systems	
1462	Orchard-Hays, W.;	Multilevel Operating Systems	The Basic software for all newer computersis built on the well-established need for standardoperating systems. This implies that all applications-nomatter how large, complex or time consuming-mustoperate under (or, more precisely, on top of) the standardsystem.  Large applications require supervisorymonitors which handle problems similar to those ofthe operating systems, but at a different level.Sometimes, still a third or even a fourth such levelis required or desirable.  This leads naturallyto the concept of multilevel systems-similar vertically,but different horizontally.  Proper divisionof responsibility between levels leads to greater efficiency andless logical complexity, while actuallyenhancing capability.
1463	Leonard, G. F.;Goodroe, J. R.;	More on Extensible Machines	One of the most salient characteristics of extensiblemachines (EM) is the facility for providingsystem control over program-to-program and program-to-datalinkage (e.g., address connection).  It isthe intent of this paper to expand and clarify the remarksconcerning program-to-program and program-to-datalinkage that were embodied in the authors' previouspaper on the EM concepts, and to, finally, tracethe employment of linkage mechanisms throughvarious levels of programming languages.
1464	Boussard, J. C.;	An ALGOL Compiler: Construction and Usein Relation to an Elaborate Operating System	An ALGOL translator has been prepared and integratedinto the IBSYS Operating System.  Assemblyand "go" features of IBSYS permit immediate execution withoptional listings, decks and debugging information.Using the chain feature of IBSYS, links written inMAP or FORTRAN as well as ALGOL may be called bythe ALGOL main program.  In addition, procedures codedin MAP may be included in any ALGOL program.Although assembly plus loading time exceeds compilationtime, the total time is satisfactory and theuser gets ease and facility which are fully compensating.
1465	Naur, P.;	Program Translation Viewed as a General Data Processing Problem	Efficiency dictates that the overall effectivenessof a compiler be increased by all meansavailable.  For a compiler to have a substantial usefullife it needs a clear logical structure, reliabilityand sound data processing techniques.  A compiler mustbe based on fixed conventions to preserve efficiencyand reliability; empty options and default conventionsviolate this dictum.  Use of structure to associatevarious parts of a program and economy offeatures promote clarity and reliability.
1466		Discussion Summary on Graphical Languages	
1467	Roberts, L. G.;	A Graphical ServiceSystem With Variable Syntax	Man-machine interaction in many fields of endeavorshould be greatly facilitated in the nearfuture through the use of interactive graphical languages.To provide a variety of display scope communicationprocedures, a Graphic Service system which functionsas a generalized graphical language translator,is being developed to aid the definition aswell as the use of new graphical languages.
1468	Narasimhan, R.;	Syntax-Directed Interpretation of Classes of Pictures	A descriptive scheme for classes of pictures basedon labeling techniques using parallel processingalgorithms was proposed by the author some years ago.Since then much work has been done in applyingthis to bubble chamber pictures.  The parallel processingsimulator, originally written for an IBM 7094system, has now been rewritten for a CDC 3600 system.This paper descriptive models by considering theirspecific application to bubble chamber pictures.  Howthe description generated in this phase can beembedded in a larger "conversation" program is explainedby means of a certain specific example thathas been worked out.  A partial generative grammar for"handwritten" English letters is given, as arealso a few computer-generated outputs using this grammarand the parallel processing simulator mentionedearlier.
1469	Landin, P. J.;	The Next 700 Programming Languages	A family of unimplemented computing languagesis described that is intended to span differencesof application area by a unified framework.  This frameworkdictates the rules about the uses of user-coinednames, and the conventions about characterizing functionalrelationships.  Within this framework thedesign of a specific language splits into two independentparts.  One is the choice of written appearancesof programs (or more generally, their physical representation).The other is the choice of the abstractentities (such as numbers, character-strings, listsof them, functional relations among them) that canbe referred to in the language.  The system is biasedtowards "expressions" rather than "statements."It includes a nonprocedural(purely functional) subsystemthat aims to expand the class of users' needsthat can be met by a single print-instruction, without sacrificingthe important properties that makeconventional right-hand-side expressions easy to construct and understand.
1470	Raphael, B.;	The Structure of Programming Languages	The following are identified as major componentsof every programming language: (1) the elementaryprogram statement, (2) mechanisms for linking elementarystatements together, (3) the means by whicha program can obtain data inputs.  Several alternativeforms of each of these components are described,compared and evaluated.  Many examples, frequently fromlist processing languages, illustrate the formsdescribed.  Elementary program statements usually takethe form of commands, requirements, or implicitspecifications.  A command is an imperative statementthat commands the action to be taken.  A requirementdescribes the effect to be achieved without saying anythingabout the actions to be taken.  An implicitspecification is similar to a requirement, but the programmermust understand what actions will be takento achieve the desired effect.  Subroutines may be enteredexplicitly, by execute call, or by functioncomposition.  Explicitly called subroutines generallyrequire special linkage conventions.  An executesubroutine call is syntactically indistinguishable froma basic instruction of the programming language.Function composition is a convenient alternative tothe explicit call.  The three principal ways ofgetting inputs for routines are (1) by referring tothe data itself, (2) by referring to the data bya "name", and (3) by referring to it implicitly by meansof variables or functions.  Names are usefulentry points into permanent data structures, but canbe error-causing distractions in other contexts.The author discusses advantages, disadvantages, and factorsinfluencing the choice of a form of componentfor a language.   He concludes by suggesting the evolutionof programming languages toward one whichwill permit all the most convenient ways of structuringprograms, organizing systems, and referencingdata.
1471	Dennis,J. B.;VanHorn, E. C.;	Programming Semantics for Multiprogrammed computations	The semantics are defined for a number of meta-instructionswhich perform operation essentialto the writing of programs in multiprogrammed computersystems.  These meta-instructions relate to parallelprocessing, protection of separate computations, programdebugging, and the sharing among users of memorysegments and other computing objects, the names of whichare hierarchically structured.  The languagesophistication contemplated is midway between an assemblylanguage and an advanced algebraic language.
1472	Lynch, W.C.;	Description of a High Capacity, FastTurnaround University Computing Center	The operating system for the UNIVAC 1107 at CaseInstitute is reviewed.  The system is of interestbecause of the low turnaround times achieved, the highthroughput achieved and the lack of an operatingstaff.  Turnaround times below 5 minutes and job volumeabove 75,000 per quarter year one reported.
1473	Karim, A. I. A.;	The Stability of the Fourth Order Runge-KuttaMethod for the Solution of Systems of DifferentialEquations	The problem of the region of stability of thefourth order-Runge-Kutta method for the solutionof systems of differential equations is studied.  Thisregion can be characterized by means of lineartransformation but can not be given in a closed form.In the paper, this region is determined by theelectronic digital computer Z22.
1474	Hull, T. E.;Swenson, J. R.;	Tests of Probabilistic Models for Propagation of Roundoff Errors	In any prolonged computation it is generallyassumed that the accumulated effect of roundofferrors is in some sense statistical.  The purpose of thispaper is to give precise descriptions of certainprobabilistic models for roundoff error, and then todescribe a series of experiments for testing thevalidity of these models.  It is concluded that the modelsare in general very good.  Discrepancies areboth rare and mild.  The test techniques can also beused to experiment with various types of specialarithmetic.
1475	Head, R. V.;	Dribble Posting a Master File	Many business applications employ sequentialmagnetic tape rather than random-access storagetechniques to process a very small number of transactionsagainst a voluminous master file.  In suchsituations, it may prove economical to avoid creating anew master file during each updating run by producinginstead a dribble ledger containing only those masterfile accounts which have experienced activity.
1476		Control Procedures for Data Communication-An ASA Progress Report	Sectional Committee X.3 of the American StandardsAssociation, has charged one of its taskgroups, X3.3.4, with the responsibility to "Define and specifyfunctional control requirements and characteristicsgoverning the operation of digital data generating andreceiving systems interconnected by communicationsystem."  This effort is primarily directed toward systemsemploying the American Standard Code for InformationInterchange (ASCII).  This paper represents a progressreport on the work of this group toward a proposalfor national and international standardization in thefield of control procedures.  It describes boththe old and new work of the task group.  The new workis presented in detail, while the work that hasbeen presented in earlier papers ["Control Procedures forData Communication," Task Group document X3.3.4/44,May 1964: "Transparent-Mode Control Procedures for DataCommunication," Task Group document X3.3.4/58,December, 1964: Comm. ACM 8 (Apr. 1965), 203-206; "ControlProcedures for Data Communications," TaskGroup document X3.3.4/60, March, 1965] is retained herein summary form.  Many of the concepts and principlesdescribed herein have been submitted to the InternationalOrganization for Standardization via earlierpapers and are now embodied in working papers of that organization.
1477	Wirth, N.;Weber, H.;	EULER: A Generalization of ALGOL, and its Formal Definition: Part II*	
1478	Deily, G. R.;	Exponential Curve Fit (Algorithm 275 [E2])	
1479	Deily, G. R.;	Constrained Exponential Curve Fit (Algorithm 276 [E2])	
1480	Smith, L. B.;	Computation of Chebyshev Series Coefficients (Algorithm 277[C6])	
1481	Lloyd, P.;	Graph Plotter (Algorithm 278 [J6])	
1482	Ledley, R. S.;Jacobsen, J.;Belson, M.;	BUGSYS: A Programming System for Picture Processing-Not for Debugging	BUGSYS is a picture processing and measuringsystem that depends upon a pictorial input tothe computer's memory.  BUGSYS can be used for manytypes of applications.  In particular, the authorshave used the system for the analysis of linear graphs.The main concept of the system is the use ofa collection of programmable pointers, whichare visualized as a family of "bugs."
1483	Wright, D. L.;	A Comparison of the FORTRAN LanguageImplementation for Several Computers	A feature-by-feature comparison is made of fivedifferent implementations of FORTRAN IV representingthree different manufacturers.  A table is constructedshowing, where possible, the use of each featurein each implementation.  Only those items which aredifferent from, or have been added to FORTRAN IIare shown.
1484	Parnas, D. L.;	A Language for Describing the Functions of Synchronous Systems*	Before the design of a system is started, theexact function desired of it should be specified.It is suggested that a computer-oriented language beused for this purpose.  The inadequacies of thestandard programming languages for the description ofsystems are discussed, and a dialect of ALGOL whichis suitable for describing synchronous systems is introduced.These descriptions can be used for simulationand automatic design of the system described, inaddition to communicating system specifications.
1485	Raphael, B.;	The Structure of Programming Languages	In this paper the major components of everyprogramming language are identified as: (1) theelementary program statement, (2) mechanisms for linkingelementary statements together, (3) the meansby which a program can obtain data inputs.  Severalalternative forms of each of these components arealso described, compared and evaluated.  Many examples,frequently from list processing languages, illustratethe forms described.  The advantages, disadvantages andfactors influencing the choice of a form of componentfor a language are discussed, and the paper concludeswith the suggestion that programming languagesevolve toward one which will permit all the most convenientways of structuring programs, organizingsystems and referencing data.
1486	Burge, W. H.;	A Reprogramming Machine	In this paper a description is given of a modelprogramming system which is directed by a programminglanguage and has a library for storing the user's items.Rules are given for transforming programs writtenin the language and for rearranging the items in thelibrary so that they share their common parts.Some speculations are made about how the mechanicaldetection of common parts or patterns of libraryitems could help a user to solve his problems, and aboutthe relationships between the behavior of thereprogramming machine and human intelligent behavior.
1487	Weizenbaum, J.;	ELIZA-A Computer Program For the Study ofNaturalLanguage Communication Between Man And Machine	ELIZA is a program operating within the MACtime-sharing system at MIT which makes certainkinds of natural language conversation between man andcomputer possible.  Input sentences are analyzedon the basis of decomposition rules which are triggeredby key words appearing in the input text.  Responsesare generated by reassembly rules associated with selecteddecomposition rules.  the fundamental technicalproblems with which ELIZA is concerned are: (1)theidentification of key words, (2) the discovery ofminimal context, (3) the choice of appropriate transformations,(4) generation of responses in the absenceof key words, and (5) the provision of an editing capabilityfor ELIZA "scripts".  A discussion of somepsychological issues relevant to the ELIZA approach aswell as of future developments concludes the paper.
1488	Veinott, C. G.;	Programming Decision Tables in FORTRAN, COBOL or ALGOL	A simple broad-based approach for programmingdecision tables in FORTRAN or COBOL is developedand presented.  With inputs in standard form, as definedin the paper, the programming of any decisiontable can be done with one or two FORTRAN statements,or with two COBOL statements, if the COMPUTE verbis available in the COBOL processor.  It is  shownthat the method is applicable even when there aremore than two mutually exclusive states of one, two ormore table conditions.  It is further shown thatmulti-state conditions in decision tables can oftensimplify the programming.  The method outlined hasthe further advantage that all possible combinationsof conditions are considered.  It is shown thatthe suggested procedure is easily implemented in ALGOL.
1489	Fisher, D. L.;	Data, Documentation and Decision Tables	In business data processing systems, it isnecessary to be able to define and document data,files, programs and decision rules in a way that adequatelyrepresents both (1) their changing informationcontent, and (2) their continuous interaction.  Tabulardescription makes this possible, being notablyobjective, through and economical in cost and time whensystems must be analyzed and programs preparedor modified.  To show how quickly tabular techniquesmake an unfamiliar system manageable, a detailedexample and a self-test are provided.
1490		One Inch Perforated Paper Tape for InformationInterchange (Proposed American Standard)	
1491	Wirth, N.;Weber, H.;	EULER: A Generalization ALGOL, and its Formal Definition: Part I*	A method for defining programming languages isdeveloped which introduces a rigorous relationshipbetween structure and meaning.  The structure of alanguage is defined by a phrase structure syntax,the meaning in terms of the effects which the executionof a sequence of interpretation rules exertsupon a fixed set of variables, called the Environment.There exists a one-to-one correspondence betweensyntactic rules and interpretation rules is determined bythe sequence of corresponding syntactic reductionswhich constitute a parse.  The individual interpretationrules are explained in terms of an elementaryan d obvious algorithmic notation.  A constructivemethod for evaluating a text is provided, and forcertain decidable classes of languages their unambiguityis proved.  As an example, a generalizationof ALGOL is described in full detail to demonstrate thatconcepts like block-structure, procedures, parameters,etc. can be defined adequately and precisely by this method.
1492	Thacher Jr., H. C.;	Serrev (Algorithm 273 [C1])	
1493	Boothroyd, J.;	Generation of Hilbert Derived Test Matrix (Algorithm 274 [F1])	
1494	Larssen, G. M.;	Complete Elliptic Integral of the Second Kind (Algorithm 56 [S21])	
1495	Thacher Jr., H. C.;	Solution of Transcendental Equations by Series Reversion	An algorithm is developed for expressing thesolution Y, of the equation F(Y) = G(X) as a powerseries in (X - X0) when f and g are given as power series,andthe root Y0, is known at Y=X0.  The algorithmis illustrated for the equation Y^Y = X, i.e., (1+y)*ln(1+y) = ln(1+x).
1496	Feldman, J. A.;	A Formal Semantics for Computer Languagesand its Application In a Compiler-Compiler	A semantic meta-language has been developedfor representing the meanings of statements ina large class of computer languages.  This meta-languagehas been the basis for construction of an efficient,functioning compiler-compiler.  An informal discussionof the meta-language based on the example of acomplete translator for a small language is presented.
1497	Krishnamurthy, E. V.;Nandi, S. K.;	On the Normalization Requirement ofDivisor in Divide- and- Correct Methods	This paper presents an analysis on the normalizationrequirement of the divisor in a divide-and-correctmethod.  This analysis is made subject to the conditionthat not more than one correction is requiredto obtain the true quotient character, from the trialestimate got from the division of a two-precisionsegment of every partial remainder by a suitably roundedsingle-precision divisor.  (This segmented divisionis denoted here as a (2, 1) precision basic division.)It is found that the normalization requirementcould be narrowed down to a smaller range of divisors,provided the magnitude of the character next tothe leading character of the divisor is known.  If,however, the normalization is to be eliminated onehas to choose proper higher precision segments of operandsfor the basic division.  Also considered isthe possibility of eliminating the normalization by anincrease on the number of corrections on the quotientestimate got from a (2, 1) precision basic division.It is shown that such a scheme is economical onlyfor small radices.
1498	Bayer, R.;Gries, D.;Paul, M.;Wiehle, H. R.;	The ALCOR Illinois 7090/7094 Post Mortem Dump	A dump technique for programs written in ALGOL60 is described.  This technique provides anintelligible analysis of an unsuccessful computationprocess in terms of the original source program.
1499	Boothroyd, J.;	Chebyschev Curve-Fit (revised) (Algorithm 318 [E2])	
1500	Boothroyd, J.;	Chebyschev Curve-Fit (Algorithm 91 [E2])	
1501	Charmonman, S.;	Eigenvectors of a 2n x 2n Matrix	It has been known that the eigenvalues of acertain 2n x 2n matrix can be obtained by use oftwo smaller matrices of order n which can be easilyconstructed.  An algorithm is given to obtain theeigenvectors of the 2n x 2n matrix by use ofthe eigenvectors of the smaller matrices.
1502	Deutsch, L. P.;Lampson, B. W.;	An Online Editor	An online, interactive system for test editingis described in detail, with remarks on thetheoretical and experimental justification for its form.Emphasis throughout the system is on providingmaximum convenience and power for the user.  Notablefeatures are its ability to handle any piece oftext, the content-searching facility, and the character-by-characterediting operations.  The editorcan be programmed to a limited extent.
1503	Weinert, A. E.;	A SIMSCRIPT-FORTRAN Case Study	Two programs for a vehicle dispatching model,one written in 7040 SIMSCRIPT and the other in7040 FORTRAN IV are compared. The comparison is madein terms of basic program design decisions, storagerequirements, computer time used, and the ease of makingchanges.  In the SIMSCRIPT program, the primarydesign considerations center around the choice of modelvariables, model changing events, and model testing.In the FORTRAN program, basic design problems relateto the representation of the passage of time, theallocation of storage, and the organization of inputdata.  The comparison of these differently designedprograms shows that the SIMSCRIPT program uses more computerstorage and more computer time, but requiresfewer program changes to introduce model revisions.
1504	Gotlieb, C. C.;Corneil, D. G.;	Algorithms for Finding a Fundamental Setof Cycles for an Undirected Linear Graph	Given the adjacency matrix of the graph, the algorithmpresented in this paper finds a spanningtree and then constructs the set of fundamental cycles.Our algorithm is slower than an algorithm presentedby Welch by a ratio of N/3 (N is the number of nodes)but requires less storage.  For graphs with a largenumber of nodes and edges, when storage is limited ouralgorithm is superior to Welch's; however, whenthe graphs are small, or machine storage is very large,Welch's algorithm is superior.  Timing estimatesand storage requirements for both methods are presented.
1505	Dahm, D. M.;Gerbstadt, F. H.;Pacelli, M. M.;	A System Organization for Resource Allocation	This paper introduces a system for resource managementusing the concepts of "process," facility,"and "event."  Except for the processor no attempt hasbeen made to give serious suggestions for the policyto be followed for resource allocation.  However, a basicframework is provided in which a system analystcan express solutions to resource management problems.The paper is divided into a tutorial presentation,a description of the system primitives, and a small collectionof examples of the use of the primitives.
1506	Drew, D. L.;	The LACONIQ Monitor: Time Sharing for Online Dialogues	The LACONIQ (Laboratory Computer Online Inquiry)Monitor was developed primarily to supportnon-numerical applications such as retrieval from verylarge files by means of a "dialogue" between asystem user and a retrieval application.  The monitorwas designed so that it could work with a smallcomputer (an IBM System 360/30).  Therefore techniquesfor resource allocation were important.  For thisreason the use of core storage, computational facilities,and input-output were all scheduled.  An unusualfeature of the system is that it is event-driven ratherthan clock-driven.  The program segments calledinto execution by the remote CRT consoles are invariablyrun to completion rather than "rolled-out" tobe brought back at a later time.
1507	Lockemann, P. C.;Knutsen, W. D.;	A Multiprogramming Environment for Online Data Acquis ition and Analysis	An experimental system for acquis ition and analysisof large bodies of data derived from scientificexperiments is described.  Its architecture and implementationis largely based on certain objectivesand characteristics of a general data analysis scheme.Early applications have been oriented towardsthe investigation of data obtained in biological research.Some of the problems encountered by the chosenapproach are discussed.
1508		Magnetic Tape Labels for Information Interchange (Proposed USA Standard)	
1509		Recorded Magnetic Tape for Information Interchange(200 CPI, NRZI) (Proposed USA Standard)	
1510	Dulley, D.B.;Pitteway, L. V.;	Finding a Solution of N Functional Equationsin N Unknown (Algorithm 314 [C5])	
1511	Spath, H.;	The Damped Taylor's Series Method for Minimizinga Sum of Squares and for Solving Systems ofNonlinear Equations	
1512	Brown, K. M.;	Solution of Simultaneous Non-Linear Equations (Algorithm 316[C5])	
1513	Robinson, C. L.;	PERMUTATION (Algorithm 317 [G6])	
1514	Shumway, R. H.;	On the Expected Gain From Adjust ing Matched Term Retrieval Systems	A file adjustment procedure based on maximizingthe Bayes expected gain proposed for matchedterm retrieval systems.  The expected gain and its probabilitydistribution are derived as a functionof: (1) the prior proportion of omitted terms, and (2) thecoefficient of separation between two distributionscorresponding to values of an adjustment statistic.  Anexample evaluates the gain parameters for a typicalinformation retrieval system.
1515	Levien, R. E.;	A Computer System for Inference Execution and Data Retrieval	This paper presents a RAND project concernedwith the use of computers as assistants in thelogical analysis of large collections of factual data.A system called Relational Data File was developedfor this purpose.  The Relational Data File is brieflydetailed and problems arising from its implementationare discussed.
1516	Marron, B. A.;DeMaine, P. A. D.;	Automatic Data Compression	The "information explosion" noted in recentyears makes it essential that storage requirementsfor all information be kept to a minimum.  A fully automaticand rapid three-part compressor which canbe used with "any" body of information to greatly reduceslow external storage requirements and to increasethe rate of information transmission through a computeris described in this paper.  The system willalso automatically decode the compressed informationon an item-by-item basis when it is required.  Thethree component compressors, which can be used separatelyto accomplish their specific tasks, are discussed:NUPAK for the automatic compression of numerical data, ANPAKfor the automatic compression of "any" information,and IOPAK for further compression of information to be stored on tape or cards.
1517	Naylor, T. H.;Wertz, K.;Wonnacott, T. H.;	Methods for Analyzing Data from Computer Simulation Experiments	This paper addresses itself to the problem ofanalyzing data generated by computer simulationsof economic systems.  We first turn to a hypothetical firm,whose operation is represented by  single-channel,multistation queueing model.  The firm seeks to maximizetotal expected profit for the coming periodby selecting one of five operating plans, where eachplan incorporates a certain marketing strategy,an allocation of productive inputs, and a total cost.The results of the simulated activity under eachplan are subjected to an F-test, two multiple comparisonmethods, and a multiple ranking method.  Weillustrate, compare, and evaluate these techniques.The paper adopts the position that the particulartechnique of analysis (possibly not any one of the above)chosen by the experimenter should be an expressionof his experimental objective: The F-test tests the homogeneityof the plans; multiple comparison methodsquantify their differences; and multiple ranking methodsdirectly identify the one best plan or bestplans.
1518	Katz, J. H.;	An Experimental Model of System/360	The problem of predicting the performance ofmodern computer systems is formidable.  One generaltechnique which can ease this problem is macroscopic simulation.This paper reports on the applicabilityof that technique to System/360.  The paper describesan experimental model of System/360-its hardware,software, and its environment.  The measures of system performanceproduced by the model consist of statisticsrelating to turnaround time, throughput, hardware utilization,software utilization, and queueing processes.The model is mechanized in SIMSCRIPT and consists ofsome 1750 statements.  An auxiliary programs, theJob Generator, creates automatically the propertiesof System/360 jobs that get simulated.
1519	Oestreicher, M. D.;Bailey, M. J.;Strauss, J. I.;	GEORGE 3-A General Purpose Time Sharing and Operating System	An Operating System is described which willrun on a wide variety of configurations of theI.C.T. 1900, and can handle a large number of online consoleusers while at the same time running severaloff line (background) jobs.  The system is not orientedtowards either mode and can be either a batchprocessing system (such as the ATLAS Supervisor, IBSYS,or GECOS), or a multiaccess system (resembling,to the user, CTSS or MULTICS), or both simultaneously,depending on the installation, which can adjustthe Schedulers.  Both online users and off line jobs usea common Command Language.  The system includesa Multilevel device-independent File Store.
1520	Friedland, P.;	Absolute Value and Square Root of a Complex Number (Algorithm 312 [A2])	
1521	Bratley, P.;McKay, J. K. S.;	Multi-Dimensional Partition Generator (Algorithm 313 [A1])	
1522	Hillstrom, K.;	Chebyschev Quadrature (Algorithm 279 [D1])	
1523	Harrison, M. C.;Schwartz, J. T.;	SHARER, a Time Sharing System for the CDC 6600	A time sharing system embedded within thestandard batch processing system for the CDC 6600is described.  The system is general purpose and file-based,providing facilities for file input, manipulation,editing, compilation, and conversational execution.It uses a simple scheme for system extension fora machine with only one relocation and memory bound register.No attempt was made to use reentrant code,or to simulate segmentation or paging.  Implementationtime was approximately six man-years, with themajority of the code being written in FORTRAN.
1524	Adams, D. A.;	A Stopping Criterion for Polynomial Root Finding	When searching for the root of a polynomial,it is generally difficult to know just when toaccept a number as an adequate approximation to the root.In this paper an algorithm is presented whichallows one to terminate the iteration process on thebasis of calculated bounds for the roundoff errorwhich occurs in evaluating the polynomial.  This stoppingcriterion has been tested on numerous examplesand has been found to serve as a satisfactory meansfor accepting a complex number as a zero of a realpolynomial.
1525	Singleton, R. C.;	On Computing The Fast Fourier Transform	Cooley and Tukey have proposed a fast algorithmfor computing complex Fourier transform andhave shown major time savings in using it to computelarge transforms on a digital computer.  With na power of two, computing time for this algorithm isproportional to n log2 n, a major improvement overother methods with computing time proportional to n^2.In this paper, the fast Fourier transform algorithmis briefly reviewed and fast difference equation methodsfor accurately computing the needed trigonometricfunction values are given.  The problem of computinga large Fourier transform on a system with virtualmemory is considered, and a solution is proposed.  Thismethod has been used to compute complex Fouriertransforms of size n = 2^16 on a computer with 2^15words of core storage; this exceeds by a factor ofeight the maximum radix two transform size with fixedallocation of this amount of core storage.  Themethod has also been used to compute large mixed radixtransforms.  A scaling plan for computing thefast Fourier transform with fixed-point arithmetic is also given.
1526	Smith, J. L.;	Multiprogramming under a Page on Demand Strategy	A model of multiprogramming for a particularcomputer system using a page on demand strategyis developed.  Analysis of this model is used to predictperformance (measured by the average usage ofthe CPU) when user programs are typical of those arisingfrom an interactive time sharing environment.The effect of several hardware modifications is alsoanalyzed.  A parameter, readily calculated fromthe hardware characteristics and the program statistics,is proposed for gauging the effect of multiprogramming.
1527	Rosenbaum, P.;	A Grammar Base Question Answering Procedure	The subject of this paper is a procedure forthe automatic retrieval of certain segments ofstored information, either explicitly or implicitly represented,through questions posed in natural languagesentences.  This procedure makes use of a sentence recognitiondevice for the class of grammars whichwill correctly decide between the grammatical and ungrammaticalsentences of a natural language.  Itis possible to make use of a recognition device of thissort for the following reason: Much data is fullyexpressible as a set of sentences in a natural language,a set which can be exhaustively and exclusivelygenerated by a grammar.  Based upon the rules of this grammar,a sentence recognizer will evaluate sentences,questions in the normal situation.  Since the recognitionfunction succeeds just in case the posed questionis drawn from the set of sentences expressing the data,or, more correctly, is grammatical in terms ofthe grammar for this set of sentences, sentence recognitionitself is a procedure for retrieving information.When the recognition function succeeds, itsvalue represents the requested information.
1528	Mathews, M. V.;Lochbaum, C.;Moss, J. A.;	Three Fonts of Computer Drawn Letters	Detailed descriptions are given for three fontsof letters.  Letter shapes are entirely describedby numbers.  The basic vectors are in a general formso the fonts may be easily drawn on a variety ofcomputers and cathode-ray tubes.  The fonts include bothupper and lower case Roman letters, mathematicalsigns, and upper and lower case Greek letters.  Designof the fonts is described.  However, the principalcontribution of this paper concerns the fonts themselves.
1529	Bell, E. J.;	Decomposition Programming An Analysis of Matrix Substructure	A petroleum blending problem was analyzed in orderto compare the primal and primal-dual decompositionalgorithms.  In the course of the analysis, a substructurewas discovered which has relevance to therelative performance of the two algorithms and to theirabsolute performance as compared with a standardprimal-Simplex solution without decomposition.
1530	Brown, P. J.;	The ML/I Macro Processor	A general purpose macro processor called ML/Iis described.  ML/I has been implemented on thePDP-7 and I.C.T. Atlas 2 computers and is intended as atool to allow users to extend any existing programminglanguage by incorporating new statements and othersyntactic forms of their own choosing and in theirown notation.  This allows a complete user-orientedlanguage to be built up with relative ease.
1531	Knuth, D. E.;	The Remaining Trouble Spots in ALGOL 60	This paper lists the ambiguities remainingin the language ALGOL 60, which have been noticedsince the publication of the Revised ALGOL 60 Report in 1963.
1532	Oettinger, A. G.;	The Hardware-Software Complementarity	
1533	Foley, J. D.;	A Marovian Model of the University of Michigan Executive System	A mathematical model of a computer's executivesystem is postulated and its parameters estimatedwith the aid of extensive data on the system's operation.Although simplifying assumptions are made,the results predicted by the model agree reasonable wellwith actual results.  The model is used to studythe effects of changes in the executive system andin one of its compilers.  Further applications ofthe model are discussed.
1534	Austin, B. J.;Holden, T. S.;Hudson, R. H.;	DAD, The C.S.I.R.O. Operating System	The design and implementation of the C.S.I.R.O.operating system, DAD, is described in detail.This system is designed for the Control Data 3600 usinga large drum backing store and is intended toallow the integration of a remote console (display) subsysteminto a conventional job stack environment.The use of the drums, the buffering of input and outputon slow peripherals, and the execution of normaljob stack work are described.  The display subsystemis described only as it integrates into the restof the system.  The techniques found useful in the developmentof DAD are given, and an assessment ismade of the validity of various design decisions.  Performancefigures based on several months of operationare tabulated.
1535	Luccio, F.;	A Comment on Index Register Allocation	A technique is presented to reduce the enumerationrequired by a known procedure for optimalindex register allocation in straight-line programs.This technique is based on the construction ofa link diagram, which shows at any step the future occurrencesof indexes which must be loaded into indexregisters.  This diagram determines in advance the requiredregister configuration at certain steps ofthe program, so that the program is subdivided into separateportions to which the allocation proceduremay be applied independently.
1536	Lesk, A. M.;	Dynamic Computation of Derivatives	It is shown how Wengert's procedure for computationof derivatives can be implemented convenientlyby use of compiler-generated complex addition, subtraction,and linkage to complex arithmetic subroutines.Evaluation of a function and derivative proceed inparallel, as in Wengert's procedure, but with the"imaginary" parts of variables declared complex bearingthe values of the derivatives of the real parts.This technique provides a simple way to compute thederivatives of a function, without the need forderiving and programming the evaluation ofexplicit formulas for the derivatives.
1537	Chartres, B. A.;	Prime Number Generator 1 (Algorithm 310 [A1])	
1538	Chartres, B. A.;	Prime Number Generator 2 (Algorithm 311 [A1])	
1539	Chartres, B. A.;	Prime Number Generator 1; Prime Number Generator2 (Algorithm 35[A1]; Algorithm 310[A1]; Algorithm311[A1])	
1540	Busam, V. A.;	An Algorithm for Class Scheduling With Section Preference	An algorithm for assignment of students to classesin a fixed time schedule that allows studentsto give a preference for sections within courses is given.If consistent with the objective of balancedsections, these preferences will be honored.  The algorithmis more stochastic than Monte Carlo in nature.Results are given that compare it to a nonpreference assignment algorithm.
1541	Parente, R. J.;Krasnow, H. S.;	A Language for Modeling and Simulating Dynamic Systems	The general objective of this language isto facilitate both the modeling and experimentalaspects of simulation studies.  The ability to representsystems containing highly interactive processesis an essential feature.  The nature of the language,and the role of the process concept, is presentedby means of an extended example.
1542	Weber, H.;	A Microprogrammed Implementation of EULER on IBM System/360 Model 30	An experimental processing system for the algorithmiclanguage EULER has been implemented inmicroprogramming on an IBM System/360 Model 30 using asecond Read-Only Storage unit.  The system consistsof a microprogrammed compiler and a microprogrammedString Language Interpreter, and of an I/O controlprogram written in 360 machine language.  The system is describedand results are given in terms of microprogramand main storage space required and compiler and interpreterperformance obtained.  The role of microprogrammingis stressed, which opens a new dimension in the processingof interpretive code.  The structure and contentof a higher level language can be matched by an appropriateinterpretive language which can be executedefficiently by microprograms on existing computer hardware.
1543	Howard, J. C.;	Computer Formulation of the Equations of Motion Using Tensor Notation	A means is described for extending the areaof application of digital computers beyond thenumerical data processing stage and reducing the need forhuman participation in the formulation of certaintypes of computer problems.  By the use of tensor calculusand a computer language designed to facilitatesymbolic mathematical computation, a method has beendevised whereby a digital computer can be used todo non-numeric work, that is, symbolic algebraic manipulationand differentiation. To illustrate thetechniques involved, a digital computer has been usedto derive the equations of motion of a point massin a general orthogonal curvilinear coordinate system.Since this operation involves a formulation interms of first- and second-order differential coefficients,it provides a good demonstration of a computer'scapability to do non-numeric work and to assist in theformulation process which normally precedes thenumerical data processing stage.  Moreover, this particularproblem serves to illustrate the advantagesof the mathematical techniques employed.  With the programprepared for this purpose the computer willderive the equations of motion in any coordinate systemrequested by the user.   Results are presentedfor the following coordinate systems: cylindricalpolar, spherical polar, and prolate spheroidal.
1544	Conway, R. W.;Morgan, H. L.;	Tele-CUPL: A Telephone Time Sharing System	A general purpose, remote access, computing systemis described, that employs twelve-key keyboardtelephones as terminals.  Audio output is provided directlyto the telephone terminals, but the systemwill normally be used in conjunction with remotely locatedhigh speed printing devices.  The system isa compatible extension of an existing batch processingsystem.  A significant element of the system isa scheme for transmitting alphanumeric information by singlestrokes on a numeric keyboard.  The programmedscanner uses context to eliminate the ambiguity in transmission.
1545	Westin, A. F.;	Legal Safeguards to Insure Privacy in a Computer Society	
1546	Bemer, R. W.;	Toward Standards for Handwritten Zero and Oh	
1547	Filho, A. M.S.;Schwachheim, G.;	Gamma Function with Arbitrary Precision (Algorithm 309 [S14])	
1548	Chapin, N.;	Parsing of Decision Tables	Reduction in the size of decision tables can beaccomplished by several techniques.  The techniquesconsidered in this paper are on the parsing of decisiontables with regard to horizontal and verticaldata structures, job identity, hardware and job priorities,and context relationships.  Such parsingrests upon some conventions for the linkage of decision tables.
1549	Schorr, H.;Waite, W. M.;	An Efficient Machine-Independent Procedure forGarbage Collection in Various List Structures	A method for returning registers to the freelist is an essential part of any list processingsystem.  In this paper, past solutions of the recoveryproblem are reviewed and compared.  A new algorithmis presented which offers significant advantages of speedand storage utilization.  The routine for implementingthis algorithm can be written in the list language withwhich it is to be used, thus insuring a degreeof machine independence.  Finally, the application of thealgorithm to a number of different list structuresappearing in the literature is indicated.
1550	Smith, L. B.;	A Comparison of Batch Processing and Instant Turnaround	A study of the programming efforts of studentsin an introductory programming course is presentedand the effects of having instant turnaround (a few minutes)as opposed to conventional batch processingwith turnaround times of a few hours are examined.  Amongthe items compared are the number of computerruns per trip to the computation center, program preparationtime, keypunching time, debugging time,number of runs, and elapsed time from the first runto the last run on each problem.  Even though theresults are influenced by the fact that "bonus points"were given for completion of a programming problemin less than a specified number of runs, thereis evidence to support "Instant" over "Batch".
1551	Nakata, I.;	On Compiling Algorithms for Arithmetic Expressions	This paper deals with algorithms concerning arithmeticexpressions used in a FORTRAN IV compilerfor a HITAC-5020 computer having n accumulators.  Thealgorithms generate an object code which minimizesthe frequency of storing and recovering the partial resultsof the arithmetic expressions in cases wherethere are several accumulators.
1552	Ross, D. T.;	The AED Free Storage Package	The most fundamental underlying problem in sophisticatedsoftware systems involving elaborate,changing data structure is dynamic storage allocationfor flexible problem modeling.  The Free StoragePackage of the AED-1 Compiler Systems allows blocksof available storage to be obtained and returnedfor reuse.  The total available space is partitionedinto a hierarchy of free storage zones, each ofwhich has its own characteristics.  Blocks may be ofany size, and special provisions allow efficienthandling of selected sizes, control of shattering andgarbage collection, and sharing of physical spacebetween zones.  The routines of the package performhigh level functions automatically, but also allowaccess and control of fine internal details as well.
1553	Weizenbaum, J.;	Contextual Understanding by Computers	A further development of a computer program(ELIZA) capable of conversing in natural languageis discussed.  The importance of context to both humanand machine understanding is stressed.  It isargued that the adequacy of the level of understandingachieved in a particular conversation dependson the purpose of that conversation, and that absoluteunderstanding on the part of either humans ormachines is impossible.
1554	Noll, A. M.;	A Computer Technique for Displaying n-Dimensional Hyperobjects	A digital computer and automatic plotter havebeen used to generate three-dimensional stereoscopicmovies of the three-dimensional parallel and perspectiveprojections of four-dimensional hyperobjectsrotating in four-dimensional space.  The observed projectionsand their motions were a direct extensionof three-dimensional experience, but no profound "feeling"or insight into the fourth spatial dimensionwas obtained.  The technique can be generalized to n-dimensionsand applied to any n-dimensional hyperobjector hypersurface.
1555	Bratley, P.;McKay, J. K. S.;	Symmetric Polynomials (Algorithm 305 [C1])	
1556	Bratley, P.;	Permutations with Repetitions (Algorithm 306 [G6])	
1557	McKay, J. K. S.;	Symmetric Group Characters (Algorithm 307 [A1])	
1558	Ord-Smith, R. J.;	Generation of Permutations in Pseudo-LexicographicOrder (Algorithm  [G6])	
1559	Ord-Smith, R. J.;	Permutation Generator; Permutation in LexicographicalOrder; Permute; Generation of Permutationsin Lexicographical Order (Algorithm 87[G6]; Algorithm102[G6]; Algorithm 130[G6]; Algorithm 202[G6])	
1560	Sims, L. S.;	Transport; Transportation Problem (Algorithm 258[H]; Algorithm 293[H])	
1561	Spath, H.;	The Mutual Primal-Dual Method (Algorithm 285 [H])	
1562	Pitteway, M. L. V.;	Airy Function (Algorithm 301 [S20])	
1563	Pohl, I.;	A Method for Finding Hamilton Paths and Knight's Tours	The use of Warnsdorff's rule for finding aknight's tour is generalized and applied to theproblem of finding a Hamilton path in a graph.  A graph-theoreticjustification for the method is given.
1564	Callahan, M. D.;Chapman, A. E.;	Description of Basic Algorithm in DETAB/65 Preprocessor	The basic algorithm for the conversion of decisiontables into COBOL code is contained in thegenerator portion of the DETAB/65 preprocessor.  Thegenerator analyzes a decision table and producessimple COBOL conditional statements.  Core storage issaved by using queueing techniques and extensiveindexing and also by outputting the code as it is generated,a line at a time.  The only optimizationattempted is the elimination of obviously unnecessarytests on certain conditions in the decision table.Since the preprocessor and this language associated withit were developed for COBOL users, the preprocessorwas written in a modular form in required COBOL-61.
1565	Waite, W. M.;	A Language-Independent Macro Processor	A macro processor is described which can beused with almost any source language.  It providesall features normally associated with a macro facility,plus the ability to make arbitrary transformationsof the argument strings.  The program is used at theBasser Computing Department, University of Sydney,Sydney, Australia, to process text for eight different compilers.
1566	Moursund, D. G.;	Optimal Starting Values for Newton-Raphson Calculation of SQRT(x)	The problem of obtaining starting values forthe Newton-Raphson calculation of SQRT(x) on adigital computer is considered.  It is shown that theconventionally used best uniform approximationsto SQRT(x) do not provide optimal starting values.The problem of obtaining optimal starting values.The problem of obtaining optimal starting values isstated, and several basic results are proved.  Atable of optimal polynomial starting values is given.
1567	McKay, J. K. S.;	On the Representation of Symmetric Polynomials	Relations are given between certain symmetricpolynomials in the light of the theory of thesymmetric group.  Such an approach unifies earlier workand lends insight to previously published workby Aaron Booker.  A generalization of Graeffe's root-squaringtechnique for the determination of theroots of a polynomial is suggested.
1568	Stineman, R. W.;	Plotting a Function of Three Independent Variables	A method is developed for constructing an approximateplot of a function of three independentvariables.  The plot is similar to a conventional contourmap except that there are three scales to representthe independent variables.  Scale values of the threeindependent variables are added vectorially, andthe value of the function is then read fromthe values associated with nearby contours.
1569	Irwin, L.;	Implementing Phrase-Structure Productions in PL/I	A method is described for implementing the productionsof a context-free phrase structure grammarin a PL/I procedure whose structure and statements parallelthe structure and notation of the grammar.
1570	Madnick, S. E.;	String Processing Techniques	The internal organization of string processingsystems is discussed.  Six techniques for datastructures are presented and evaluated on the basis of:(1) creation of strings; (2) examination of strings;and (3) alteration of strings.  Speed of operation, storagerequirements, effect on paging, and programmerconvenience are also considered.  One of the techniques,single-word linked blocks, is used in an exampledemonstrating an implementation of a SNOBOL stringprocessing language on an IBM System/360.
1571	Betyar, L.;	A User-Oriented Time-Shared Online System	An existing system and planned additions withinthe Data Processing Laboratory of the BrainResearch Institute at UCLA is described.  The systemrepresents an attempt to provide research workersof the Institute with the ability to interact directlywith a highly sophisticated digital computingcomplex in the most direct and simple fashion possible.It is anticipated that, with the accumulationof experience using the present system, significant advanceswill be possible in the system design throughdetermination of interface parameters between thebiological scientist and the digital computer.
1572	Nielsen, N. R.;	The Simulation of Time sharing Systems	The development of new large scale time-sharingsystems has raised a number of problems forcomputation center management.  Not only is it necessaryto develop an appropriate hardware configurationfor these systems, but appropriate software adjustmentsmust be made.  Unfortunately, these systems oftendo not respond to changes in the manner that intuitionwould suggest, and there are few guides to assistin the analysis of performance characteristics.  Thedevelopment of a comprehensive simulation modelto assist in the investigation of these questions isdescribed in this paper.  The resulting model hasa general purpose design and can be used to study avariety of time-sharing systems.  It can also beused to assist in the design and development of new time-sharingalgorithms or techniques.  For the sakeof efficiency and greater applicability, the model wasimplemented in a limited FORTRAN subset that iscompatible with most FORTRAN IV compilers. The use ofthe simulation is demonstrated by a study of theIBM 360/67 time-sharing system.
1573	Gallaher, L. J.;	An Adaptive Quadrature Procedure withRandom Panel Sizes (Algorithm [D1])	
1574	Hill, I. D.;Joyce, S. A.;	Normal Curve Integral (Algorithm 304 [S15])	
1575	Pike, M. C.;Hill, I. D.;	Incomplete Beta Ratio (Algorithm 179 [S14])	
1576	Welsch, J. H.;	Eigenvalues of a Real Symmetric Matrixby the QR Method (Algorithm 253 [F2])	
1577	Welsch, J. H.;	Eigenvalues and Eigenvectors of a Real SymmetricMatrix by the QR Method (Algorithm 254 [F2])	
1578	Makinson, G. J.;	Generalized Least Squares Fit By OrthogonalPolynomials (Algorithm 296 [E2])	
1579	Hill, I. D.;Joyce, S. A.;	Real Error Function, ERF(x) (Algorithm 123 [S15])	
1580	Hill, I. D.;Joyce, S. A.;	Error Function-Large X (Algorithm 180 [S15])	
1581	Hill, I. D.;Joyce, S. A.;	Complementary Error Function-Large X (Algorithm 181 [S15])	
1582	Hill, I. D.;Joyce, S. A.;	GAUSS (Algorithm 209 [S15])	
1583	Hill, I. D.;Joyce, S. A.;	Normal Distribution Function (Algorithm 226 [S15])	
1584	Hill, I. D.;Joyce, S. A.;	Procedure for the Normal Distribution Functions (Algorithm 272 [S15])	
1585	Hill, I. D.;Joyce, S. A.;	Normal Curve Integral (Algorithm 304 [S15])	
1586	Golub, G. H.;Robertson, T. N.;	A Generalized Bairstow Algorithm	The Bairstow algorithm is generalized to thecase of a polynomial which is itself a linearcombination of polynomials satisfying a three-term recursion.Convergence properties of the method arederived.
1587	Abramowich, J.;	Storage Allocation in a Certain Iterative Process	A method of core storage allocation in a certainiterative process is described and estimatesof the machine time required are given.  The method isapplicable to iterative processes in which inputdata items once chosen are never again needed.  In thismethod the input data is continuously relocatedand the space made available apportioned to the outputtables when an overflow occurs.  Some importantspecial cases are considered in which considerable simplification occurs.
1588	Lawson Jr., H. W.;	PL/I List Processing	The concepts of list processing have been introducedinto the PL/I language.  With these newfacilities, it is possible to write PL/I procedures thatoperate on simple and complex data list organizations.Most list-processing languages have suffered from theirinability to deal directly with complex datastructures and/or from their inability to perform thecomplete range of programming language operationsupon the data list structures.  These two problems havebeen eliminated in the list-processing facilitiesof PL/I.  The basic concepts of list processing andthe philosophy of the PL/I language extensions arediscussed.  In addition, several detailed list-processing examples are provided.
1589	Cameron, S. H.;Ewing, D.;Liveright, M.;	DIALOG: A Conversational Programming System with a Graphical Orientation	DIALOG is an algebraic language for onlineuse with a graphical input-output console device.It is a computational aid for the casual user, whichprovides basic facilities for graphical and numericinput and display, online and off line program preparationand storage, and hard copy presentation ofresults.  Use of the system requires a minimum of experienceor instruction, since the growth of an overlayingsystem control language has been prevented, and thereare no processor-oriented statements, like variabletype or dimension declarations.  Moreover, in the onlinesituation the processor interacts with the graphicalkeyboard on a character-by-character basis so as torestrict the programmer's choice of input symbolsto those which are syntactically correct. DIALOG has beenin daily operation at the IIT Research Institutesince February, 1966.
1590	Reddy, D. R.;	Pitch Period Determination of Speech Sounds	A computer procedure which determines pitchperiods by the recognition of the peak structureof the speech waveform is described.  Speech sounds weresampled by a microphone and an analog-to-digitalconverter attached to an interconnected IBM 7090-PDP-1system.  These utterances were recorded at thenormal noise level of the computer room but were notband-compressed or phase-distorted in any manner.A sequence of operations defined on the speech wave selectsa list of points along the waveform as candidatesfor pitch markers.  These markers are validated byan error detection and correction procedure.About95 percent of the pitch periods were recognized correctlywithin 1 to 2 times real-time on the IBM 7090.
1591	Engvold, K. J.;Hughes, J. L.;	A Model for a Multifunctional Teaching System	A teaching system model that was incorporatedinto an operating system of a large computeris described.  The model transferred control to theoperating system to execute functions other thanteaching, and then recovered control in order to resumeteaching.  The teaching system (ABAC-II) waswritten to run under the operating system (IBSYS) forthe IBM 7044 Graphic System.  Because the teachingsystem automatically terminated and rescheduled itself,a student studying a course presented at a cathode-raydisplay terminal could switch readily between studentmode and programmer mode.  During the latter, thefull resources of the operating system (language processors,compilers, library and user's programs)were at his disposal.  He could for example, write, assemble,debug, and execute at the terminal a programwritten in any language processed by the operating system.A course could therefore include text materialinterleaved with programming problems which the studentcould solve without leaving the terminal.  Exercisesin simulation and gaming could also be provided.  Theimplications of a teaching system with this degreeof flexibility for industrial and executive trainingas well as academic education are discussed.  Inaddition, the advantages of this type of system for computerprogramming and operation are also considered.
1592	Alberga, C. N.;	String Similarity and Misspellings	The problem of programming a computer to determinewhether or not a string of characters isa misspelling of a given word was considered.  A numberofalgorithms were evaluated-some proposed byother writers, some by the author.  These techniqueswere tested on a collection of misspellings madeby students at various grade levels.  While many ofthe methods were clearly unsatisfactory, some gaveas few as 2.1 percent incorrect determinations.
1593	Nandi, S. K.;Krishnamurthy, E. V.;	A Simple Technique for Digital Division	A simple and economical method for digitaldivision is described.  The method is suitable fordivisors whose leading character is either radix lessone or is unity with the next character equal tozero; also the method is direct and needs only half thenumber of arithmetic operations needed by a variantof the Harvard iterative method, described by Gilman,which is suitable for similar divisors.
1594	Langdon Jr., G. G.;	An Algorithm for Generating Permutations	An algorithm is described which under repeatedapplication generates all permutations of Kelements.  Only the previously generated permutation,the constant K, and a temporary index are needed.Starting with a particular ordering of K elements (abcd),repeated application of the algorithm willgenerate K-1 additional permutations by K-1 successiverotations.  From the initial circular orderingof K objects, another circular ordering can be obtainedby rotating the K-1 lowest elements.  For eachnew K-1 circular ordering, another K-2 can be obtainedby rotating the K-2 lowest elements.  By continuingin this manner, applications of the algorithm will generateall (K-1)! circular orderings, or since eachcircular ordering yields K permutations thealgorithm generates all K! permutations.
1595	Evans, J. W.;Harary, F.;Lynn, M. S.;	On the Computer Enumeration of Finite Topologies	The problem of enumerating the number of topologieswhich can be formed from a finite pointset is considered both theoretically and computationally.Certain fundamental results are established,leading to an algorithm for enumerating finite topologies,and computed results are given for n <= 7.An interesting side result of the computational workwas the unearthing of a theoretical error whichhad been induced into the literature; the use of the computerin combinatorics represents, chronologically,an early application, and this side result underscoresits continuing usefulness in this area.
1596	Bond, G.;Pitteway, M. L. V.;	Airy Function (Algorithm 301 [S20])	
1597	Boothroyd, J.;	Transpose Vector Stored Array (Algorithm 302 [K2])	
1598	Makinson, G. J.;	Least Squares Fit By Orthogonal Polynomials (Algorithm 28 [E2])	
1599	Kohfeld, J. J.;	Numerical Solution of the Polynomial Equation (Algorithm 300 [C2])	
1600	Hillstrom, K.;	Chebyshev Quadrature (Algorithm 279 [D1])	
1601	Shedler, G. S.;	Parallel Numerical Methods for the Solution of Equations	Classical iterative procedures for the numericalsolution of equations provide at each stagea single new approximation to the root in question.  Atechnique is given for the development of numericalprocedures which provide, at each stage, several approximationsto a solution of an equation.  The s8everalapproximations obtained in any iteration are computationallyindependent, making the methods of interestin a parallel processing environment.  Convergence isinsured by extracting the "best information" ateach iteration.  Several families of numerical procedureswhich use the technique of the procedures ina parallel processing environment are developed and measurementsof these statistics are reported.  Thesemeasurements are interpreted in a parallel processingenvironment.  In such an environment the proceduresobtained are superior to standard algorithms.
1602	Schlesinger, S.;Sashkin, L.;	POSE: A Language for Posing Problems to a Computer	A language, POSE, is described which is a drasticdeparture from the FORTRAN/ALGOL type, thoughit does utilize FORTRAN formula and logic representations(and actually contains FORTRAN VI as a subset).With the new language, the user need only describehis problem in "equation-like" form. The methodof solution is automatically provided in conjunctionwith the translation from equation form to computerinstruction. In this way the POSE language user cansolve difficult computational problems (like thesolution of differential equation) without requiringa knowledge of numerical methods or the intricaciesof computer subroutine logic. Essentially all clericaloperations now required for FORTRAN programminghave been automated so that the POSE programmerneed not be concerned with these details.
1603	Hornbuckle, G. D.;	A Multiprogramming Monitor for Small Machines	INT, a combination hardware/software monitordesigned to control a wide variety of real-timeinput/output devices, is described.  The simple hardwareadditions provide a uniform device to machineinterface for such elements as keyboards graphic inputdevices, and interval timers.  The software relievesthe user program from the details of input/output timing,buffering, and task scheduling and providesparallel processing capability.  User programs communicatewith the monitor through a small set of meta-instructionwhich consists mostly of machine-language subroutine calls.
1604	Walter, E. S.;Wallace, V. L.;	Further Analysis of a Computing Center Environment	Empirical distributions of program lengths,execution times, processing times, and loadingtimes of over 10,000 jobs serviced in a university computingcenter environment are presented.  The dataare subdivided according to certain characteristics of usersand jobs to obtain selected empirical conditionaldistributions of those time properties as well as statisticalmeasures of other interesting properties.The results are interpreted in terms of the properties of the system studied.
1605	Schatzoff, M.;Tsao, R.;Wiig, R.;	An Experimental Comparison of Time Sharing and Batch Processing	The effectiveness for program developmentof the MIT Compatible Time-Sharing System (CTSS)was compared with that of the IBM IBSYS batch-processingsystem by means of a statistically designedexperiment.  An identical set of four programming problemswas assigned to each of a group of four programmingsubjects.  Influences external to the systems, such asthe sequence of problem solution, and programmerand problem characteristics, were specified as designfactors in the experiment.  Data was obtained forsix variables (e.g., programmer time, computer time,elapsed time, etc.) which were considered to bedefinitive of "system effectiveness," and analysis ofvariance techniques were employed to estimate systemdifferences in these variables after differences due tothe design factors had been eliminated.  Statisticalanalysis of the experimental results provided strongevidence of important system differences, as wellas a critique of the experimental design itselfwith implications for further experimentation.
1606	Hill, I. D.;Pike, M. C.;	Chi-Squared Integral (Algorithm 299 [S15])	
1607	Gunn, J. H.;	Coulomb Wave Functions (Algorithm 300 [S22])	
1608	Eisner, E.;	Numerical Integration of Function That Has a Pole	It is common to need to integrate numericallyfunctions that diverge somewhere outside therange of integration.  Even if the divergence occurs quitefar away, integration formulas like Simpson's,that depend on fitting a polynomial, usually will beinaccurate: near a pole they will be very bad.A method is described that gives formulas that will integratefunctions of this kind accurately if theorders and positions of the poles are known.  Explicitformulas are given that are easy to use on anautomatic computer.  It is shown that they can be usedfor some other singularities as well as poles.If the integral converges, integration can be carriedto the singularity.  The accuracy of the integrationwith a pole of second order is discussed, and, as an example,the new formula is compared with Simpson's.The new formulas are useful even far from the pole,while near the pole their advantage is overwhelming.
1609	Hall Jr., A. D.;Acton, F. S.;	Scheduling University Course Examinations by Computer	A new approach to the problem of schedulingcourse examinations is presented.  In principle,an examination schedule which requires a minimum numberof examination periods and satisfies the constraintthat no student be required to take two examinationssimultaneously can be found in two steps.  First,course which may have their examinations scheduled atthe same period are grouped together in all possibleways.  Then a minimum number of these groups, such thateach course is included at least once, are selected.By removing multiple occurrences of courses and then schedulingeach group at a different period a minimalschedule can be obtained.  Known algorithms for carryingout these procedures are prohibitively expensive.Approximations to the ideal procedure outlined above aregiven which yield nonminimal but feasible scheduleswith a very small expenditure of time.  Results of experimentsusing these techniques are given.  Theseare encouraging and indicate that further experimentation would be worthwhile.
1610	Dwyer, P. S.;Galler, B. A.;	A Method for the Solution of Transportation Problems with Tall Matrices	A method is presented for the solution of thetransportation problem having a cost matrix withfew columns.  The computer implementation of this methodshows it to be very fast and efficient.  Applicationare indicted for the personnel classification problemas well as the classical transportation problem.An example is worked out in detail.
1611	Klein, M. M.;	Scheduling Project Networks	Some of the basic concepts and terminologyof project networking are developed.  The CriticalPath Algorithm incorporated in the C-E-I-R proprietaryscheduling system RAMPS (Resource Allocation andMulti-Project Scheduling) is described.  The error detectionand network analysis features of the algorithmare also described.
1612	Brooker, R. A.;	Top-to-bottom Parsing Rehabilitated?	This note is concerned with the efficiencyof the Top-to-Bottom parsing algorithm as used inconnection with programming language grammars.  It isshown, for instance, that retracing of unprofitablepaths can often be eliminated by a suitable rearrangementof the productions defining the grammar.  Theessential weakness of the method is in dealing with complicatedsyntactic structures which are in practiceonly sparsely occupied, e.g., arithmetic expressions.
1613	Stone, H. S.;	One-Pass Compilation of Arithmetic Expressions for a Parallel Processor	Under the assumption that a processor may havea multiplicity of arithmetic units, a compilerfor such a processor should produce object code to takeadvantage of possible parallelism of operation.Most of the presently known compilation techniquesare inadequate for such a processor because theyproduce expression structures that must be evaluated serially.A technique is presented here for compilingarithmetic expressions into structures that can beevaluated with a high degree of parallelism.  Thealgorithm is a variant of the so-called "top-down"analysis technique, and requires only one pass ofthe input text.
1614	Galler, B. A.;Perlis, A. J.;	A Proposal for Definitions in ALGOL	An extension to ALGOL is proposed for addingnew data types and operators to the language.Definitions may occur in any block heading and terminatewith the block.  They are an integral partof the program and are not fixed in the language.  Eventhe behavior of existing operators may be redefined.The processing of text containing defined contexts featuresa "replacement rule" that eliminates unnecessaryiterations and temporary storage.  Examples of definition setsare given for real and complex matrices,complex numbers, file processing, and list manipulation.
1615	Krall, A. M.;Fornaro, R.;	An Algorithm for Generating Root Locus Diagrams	A technique for using a digital computer todraw both ordinary and time-lag root locus diagramsis described.  Ordinary diagrams are drawn much fasterand more accurately than ever before.  Time-lagdiagrams, which had been impossible to obtain, are drawnwith the same speed and accuracy as ordinarydiagrams.
1616	Walton, J. J.;	Tensor Calculations on Computer: Appendix	In the main text of the paper [Comm. ACM 9,12 (Dec. 196), 864], a FORMAC program was discussedwhich is capable of calculating various quantitiesof interest in tensor calculus.  This Appendix isintended as an example of the program output.  Chrisoffelsymbols calculated for 12 basic orthogonalcoordinate systems are listed.
1617	Boothroyd, J.;	Eigenvalues and Eigenvectors of theSymmetric System (Algorithm 297 [F2])	
1618	Spath, H.;	Determination of the Square-Root of a PositiveDefinite Matrix (Algorithm 298 [F1])	
1619	Rodden, B. E.;	Error-Free Methods for Statistical Computations	Neely has discussed computational error generatedby some algorithms used to compute variousstatistics.  In the present paper methods are describedwhich are error-free, simple in concept, andusually less costly in machine time than those mentioned by Neely.
1620	File, C. T.;	Methods of Evaluating Polynomial Approximationsin Function Evaluation Routines	The method of nested multiplication is commonlyused in function evaluation routines to evaluateapproximation polynomials.  New polynomial evaluationmethods have been developed in recent years whichrequire fewer multiplications than nested multiplicationand may therefore be preferable for use in functionevaluation routines.  Although some of these methodsdo not appear to be practically useful because ofrounding-error difficulties, several methods of evaluatinglow-degree polynomials have been found tobe satisfactory.  Three such methods are described and illustrated.
1621	Sydow, L. V.;	Computer Typesetting of ALGOL	An application of computer-aided typesettingis introduced.  A working method is describedfor publishing ALGOL by computerized translation fromHardware into Reference representation, computerizedplanning of typographical lay-out and computerized controlof a typesetting machine.  The point is madethat experts in science, technology, and programming areguaranteed a correct ALGOL documentation withoutspending valuable time and power on typographic considerations and proofreading.
1622	Waite, W. M.;	An Efficient Procedure for the Generation of Closed Subsets	An efficient algorithm is described for generatingsubsets of a set S which satisfy constraintsof the form: "If s(i) is a member of the subset, thens(j) must also be a member of the subset."  Thealgorithm has been programmed in the WISP language andsuccessfully run on the IBM 7094 in connectionwith a routine to detect feedback in multidimensional iterative networks.
1623	Neidleman, L. D.;	An Application of FORMAC	A nonlinear circuit analysis problem is statedand the way in which it was solved using FORMACis indicated.  The solution of the problem using FORMACwas notable since several other methods thatwere tried failed.  The problem is straightforward (althoughuntenable by hand) but nevertheless involvedan elaborate use of the FORMAC language.  The programwas fairly large and utilized practically everycommand.  In particular, it made extensive use of thePART command.  Several tricks were necessary inorder to circumvent some of the shortcomings of theFORMAC system.  This paper is more concerned withthe use of programming techniques in FORMAC than withthe actual engineering problem, although readersmay be interested in the problem because it is statedin a general (mathematical) sense and could beof interest in areas other than circuit analysis.
1624	Klerer, M.;May, J.;	Automatic Dimensioning	Examples of algorithm that will accomplishautomatic storage reservation without the need forexplicit array declarations are described.
1625	Clark, E. R.;	On the Automatic Simplification of Source-Language Programs	Methods of simplification that can be appliedautomatically to programs written in an ALGOL-likelanguage are discussed.  The simplifications are basedon the form of the program and the knowledge obtainedby a processor, without any understanding of what theprogram is supposed to do.  These methods havebeen implemented in a processor called SURE that acceptsa program written in JOVIAL and outputs an equivalentJOVIAL program that may be shorter and may be executedfaster than the original.  SURE is described,some of the problems encountered in automatic improvementat the source-language level are discussed,and further types of automatic program improvement are suggested.
1626	Bobrow, D. G.;Murphy, D. L.;	Structure of a LISP System Using Two-Level Storage	In an ideal list-processing system there wouldbe enough core memory to contain all the dataand programs.  Described in this paper are a numberof techniques that have been used to build a LISPsystem utilizing a drum for its principal storage medium,with a surprisingly low time penalty for useof this slow storage device.  The techniques includecareful segmentation of system programs, allocationof virtual memory to allow address arithmetic for typedetermination, and a special algorithm for buildingreasonably linearized lists.  A scheme for binding variablesis described which is good in this environmentand allows for complete compatibility between compiledand interpreted programs with no special declarations.
1627	Morenoff, E.;McLean, J. B.;	Application of Level Changing to a Multilevel Storage Organization	A technique for organizing the devices of a computerstorage system is described.  This technique,called the multilevel store, provides a means for economicallysatisfying the requirements for very largestorage capacities of certain data management and informationretrieval systems.  The concept of levelchanging is introduced and its application to the multilevelstore is discussed.  A possible means forphysically organizing the information for efficientuse of the multilevel store is presented.
1628	Orden, A.;	The Emergence of a Profession	Computer programming deals with an enormousvariety of activities and is carried on by peoplewith a great variety of backgrounds.  It seems clearthat part but not all of this activity is evolvingtoward a distinct professional field, but that thescope of this emerging profession, and some of itseconomic, social, and educational characteristics areas yet by no means well defined.  In this paper,these issues are examined and some opinions about them are expressed.
1629	Shannon, S.;Henschke, C.;	Stat-Pack: A Biostatistical Programming Package	A package of FORTRAN statistical programs for useon almost any small to medium size (40k charactersor 8k words) for which a FORTRAN II compiler existsis described and its availability is announced.The major design criteria of ease of use, ease of modification,flexibility of input and detail of outputare described.
1630	Pfaltz, J. L. Rosenfeld, A.;	Computer Representation of Planar Regions by Their Skeletons	Any region can be regarded as a union of maximalneighborhoods of its points, and can be specifiedby the centers and radii of these neighborhoods; thisset is a sort of"skeleton" of the region.  Thestorage required to represent a region in this way iscomparable to that required when it is representedby encoding its boundary.  Moreover, the skeleton representationseems to have advantages when it isnecessary to determine repeatedly whether points are insideor outside the region, or to perform set-theoreticoperations on regions.
1631	Gorenstein, S.;	Testing a Random Number Generator	The first 1,000,000 numbers produced by therandom number generator used in the General PurposeSystems Simulator (GPSS) were subjected to statisticaltests.  The tests are described and the resultsof the tests are presented.  These particular tests indicatethat the numbers are satisfactory.  It isrecommended that suitable tests be applied to allrandom numbers used in computer simulations.
1632	Carmer, S. G.;	Programming the Tabular Method of Analysisof Variance for Factorial Experiments	The ease of programming the tabular method of analysisof variance for complete factorial experimentsin a FORTRAN language is demonstrated.  In this method,the total sum of squares is partitioned intoorthogonal single degree of freedom sums of squares;main effect and interaction sums of squares arethen obtained by appropriate pooling of the single degreeof freedom sums of squares.  Program segmentsto accomplish the procedure are presented.  Modificationsto handle hierarchical designs and replicatedexperiments are mentioned. A FORTRAN II programfor an IBM 7094 is described briefly.
1633	Ehrlich, L. W.;	A Modified Newton Method for Polynomials	A modified Newton method for polynomials isdiscussed.  It is assumed one has approximationsfor all the roots of the polynomial.  Three variationsare described.  If the roots are simple, it isshown that under appropriate conditions, twoof the variations are cubically convergent.
1634	Goldberg, I. B.;	27 bits Are Not Enough for 8-digit Accuracy	From the inequality 10^8 < 2^27, we are likelyto conclude that we can represent 8-digit decimalfloating-point numbers accurately by 27-bit floating-pointnumbers.  However, we need 28 significantbits to represent some 8-digit numbers accurately.In general, we can show that if 10^p < 2^q-1, thenq significant bits are always enough for p-digit decimalaccuracy.  Finally, we can define a compact27-bit floating-point representation that will give 28significant bits, for numbers of practical importance.
1635	Byrne, G. D.;	Parameters for Pseudo Runge-Kutta Methods	The object of this note is to present a choiceof the free parameters in the third- and fourth-orderpseudo Runge-Kutta methods involving two points. Thischoice of parameters causes a bound on the principalpart of the truncation error term to be near the minimumfor the fourth-order method and at the minimumfor the third-order method.
1636	Belman, R. E.;Kagiwada, H. H.;Kalaba, R. E.;	Invariant Imbeding and the Numerical Integrationof Boundary-Value Problems for Unstable LinearSystems of Ordinary Differential Equations	In such diverse areas as radiative transferin planetary atmospheres and optimal guidance andcontrol, two-point boundary-value problems for unstablesystems arise, greatly complicating the numericalsolution.  An invariant imbeding technique is presentedwhich is useful in overcoming these frequentlyencountered instabilities, and the resultsof some numerical experiments are given.
1637	Fishman, G. S.;	Problems in the Statistical Analysis of SimulationExperiments: The Comparison of Means and theLength of Sample Records	Research is continued into statistical analysisof simulation experiments containing autocorrelatedtime series.  It is shown how to estimate the lengthsof sample records needed to use certain large sampleresults in measuring stability.  Analogies between autocorrelateddata and independent observations aredescribed.  A way to test the difference of the meanof two experiments is suggested.  It is shown howthe variance of the sample mean relates to the spectrumof the generating process, and estimation ofthe quantities of interest is described. The resultsexpand the possibilities of statistical spectralanalysis as applied to simulation experiments.
1638	Gasner, B. J.;	Sorting by Replacement Selecting	In sorting by replacement selecting, the expectedlength of a sequence beginning with the i-thelement (i>1) is proved to be 2F, in accordance witha conjecture of E. H. Friend, where F is the numberof memory cells used.  The expected length of the j-thsequence is determined to be F times a j-th degreepolynomial in e, such that the value of this polynomialapproaches 2 as j approaches infinity.  Recursiveformulas are obtained for both the mean and the standarddeviation of the length of the j-th sequence.The mathematical proofs of these results are basedupon the assumption that n, the number of items tobe sorted, is infinite, but it is shown that the errordue to the finiteness of n approaches zero rapidlyas n increases.
1639	Spath, H.;	Exponential Curve Fit (Algorithm 295 [E2])	
1640	Makinson, G. J.;	Generalized Least Squared Fit By OrthogonalPolynomials (Algorithm 296 [E2])	
1641	Cohen, J.;	A Use of Fast and Slow Memories in List-Processing Languages	A scheme is described which permitting a substantialincrease in memory space utilized to storelist-structured data.  It consists in reducing to onelevel a nonhomogeneous store composed of fast (core)and slow (disk or drum) memories.  The space availablein slow memory is divided into pages each containinga given number of machine words.  The reduction to aone-level memory is performed by a program whichleaves the most often called pages in the fast memory.When a new page from slow store is requested,the page in core having the longest period of inactivityis transferred back to the slow store.  Thecomplete scheme has been implemented in connection witha LISP embedding into ALGOL, using an IBM 7044with 32k of core memory and disks.  Gains in memory spacewere about 100-fold.  As often happens in programmingapplications the price of the additional space is computertime.  Although the disks have an access time10^4 times slower than core, tests indicate that theactual slow down varied from 3 to 10, dependingon the number of pages available in the fast store.
1642	Fisher, R. O.;Shepard, C. D.;	Time Sharing on a Computer with a Small Memory	Techniques to make time sharing attractive ona computer with a small central memory are presented."Small" is taken to mean that only one user program plusa monitor will fit into the memory at any time.The techniques depend on having two levels of secondarystorage: level 1, several times larger thanthe main memory and quite fast; and level 2,many times larger and slower than level 1.
1643	Bingham, J. A. C.;	An Improvement to Iterative Methods of Polynomial Factorization	Methods of polynomial factorization whichfind the zeros one at a time require the divisionof the polynomial by the accepted factor.  It is shownhow the accuracy of this division may be increasedby dividing in order of both ascending and descendingpowers of the variable and choosing a crossoverpoint which minimizes a very simply calculated error criterion.
1644	Goldberg, M.;	On the Computation of Least Squares Polynomials	Rounding error accumulated during digital computationof a least squares polynomial makes thecomputed polynomial only an approximation to the true leastsquare polynomial.  A simple method for adjust ingthe constant term of the computed polynomial to geta better approximation to the true least squarespolynomial is described.
1645	Cody, W. J.;Ralston, A.;	A Note on Computing Approximations to the Exponential Function	Two methods are discussed which result in nearminimax rational approximations to the exponentialfunction and at the same time retain the desirable propertythat the approximation for negative valuesof the argument is the reciprocal of the approximationfor corresponding positive values.  These methodslead to approximations which are much superior to thecommonly used convergents of the Gaussian continuedfraction for the exponential.  Coefficients and errorsare given for the intervals [-.5*ln 2, .5*ln 2]and [-ln 2, ln 2].
1646	Moulton, P. G.;Muller, M. E.;	DITRAN-A Compiler Emphasizing Diagnostics	DITRAN (Diagnostic FORTRAN) is an implementationof ASA Basic FORTRAN with rather extensiveerror checking capabilities both at compilation timeand during execution of a program.  The need forimproved diagnostic capabilities and some objectivesto be met by any compiler are discussed.  Attentionis given to the design and implementation of DITRANand the particular techniques employed to providethe diagnostic features.  The handling of error messagesby a general macro approach is described.  Specialfeatures which provide teaching aids for use by instructors are noted.
1647	Shantz, P. W.;German, R. A.;Mitchell, J. G.;	WATFOR-The University of Waterloo FORTRAN IV Compiler	WATFOR is an in-core, load-and-go compilerwhich has been implemented within the IBM 7040/44operating system.  FORTRAN IV was selected as the sourcelanguage in order to achieve maximum languagecompatibility with other available compiling systems,in particular the IBM 7040/44 FORTRAN IV system.The principal advantage of the WATFOR compiler is thatit translates FORTRAN IV programs at speeds ofup to 100 statements per second.  Since the compilerresides core there is virtually no system overhead,and hence large batches of "student" programs may be processed veryefficiently.  The compiler also providesextensive error diagnostics, during both the compilationand the execution phases of a program run.This feature makes the system attractive toboth learners and learned users alike.
1648	Strome, W. M.;	Uniform Random (Algorithm 294 [G5])	
1649	Hassitt, A.;	Data Directed Input-Output in FORTRAN	A statement which is similar to the NAMELISTstatement of FORTRAN IV has been incorporatedin the FORTRAN 63 compiler.  The FORTRAN 63 implementationallows a greater flexibility and simplicitythan the FORTRAN IV feature.  The Hollerith names, thelocation, the mode and the dimensions of a variablecan be discovered by means of standard FORTRAN statements.Methods of using this information are illustratedin relation to general purpose data directed input andoutput routines; some other uses such as matrixmanipulation are discussed.
1650	Cooper, B. E.;	A Unifying Computational Method for theAnalysis of Complete Factorial Experiments	A computational method which may be used forthe calculation of sums of squares in the analysisof variance of complete factorial experiments and inthe computation of main effect or interaction meansis described.  The method is elucidated as unifying sinceone method can be used for a variety of purposeseach previously requiring different methods.  The programmingadvantages of such a method are obvious.The following variants are discussed: (1) the standardanalysis of variance; (2) analyses omitting certainlevels of one or more factors; (3) separate analysesfor some levels of a factor or for combinationsof levels of more than one factor.  These are performedsimultaneously; (4) the calculation of main effector interaction means.  The mean expects the data in standardorder and it leaves the data in that orderso that many analyses of the same data can be performedwithout rearrangement.  The total sum of squares,excluding a replication sum of squares, is partitionedinto all polynomial partitions and their interactionseach with one degree of freedom.  This is so evenif factors have unequally spaced factor levels.
1651	Aigner, D. J.;	An Interpretive Input Routine for Linear Programming	In this descriptive article an input codeis presented which greatly simplifies data inputto any linear programming solution routine, for subsequentuse either as a pedagogical device or forsolving rather small LP problems.  This latter (limited)use derives not at all from inherent limitationsin the code itself, but from an efficiency evaluation:large LP problems would doubtless benefit froman input system more suited for bulk data handling thanthe input code described.  From a user's standpoint,input appears almost exactly as a textbook presentationof the LP problem (limited only by a keypunch'sinability to write subscripts, etc.).  The input interpreterscans column wise, thus no fixed formatdata preparation is required.  The user may also, undervery general requirements only, liberally useeditorial comments throughout the input deck as anaid in identification, e.g., of row constraints.The article includes examples of input, output from asolution routine presently in use, and a skeletonflowchart of the input interpreter.
1652	Morenoff, E.;McLean, J. B.;	A Code for Non-numeric Information ProcessingApplications in Online Systems	A code has been specifically designed to simplifythe internal information processing operationswithin an online computer system with respect to non-numericapplications, and to maximize the transferrate of the information channel linking the system andthe system user.  The code has direct applicationto problems in area such as information retrieval, documentclassification, computer-aided teaching andtext editing.  This code, called IPC (Information ProcessingCode), is an 8-bit code set constructedso that 7, 6, 5 and 4-bit subsets can be easily derivedfrom the basic set.  The code set is organizedso that simple binary operations can distinguish betweenthe numeric alphabetic, special symbol and controlcharacter codes.  The number of usable characters withinthe basic set size may be expanded either byuse of escape codes included in the set, or by suitableinterpretation of otherwise unassigned codeson the basis of the requirements of local environments.
1653	Calingaert, P.;	System Performance Evaluation: Survey and Appraisal	The state of the art of system performanceevaluation is reviewed and evaluation goals andproblems are examined.  Throughput, turnaround, andavailability are defined as fundamental measuresof performance; overhead and CPU speed are placed inperspective.  The appropriateness of instructionmixes, kernels, simulators, and other tools is discussed,as well as pitfalls which may be encounteredwhen using them.  Analysis, simulation, and synthesis arepresented as three levels of approach to evaluation,requiring successively greater amounts of information.The central role of measurement in performanceevaluation and in the development of evaluation methods is explored.
1654	Forsythe, G. E.;	A University's Educational Program in Computer Science	After a review of the power of contemporary computers,computer science is defined in severalways.  The objectives of computer science education arestated, and it is asserted that in a North Americanuniversity these will be achieved only through a computerscience department.  The program at StanfordUniversity is reviewed as an example.  The appendicesinclude syllabic of Ph.D. qualifying examinationsfor Stanford's Computer Science Department.
1655		Code Extension Procedures for InformationInterchange* (Proposed USA Standard)	
1656		Procedures for the Standardization Process* (Proposed USA Standard)	
1657	Harrison, M. C.;	Implementation of the SHARER2 Time-Sharing System	A simple mechanism is described for the executionof part of a program with its own memoryprotection.  This allows such a program to act as asuboperating system.  An improved version of theSHARER time-sharing system using this feature is described.
1658	Gue, R. L.;Liggett, J. C.;Cain, K. C.;	Analysis of Algorithms for the Zero-One Programming Problem	This paper is concerned with a review and examinationof several existing algorithms for thezero-one programming problem.  Computational experienceis summarized.  The machine time and storagerequirements of several of the algorithms are comparedover several test problems of small and intermediatesize.  Computer experiments still provide little hopeof solving problems with over 100 variables witha reasonable amount of machine time.
1659	Kuno, S.;Oettinger, A. G.;	Computational Linguistics in a Ph.D. Computer Science Program	This report contains recommendations for acourse curriculum on computational linguistics ina Ph.D. computer science program.  A classification of thesubject areas contained in computational linguisticsis presented, and ten courses in these areas are described.A basic bibliography in computational linguisticsis appended.
1660		Index By Subject To algorithms, 1960-1968	
1661	Kolbig, K. S.;	Multint (Algorithm 32 [D1])	
1662	Grad, J.;Brebner, M. A.;	Eigenvalues and Eigenvectors of a Real General Matrix [F2])	
1663	Snow, R. H.;	Generator of Random Numbers Satisfying the Poisson distribution [G5])	
1664	Howard, J. C.;Tashjian, H.;	An Algorithm for Deriving the Equations ofMathematical Physics by Symbolic Manipulation	A method is described whereby a digital computercan be used to derive the equations of mathematicalphysics in any curvilinear coordinate system requestedby the user.  The effectiveness of the techniqueis demonstrated by using it to derive the Navier-Stokesequations of fluid motion and the continuityequation.  To derive these equations by this method, theuser need know only the coordinate transformationequations relating the curvilinear coordinates of interestto an orthogonal Cartesian triad. When thisprogram is used and the coordinate transformation equationsare supplied as input, the computer willderive the Navier-Stokes equations and the continuityequation.  The equations obtained will be relativeto the curvilinear coordinate system specified by thetransformation equations used as input.  In thispaper the emphasis is on theoretical considerations andmethodology rather than on programming details.Results are presented for cylindrical polarand spherical polar coordinate systems.
1665	Johnson, W. L.;Porter, J. H.;Ackley, S. I.;Ross, D. T.;	Automatic Generation of Efficient LexicalProcessors Using Finite State Techniques	The practical application of the theory offinite-state automata to automatically generatelexical processors is dealt with in this tutorial articleby the use of the AED RWORD system, developedat M.I.T. as part of the AED-1 system.  This systemaccepts as input description of the multicharacteritems or of words allowable in a language given in termsof a subset of regular expressions. The outputof the system is a lexical processor which reads a stringof characters and combines them into the itemsas defined by the regular expressions.  Each outputitem is identified by a code number together witha pointer to a block of storage containing the charactersand character count in the item.  The processorsproduced by the system are based on finite-state machines.Each state of a "machine" corresponds toa unique condition in the lexical processing of a characterstring.  At each state a character is read,and the machine changes to a new state.  At each transitionappropriate actions are taken based on theparticular character read.  The system has been in operationsince 1966, and processors generated havecompared favorably in speed to carefully hand-coded programsto accomplish the same task.  Lexical processorsfor AED-O and MAD are among the many which have beenproduced.  The techniques employed are independentof the nature of the items being evaluated.  If theword "events" is substituted for character string,these processors may be described as generalized decision-makingmechanisms based upon an ordered sequenceof events.  This allows the system to be used in arange of applications outside the area of lexicalprocessing.  However convenient these advantages maybe, speed is the most important consideration.In designing a system for automatic generation of alexical processor, the goal was a processor whichcompletely eliminated backup or rereading, which was nearlyas fast as hand-coded processors, which wouldanalyze the language and detect errors, andwhich would be convenient and easy to use.
1666	Byrne, J. L.;Proll, L. G.;	Solution of Linear Programs in 0-1 Variablesby Implicit Enumeration (Algorithm 341 [H])	
1667	Noltemeier, A.;	Roots of Polynomials by a Root-Squaringand Resultant Routine (Algorithm 340 [C2])	
1668	Singleton, R. C.;	An Algol Procedure for the Fast Fourier Transformwith Arbitrary Factors (Algorithm 339 [C6])	
1669	Singleton, R. C.;	Algol Procedures for the Fast Fourier Transform (Algorithm 338 [C6])	
1670		Correspondences of 8-Bit and Hollerith Codes forComputer Environments (A USASI Tutorial Standard)	
1671	Borrow, D. G.;Fraser, J. B.;	A Phonological Rule Tester	The design and implementation of a system toalleviate the problem of rule evaluation for thelinguist in the area of phonology are presented.  Itpermits the user to define, on-line, sets of rulesstatable within the framework presented in The SoundPatterns of English by Chomsky and Halle, 1968,to define phonemes as bundles of specified distinctivefeatures, to define data as strings of phonemeswith associated grammatical structure, to test the effectof applying rules to the data, and to storeboth the definitions and results.  The rule applicationfacility described in detail was implementedby translating linguistic rules to rules in FLIP, aformat-directed list processor embedded in LISP.This made the system construction easy while providingsophisticated capabilities for the linguist.The system is written in BBN LISP on the ScientificData System 940 computer and is designed to be usedon-line in interactive fashion, with control returnedto the user after each command is executed.
1672	Rabinowitz, P.;	Practical Error Coefficients in the Integrationof Periodic Analytic Functions by the TrapezoidalRule	Theoretical and practical values of error coefficientsuseful in bounding the error in integratingperiodic analytic functions with the trapezoidal ruleare tabulated for various ranges of the parameters.
1673	Greenspan, D.;	Approximate Solution of Initial Boundary WaveEquation Problems by Boundary-Value Techniques	A new boundary-value technique is proposed forthe treatment of initial-boundary-value problemsfor linear and mildly nonlinear wave equations.   Severalillustrative examples are offered to demonstratethe ease with which the method can be applied.
1674	Marsaglia, G.;Bray, T. A.;	One-Line Random Number Generators and Their Use in Combinations	Some one-line random number generators, i.e.generators requiring a single FORTRAN instructionare discussed, and some short FORTRAN programs whichmix several such generators are described.  Theaim is to provide methods for incorporating random numbergenerators directly in FORTRAN programs, bymeans of a few in-line instructions.  The advantages arespeed (avoiding linkage to and from a subroutine),convenience, and versatility.  Anyone wishing to experimentwith generators, either using congruentialgenerators by themselves or mixing several generatorsto provide a composite with potentially betterstatistical properties than the library generatorscurrently available, may wish to consider some ofthe simple FORTRAN program discussed here.
1675	Korfhage, R. R.;	A Note on a Relevance Estimate and Its Improvement	In this paper the effect of iterating the improvementprocedure is examined.  It is shown thatapplications of the improvement factor beyond the firsttime are ineffectual, and that the factor isbut a scale factor.
1676	Mendicino, S. F.;Martin, J. T.;Ranelletti, J. E.;Zwakenberg, R. G.;	The LRLTRAN Compiler	Extensive software problems confront an organizationwhich possesses a number of differentcomputers and which frequently acquires new ones.To maintain cohesion, a system must be developed,written in a high level language, which minimizes machinedependencies and isolates those which are necessary.A language and a compiler for the language are discussedhere.  The language, called LRLTRAN, is a heavilyaugmented FORTRAN.  The tree-pass compiler makes useinternally of a postfix Polish notation (pass Ito pass II) and a tree representation referred to asa "composite blocking table" (pass I to pass III).Machine-independent optimization occurs in pass IIand DO-loop and machine-dependent optimization inpass III.
1677	Jodeit, J. G.;	Storage Organization in Programming Systems	The system of program and data representationthat has been in use on the Rice University computerfor five years is described.  Each logical entity in storageoccupies a block of consecutive memory locations.Each block is labeled by a codeword and may containa program, a data vector, or codewords which inturn label blocks to form arrays.  This storage arrangementis discussed with its realized advantagesor programming systems: simplicity of programmed addressing,flexibility of data structures, efficiencyof memory utilization, variability of system compositionduring execution, means of linkage between programsand from programs to data, and basis for storage protection.The application of labeled blocks may beextended to areas of time-sharing and multimedia storagecontrol.  On the basis of experience at rice,some ideas on such extensions are presented.
1678	McNaughton, R.;	Automata, Formal Languages, Abstract Switching,and Computability in a Ph.D. Computer ScienceProgram	A number of courses are listed in the areadescribe as automata, formal languages, abstractswitching, and computability, that might be availableto a Ph.D. student in computer science.  A briefcatalog description of each course is applied and therole of each of the courses in the graduate programis discussed.
1679	Bergland, G. D.;	A Fast Fourier Transform Algorithm for Real-Valued Series	A new procedure is presented for calculating thecomplex, discrete Fourier transform of real-valuedtime series.  This procedure is described for an examplewhere the number of points in the series isan integral power of two.  This algorithm preservesthe order and symmetry of the Cooley-Turkey fastFourier transform algorithm while effecting the two-to-onereduction in computation and storage whichcan be achieved when the series is real.  Also discussedare hardware and software implementations ofthe algorithm which perform only (N/4) log2 (N/2) complexmultiply and add operations, and which requireonly N real storage locations in analyzing each N-point record.
1680	Engvold, K. J.;Hughes, J. L.;	A General-Purpose Display Processing and Tutorial System	ADEPT (A display-Expedited Processing and Tutorial)system is described.  This system was designedto improve man-computer communications by employinga display unit to interleave tutoring with othercomputer operations such as simulation, programming, andinformation retrieval.  It is written in FORTRANIV (G) for the IBM System/360, Model 40, and the IBM 2250display Unit under Operating System/360.  Adeptis a cataloged program that controls the standard operatingsystem by terminating and rescheduling itselfautomatically, relinquishing computer resources allocatedto it, and surrendering control to the operatingsystem to perform other jobs.  It expands the powerand flexibility of computer-assisted instructionby making immediately available to students, teachers,and other users, the full resources (system-catalogedprograms) of the operating system.  Language processorsand compilers, simulation models, mathematicalsolution techniques, stored data, and all other library anduser programs can be incorporated into instructionalmaterial without reprogramming.  Illustrations of the variousapplications are presented and their implicationsare discussed.
1681	Rubinoff, M.;Bergman, S.;Cautin, H.;Rapp, F.;	Easy English,a Language for InformationRetrieval Through a Remote Typewriter Console	Easy English is a natural command languagedesigned to simplify communication between man andmachine through remote typewriter console.  It has been developedfor retrieval of documents from a computerizeddata base, the Moore School Information Systems Laboratoryfiles.  Requests are formulated in a standardizedsyntactical form (examples of which are presented), andthis form is then transformed into an equivalentquery expressed in the retrieval system's original SymbolicCommand Language, which is briefly described.Operation of easy English is detailed by illustrationof the transformations performed upon a samplerequest up to the point at which the request stringis sent to the system.  A macro flowchart of EasyEnglish is included, and an Appendix providesthe printout of a retrieval demonstration.
1682	Braden, H. V.;Wulf, W. A.;	The Implementation of a BASIC System in a Multiprogramming Environment	The implementation of a remote terminal BASIC systemwithin the context of an existing multiprogrammingcomputer system, the Burroughs B5500, is described.This implementation combines a unique mixture ofmachine language and interpretive techniques with an incremental compiler.
1683	Martin, D. F.;	Boolean matrix Methods for the Detection of Simple Precedence Grammars	A mechanical procedure is derived for determiningwhether a given context-free phrase structuregrammar is a simple precedence grammar.  This procedureconsists of elementary operations on suitablydefined Boolean matrices.  Application of theprocedure to operator grammars is also given.
1684	King, P. J. H.;	Ambiguity in Limited Entry Decision Tables	The use of decision tables as a tool in systemsanalysis and for program specification is nowbecoming accepted.  Rules on redundancy, contradiction,and completeness for limited entry tables werepublished in 1963.  These are usually used for checking,preceded if necessary by a conversion from extendedto limited entry form.  Processors which automaticallytranslate tables to more conventional programusually base their diagnostic facilities on these rules.In this paper it is suggested that these rulesare unsatisfactory and that the important aspect ofchecking is to eliminate ambiguity from tables.Ambiguity is defined and discussed, and a procedure forproducing checked-out decision tables is proposed.The theoretical basis of the algorithm used is established.The importance of well-designed diagnosticfacilities in decision table processors is emphasized.
1685	Schurmann, A.;	GAN, a System for Generating and Analyzing Activity Networks	GAN, a system for generating activity networks,is designed to save time in the preparationof activity networks and to deal conveniently with networkprograms.  A defining description of a programminglanguage designed for generating activity network froma set of standard networks is presented.  Also,a general idea of a language for performing calculationson activity networks (scheduling activity networks)is given.
1686	Lesem, L. B.;Hirsch, P. M.;	Computer Synthesis of Holograms for 3-D Display	Optical and digital holography are reviewed.The mathematical model and computational techniquesof the authors' digital holographic process are discussed,and applications of computer holography aresuggested.  Computer holograms have been made of three-dimensionalobjects which give faithful reconstructions,even in white light.  A new approach based on pointapertures for the image is discussed.  Photographsof the images reconstructed from digital holograms are presented.
1687	Bray, T. A.;Witzgall, C.;	Netflow (Algorithm 248 [H])	
1688	Henderson, J. H.;	Netflow (Algorithm 248 [H])	
1689	Pankiewicz, W.;	Calculation of a Polynomial and its DerivativeValues by Horner Scheme (Algorithm 337 [C1])	
1690	Bray, T. A.;Witzgall, C.;	Netflow (Algorithm 336 [H])	
1691	Whittlesey, J. R.;	A Comparison of the Correlational Behaviorof Random Number Generators for the IBM 360	Hutchinson states that the "new" (prime modulo)multiplicative congruential pseudorandom generator,attributed to D. H. Lehmer, has passed the usual statisticaltests for random number generators.  Itis here empirically shown that generators of this typecan produce sequences whose autocorrelation functionsup to lag 50 exhibit evidence of nonrandomness for manymultiplicative constants.  An alternative generatorproposed by Tausworthe, which uses irreducible polynomialsover the field of characteristic two, is shownto be free from this defect.  The applicability of thesetwo generators to the IBM 360 is then discussed.Since computer word size can affect a generator's statisticalbehavior the older mixed and simple congruentialgenerators, although extensively tested on computershaving 36 or more bits per word, may not be optimumgenerators for the IBM 360.
1692	Stewart III, G.W.;Lick, D. W.;	Numerical Solution of a Thin Plate Heat Transfer Problem	The numerical solution of a system of linearequations resulting from a discrete approximationto a thin plate heat transfer problem is considered.The slow convergence of point iterative methodsis analyzed and shown to be caused by one of the boundaryconditions. The difficulty may be removed bya standard line iterative technique.
1693	Garwick, J. V.;	GPL, a Truly General Purpose Language	A truly general purpose programming language,GPL, is described which contains facilities forconstructing (within the language) new data types aswell as facilities for operations performed uponthem.  The basic language is minimal in the sense thatno basic element can be derived from the otherswith high efficiency in the object programs.  Constructslike the ALGOL 60 for-statements,and if-statementsare not basic; they are special types of procedures.New "symbols" (underlined words in ALGOL 60) areimplicitly defined by usage in other declarations.  Aspart words are definable, packed words are handledas easily as full words.  "Address" variables(pointers) are included in full generality.
1694	Miller, G. D.;	An Algorithm for the Probability ofthe Union of a Large Number of Events	An algorithm is presented which efficiently evaluatesthe probability for the union of n independentand not mutually exclusive events. The problem is thatof evaluating the sums of the products of allpossible combinations of n variables in minimum time and storage space.
1695	Dill, J. C.;Randall, D. L.;Richer, I.;	PLEXUS-An On-Line System for Modeling Neural Networks	A description is presented of PLEXUS, a systemwhich enables a user to construct and specifya neural network, to analyze the output data producedby the network, and to store and retrieve networksand data from a library.  The system, operated entirelyfrom a digital display unit, interacts directlywith the user and permits easy and rapid transitionsbetween the various phases of the modeling process.PLEXUS is designed to complement neurophysiological researchso that the systematic development of neuralmodels can be coordinated with experimental work.  PLEXUSnetworks are built up from components representingindividual neurons, external stimuli, and interconnectingfibers, each component being of a relativelydetailed nature.  Provision is also made for the use ofexperimental data as input to a network.  Convenientmeans for specification and modification of a network andextensive error-checking capabilities are provided.Data resulting from the simulation of a network may beanalyzed by a variety of techniques ranging fromexaminations of the gross characteristics of the data tothe determination of detailed statistical properties.
1696	Fox, B. L.;Landi, D. M.;	An Algorithm for Identifying the Ergodic Subchainsand Transient States of a Stochastic Matrix	An algorithm for identifying the ergodic subchainsand transient states of a stochastic matrixis presented.  Applications in Markov renewal programmingand in the construction of variable lengthcodes are reviewed, and an updating procedure for dealingwith certain sequences of stochastic matricesis discussed.  Computation times are investigated experimentallyand compared with those of another recentlypropose method.
1697	Hayashl, H.;Duncan, S.;Kuno, S.;	Graphical Input/Output of Nonstandard Characters	A system developed at Harvard for graphicallyinputting and outputting nonstandard characterson a computer is printed.  In principle, the systemcan deal with any orthography, although at presentit is limited to 4000 Chinese characters and some mathematicalsymbols.  New characters can be addedto the repertoire of the system by graphical input ona display scope.  Text inputting is accomplishedvia a display scope or a Rand Tablet.  The organizationand operation of the current system are described,and a discussion of the relative merits of such a systemis given.  Illustrations of the computer inputand output of Chinese characters are included.
1698	Denning, P. J.;	A Statistical Model for Console Behavior in Multiuser Computers	The ability of a computer system to communicatewith the outside world efficiently is as importantas its ability to perform computations efficiently.It is quite difficult to characterize a particularuser, but rather easy to characterize the entire user community.Based on the properties of this communitywe have postulated a hypothetical "virtual console."No claim is made that a virtual console behaveslike any actual console, but the entire collection ofvirtual consoles models the collection of actualconsoles.  Using the model we answer questions like:How many processes are suspended waiting for consoleinput?  What is the maximum rate at which a process canexecute?  What bounds can be set on overall bufferrequirements?  Answers to these and similar questionsare needed in certain aspects of operating systemdesign.
1699	Rubinoff, M.;Bergman, S.;Franks, W.;Rubinoff, E.R.;	Experimental Evaluation of InformationRetrieval Through a Teletypewriter	Experiments designed to evaluate the capabilitiesof mechanized information retrieval systems,with emphasis on interactive (man-machine) language and onsome of the mechanical and psychological limitationsin their design, were conducted at the Moore School informationSystems Laboratory.  The basic assumptionof the research is that an information retrieval systemthat provides for man-machine dialogue at a remoteinquiry terminal should provide a searcher with manyof the tools which would be available to him werehe actually performing his search at a library or repositoryof documents.  Factors involved in evaluationof such a system include ease of use, learning time, andeffectiveness of actual retrieval.  Three experimentsand the conclusions resulting from them are detailed.
1700	Hutton, F. C.;	PEEKABIT, Computer Offspring of PunchedCard PEEKABOO, for Natural Language Searching	The "peekaboo" idea from punched card informationretrieval methods has been mated with theidea of superimposed punching to produce a programmingtechnique which cuts computer run time in halfon a test search of 33,000 subject index entries.  A searchprogram using the device has been operationalsince late 1963.  As an item is entered in the store,an 18-byte mask is created from the item's meaningfulwords using the inclusive OR operation.  If, at searchtime, the logical product (using the AND operation)of this mask and a similarly constructed question maskis not equal to the question mask, then one ormore question words are not present in the store item.An equality is in conclusive; the words of thestore item must be unpacked and compared with questionwords.  The present store is made up of over 600,000subject index entries estimated to average 60 characterseach.  Longer texts, such as abstracts, couldbe handled by multiple masks.
1701		Synchronous Signaling Rates for DataTransmission* (Proposed USA STandard)	
1702	Steel Jr., T. B.;	Commentary on Mr. Mooers' Paper	
1703	Mooers, C. N.;	Accommodating Standards and Identification of Programming Languages	The user public wants standardization andreliable identification of programming languagesand related services.  One way of achieving these goalsillustrated by the methods adopted for TRAC T-64interactive language, and its related family of languages.Oppressive rigidity usually associated withstandardization is avoided by a new accommodation techniqueaccessible to the user to allow local variationswith the language.  Explicit standardization of the languageis undertaken at the organizational sourceof the language.  Use of the organizational trademark(TRAC) on the published standards, and servicesrelying upon them, provides a reliable public identification.These methods can be usefully appliedto other programming languages and computer services.
1704	Muth, J. F.;	Minimum Excess Cost Curve (ALgorithm 217 [H])	
1705	De Vogelaere, R.;	A Set of Basic Input-Output Procedures (Algorithm 335 [15])	By means of the primitives in symbol, outsymboland length, as requested by this journal'sAlgorithms Policy [Comm. ACM 10 (Nov. 67), 729] a basicset of input-output procedures is defined aimingat quality and flexibility.  Outreal, for instance, iswritten as a derived procedure; it outputs usingthe fixed point or the floating point representation,and rounds properly.  Variants can easily be writtenbecause of the explicit call of the procedures decomposeinteger and decompose real.  The highly recommendedpractice of echoing input is made easy with one subsetof derived procedures (ioi, ior, iob, ioa).  Thedocumentation of output in the form of equivalent ALGOLstatements is also provided when use is madeof the subset oti, otr, otb, ota.  The Berkeley styleof providing information on the form of outputusing prior calls of procedures such as real format isdefined.  A use of the parameter outchannel toprovide information for simultaneous output to severalchannels is suggested.  Interrelationship betweenthe declared procedures is furnished in tabular form.
1706	Storm, E. F.;	CHAMP-Character Manipulation Procedures	A new programming language facility for symbolmanipulation is described.  String proceduresmay be declared and called in a standard ALGOL context.ALGOL procedures can in turn be called by stringprocedures so that numeric and symbolic processes mayconveniently be programmed together.  Concatenationand a variant of SNOBOL's pattern matching make upa set of primitive commands.  These are assembledtogether into conditional expressions which are to beused to provide alternative computational patterns.Arrays of strings are processed using quantifiers.The class of things which may be assigned to anidentifier can be restricted by a procedure expressedin the notation.  The language facilities havebeen implemented in the ALGOL compiler for the Burroughs B5500.
1707	Hall, C. A.;Porsching, T. A.;	Generation of Positive Test Matrices with Known Positive Spectra	Sufficient conditions are given for a realmatrix to be similar to a positive matrix.  Thisresult is used to construct a similarity transformationwhich, when applied to a particular upper triangularmatrix, yields a positive matrix with a preassigned positive spectrum.
1708	Borrow, D. G.;Murphy, D. L.;	A Note on the Efficiency of a LISP Computation in a Paged Machine	The problem of the use of two levels of storagefor programs is explored in the context ofa LISP system which uses core memory as a buffer fora large virtual memory stored on a drum.  Detailsof timing are given for one particular problem.
1709	Breaux, H. J.;	A Modification of Efroymson's Technique for Stepwise Regression Analysis	The computational technique conventionally usedfor stepwise multiple linear regression requiresthe storage of an n X n matrix of data.  When the numberof variables, n, is large, this requirementtaxes the storage capacity of presently used machinery.The near symmetry of the matrices involved permitsa modification requiring only half the storage and computationsof the conventional algorithm and thisadditional storage allows the analysis of problems containingmore variables.  Alternatively, it permitsthe analysis of problems containing the same numberof variables but with all computations performedin double precision.
1710	Lang, C. A.;Gray, J. C.;	ASP-A Ring Implemented Associative Structure Package	ASP is a general purpose Associative DataStructure Package in which an arbitrary number ofdata items and an arbitrary number of the relationshipsbetween these data items may be represented.A special picture language is described which has provedvery useful for drawing ASP structures on paper.ASP structures are built and manipulated by meansof a series of macro calls, which are outlined inthe Appendix.  Emphasis is on the philosophy of the systemrather than a particular implementation, thoughsufficient information is included to enable thereader to produce his own implementation of ASP.
1711	Banzhaf III, J. F.;	When Your Computer Needs a Lawyer	Possible liability for negligence, for othertorts (such as slander of credit) and for liabilityunder theories of express or implied warranty (guarantees)are discussed, and legal complications areexplained, so that users, operators, owners, and leasorsof computers may be alerted to potential legalproblems. Focus is also on trouble spots in contractingfor data processing services, in automating recordkeeping operations, in deciding whether or not to automatecertain operations, and in complying withstatutes and regulation relating to record keeping.Information is given on patents, copyrights andtrade secret protection for programs, and the problemof using copyrighted material in information storageand retrieval systems, including the pendingcopyright and patent revision bills.
1712	Lockemann, P. C.;Knutsen, W. D.;	Recovery of Disk Contents After System Failure	A method is discussed by which, after a systemmalfunction, the contents of disk files canbe restored to their status at the time of the failure.
1713	Stevens, D. F.;	On Overcoming High-Priority Paralysisin Multiprogramming Systems: A Case His tory	High-priority paralysis is the degradationthat can occur in multiprogramming systems whenscheduling is based primarily on preassigned priorities.It can be alleviated by modifying the schedulingalgorithm to maximize the number of programs activeat one time.  The case his tory given in this paperindicates two general methods by which simultaneity canbe increased.  Possible refinements in the schedulingalgorithm for future improvements are considered briefly.
1714	MacLaren, M. D.;	Procedure for the Normal Distribution (Algorithm 272 [S15])	
1715	De Vogelaere, R.;	Direct Search (Algorithm 178 [E4])	
1716	Bell, J. R.;	Normal Random Deviates (Algorithm 334 [G5])	
1717	Dietmeyer, D. L.;Duley, J. R.;	Generating Prime Implicants Via Ternary Encoding and Decimal Arithmetic	Decimal arithmetic, ternary encoding of cubes,and topological considerations are used in analgorithm to obtain the extremals and prime implicantsof Boolean functions. The algorithm, which hasbeen programmed in the FORTRAN language, generally requiresless memory than other minimization procedures,and treats DON'T CARE terms in an efficient manner.
1718	Ehrman, J. R.;	"Logical" Arithmetic on Computerswith Two's Complement Binary Arithmetic	Algorithms are presented for multiplicationand division of unsigned integer operands in whichthe digits normally reserved for signs participate assignificant arithmetic digits with positive weight.
1719	Stimler, S.;Brons, K. A.;	A Methodology for Calculating andOptimizing Real-Time System Performance	The continually increasing size, complexity,number of types, and cost of data processing systemsare causing serious re-examination within governmentand industry of the criteria for and methods ofcalculating and optimizing data processing system costand performance.  Real-time data processing systemsas typified by the automated airline reservation systemare discussed in this paper.  Criteria for evaluatingperformance are described; a methodology for calculatingand optimizing is outlined; and the method isillustrated by carrying out a portion of the performancecalculation and the optimization of a drum-orientedmessage switching system.
1720	Elliott, R. W.;	Master's Level Computer Science Curricula	The results of a survey of the course work doneby master's degree candidates at 25 US universitiesare presented, and some general comments concerningthe emphasis of these programs are given.
1721	Kuiken, H. K.;	Determination of the Intersection Points of TwoPlane Curves by Means of Differential Equations	A new method is proposed to calculate the intersectionpoints of two plane curves.  The theoryof singular points off a system of two differential equationsis used in developing the method. The intersectionpoint to be determined is identified with such a singularpoint and appropriate modifications are appliedto the system to ensure that the singular point be stable,i.e. all integrals which start in the neighborhoodof the singular point will always approach this pointif the integral parameter tends to infinity.  Inaddition a method is described for systematically searchingfor all intersection points in a prescribedrectangular area.
1722	McWilliams, G. V.;Thompson, R. W.;	Methods of Convergence Improvement for Some Improper Integrals	In the numerical integration of an improperintegral of the first kind, it is customary totruncate the integral when the change yielded by the lastiteration is less than some predetermined constant.The efficiency of such integration schemes can oftenbe improved by use of recent advances in the theoryof nonlinear transformations; however, for several importantintegrals, e.g. integrals whose integrandsare rational polynomials, these transformations failto yield much improvement.  In this paper, severalmethods of convergence improvement are developed which greatlyimprove convergence of some improper integrals,including the integrals of rational polynomials.
1723	Fisher, A. C.;Liebman, J. S.;Nemhauser, G. L.;	Computer Construction of Project Networks	Project networks are used in PERT and CPM.An algorithm is given for constructing projectnetworks directly from the project precedence relations.The algorithm creates "dummy" activities andtopologically orders the arcs and nodes.  The number ofnodes created is minimal for the given precedencerelations.  It has been experimentally programmedin FORTRAN II for the IBM 7094.
1724	Bayes, A.;	A Generalized Partial Pass Block Sort	The design of a partial pass block sort witharbitrary range of key and number of work filesis described. The design is a generalization of the PartialPass Column Sort by Ashenhurst and the AmphisbaenicSort by Nagler. The power of the sort is tabulated forvarious sizes of input file and number of workfiles. consideration is given to the problem of combininga block sort with internal sorts, and to thebest use of direct access storage devices.
1725	Wolinsky, A.;	A Simple Proof of Lewin's Ordered-RetrievalTheorem for Associative Memories	An efficient method of ordered retrieval of binarywords from an associative memory, as describedby Lewin, is based on the use of special readout circuitswhich indicate the digit values present inthe individual digit columns of the memory.  Thus thecircuits indicate whether the individual digitcolumns contain digits of both values, or of only onevalue, or contain no digits at all (i.e. that thememory is empty).  The use of these circuits, whichin this paper are termed column value indicators,reduces considerably the number of memory accesses necessaryto retrieve in order a number of distinctwords from the memory.  Lewin proves that, for the readoutby the described method of m distinct binarywords, 2m - 1 memory accesses are necessary.  (Thus heproves that the number of necessary memory accessesof his method, unlike those of other methods, is independentof the word length.)  In this paper a verysimple proof of this theorem derived from some elementaryaspects of the structure of sets of binarynumbers is presented.
1726	Nagy, G.;	Preliminary Investigation of Techniquesfor Automated Reading of Unformatted Text	Methods for converting unstructured printedmaterial into computer code are experimentallyinvestigated.  An operator-controlled mode, dependingon human demarcation of the various regions ofthe page for guiding the scanner, is implemented bymeans of a joystick and a CRT display.  This mode,for which some performance figures are obtained, is thoughtto be suitable for processing very complicatedmaterial, such as technical journals.  For simpler material,for instance the "claims" sections of patents,and in applications where the utmost accuracy is not necessary,an unsupervised mode is advocated.  Here,the textual portions of the page are located duringa rapid prescan by a rudimentary form of frequencyanalysis.  These areas are then rescanned at a higherresolution suitable for character recognition.Error rates of the order of 0.1 percent are obtained ina simple problem involving photographs of telephonecompany meter boards.  Other matters related to thedesign of a general purpose page reader, such asthe segmentation of printed text, the possibility oftime-sharing the scanner, interactive man-machineoperation, and the facsimile reproduction of illustrations, are discussed.
1727	Kral, J.;	One Way of Estimating Frequencies of Jumps in a Program	For the segmentation of a program it is usefulto have a reasonable estimation of the valuesof S(ij), where S(ij) is the mean value of the numberof jumps from the i-th instruction on to the j-thinstruction in the run time.  In the cases where theS(ij) are estimated directly, the structure of thewhole program must be generally taken into account;therefore it is very difficult for the programmerand/or the translator to obtain a good estimation ofthe S(ij).  It is easier to estimate not S(ij) butthe quantities P(ij)=S(ij)*C(i)/SUM[S(ij), j=1,N], whereC(i) is an arbitrary positive constant for eachi.  Although the P(ij) are, for each i, proportional toS(ij), the estimation of P(ij) is easier, becausewe must estimate only the "probabilities" of eventswhere instruction i is executed after instructionI(i).  This estimation can often be done without consideringthe structure of the whole program.  Inthe first part of the paper, using the theory of theMarkov chains, an algorithm for the computationof the S(ij) from the P(ij) is found, and some waysof obtaining estimates of the P(ij) are given.  Inthe second part a variant of this algorithm is derived,avoiding the necessity of computation involvinglarge matrices.
1728	Coffman, E. G.;Varian, L. C.;	Further Experimental Data on the Behaviorof Programs in a Paging Environment	Results are summarized from an empirical studydirected at the measurement of program operatingbehavior in those multiprogramming systems in whichprograms are organized into fixed length pages.The data collected from the interpretive execution ofa number of paged programs are used to describethe frequency of page faults, i.e. the frequency of thoseinstants at which an executing program requiresa page of data or instructions not in main (core) memory.These data are used also for the evaluationof page replacement algorithms and for assessing theeffects on performance of changes in the amountof storage allocated to executing programs.
1729	Salazar, R. C.;Sen, S.K.;	Minit Algorithm for Linear Programming (Algorithm 333 [H])	
1730	Witte, B. F. W.;	Jacobi Polynomials (Algorithm 332 [S22])	
1731	Gautschi, W.;	Gaussian Quadrature Formulas (Algorithm 331 [D1])	
1732	Oliver,I.;	Factorial Analysis of Variance (Algorithm 330 [G1])	
1733	Fenichel, R. R.;	Distribution of Indistinguishable Objectsinto Distinguishable slots (Algorithm [G6])	
1734	Bartels, R. H.;Goulub, H. G.;	Chebyshev Solution to an OverdeterminedLinear System (Algorithm 328 [F4])	
1735	Sutherland, I. E.;	A Futures Market in Computer time	An auction method is described for allocatingcomputer time that allows the price of computertime to fluctuate with the demand and the relative priorityof users to be controlled so that more importantprojects get better access.  This auction is free of theperiodic fluctuation in computer use often associatedwith monthly time allocation schemes.
1736		Heading Format for Data Transmission (A USAAI Tutorial -- Standards)	
1737	Unger, S. H.;	A Global Parser for Context-Free Phrase Structure Grammars	
1738	Brady, P. T.;	Writing an Outline Debugging Program for the Experienced User	Presently available online debugging routinesare often unsatisfactory for the experienceduser because they require unnecessarily rigid and complicatedtyping formats, make it difficult for theuser to correct typing errors, and consume excessivememory with intricate features.  In a debuggingprogram it is of prime importance that the programbe simple, flexible, and highly efficient to use.Communication between the user and the debugging programcan be improved by using certain techniquesapplicable to most online debugging programs.  Thesetechniques are presented and are illustrated bytheir use in OPAK (octal package), a debugging program codedfor the PDP-5/8 and the SDS-930.  The compromisebetween economy of utility program core storage and incorporationof elegant debugging features is discussed.
1739	Thompson, K.;	Regular Expression Search Algorithm	A method for locating specific character stringsembedded in character text is described andan implementation of this method in the form of a compileris discussed.  The compiler accepts a regularexpression as source language and produces an IBM 7094program as object language.  The object programthen accepts the text to be searched as input and producesa signal every time an embedded string inthe text matches the given regular expression.  Examples,problems, and solution are also presented.
1740	Anderson, G. B.;Rogers, D. W.;	An Inexpensive Braille Terminal Device	The active use of time-shared facilities forblind programmers requires a braille terminalsystem.  Details are given for the construction of abrailler from a model 33 teletype by modifying theprint head and increasing the resiliency of the platen.A description of the programming needed to drivethe brailler is presented.
1741	Ophir, D.;Rankowitz, S.;Shepherd, B. J.;Spinrad, R. J.;	BRAD: The Brookhaven Raster Display	A multiconsole computer display system hasbeen designed that provides very rich displays atlow unit cost.  Each BRAD (Brookhaven Raster Display)console can plot tens of thousands of points, orup to 4000 characters at 30 frames per second.  Afteran initial display system investment of $50,000each display, with teletype, costs less than $3,000.The technique employed is that of programmaticallygenerating a binary image of the desired display in acomputer.  The image is written on a rotating drummemory.  Independent read heads continuously displaythe picture, which is generated by swept horizontallines.  A standard TV monitor serves as the display device.The technique has two drawbacks.  A computermust compute any image to be displayed.  Also, the "pointing"interaction is more difficult.  This isbecause the pointing function gives only the coordinatesof the point on the screen.  The inverse ofthe map generation process is required to calculatethe coordinates of the point on the screen.  Theinverse of the map generation process is required tocalculate the coordinates at the selected pointin the input space.
1742	Myer, T. H.;	On the Design of Display Processors	The flexibility and power needed in the datachannel for a computer display are considered.To work efficiently, such a channel must have a sufficient numberof instructions that it is best understoodas a small processor rather than a powerful channel.As it was found that successive improvements tothe display processor design lie on a circular path, bymaking improvements one can return to the originalsimple design plus one new general purpose computer foreach trip around.  The degree of physical separationbetween display and parent computer is a key factor in display processor design.
1743	Lynch, W. C.;	Reliable Full-Duplex file Transmission over Half-Duplex Telephone Lines	A field-proven scheme for achieving reliableduplex transmission over a half-duplex communicationline is presented, and to demonstrate the difficultyof the problem, another similar scheme, which isonly slightly unreliable, is also presented.  A flowchartfor the reliable scheme and some interestingexamples are given.
1744	Bartels, R. H.;Golub, G. H.;	Stable Numerical Methods for Obtaining the ChebyshevSolution to an Overdetermined System ofEquations	An implementation of Stiefel's exchange algorithmfor determining a Chebyshev solution to anoverdetermined system of linear equations is presented,that uses Gaussian LU decomposition with rowinterchanges.  The implementation is computationally morestable than those usually given in the literature.A generalization of Stiefel's algorithm is developed whichpermits the occasional exchange of two equationssimultaneously.
1745	Dennis, J. B.;	A Position Paper on Computing and Communications	The effective operation of free enterprise increating the envisioned information service industryis dependent upon three accomplishments: (1) the restructuringof our information processing industryso that a clear division of costs is made among computing,communications, and the development of informationservices; (2) the wide use of multiaccess system conceptsso that information services may share in theuse of computer installations and so that the cost of theirconstruction is reasonable; and (3) the developmentof public, message-switched communications services sothat adequate provisions are made for informationsecurity.
1746	Graham, R.M.;	Protection in an Information Processing Utility	One of the critical problems in the designof an information processing utility that permitsflexible sharing of user information is privacy.One solution for this problem is discussed.
1747	Van Horn, E. C.;	Three Criteria for Designing Computing Systems to Facilitate Debugging	The designer of a computing system should adoptexplicit criteria for accepting or rejectingproposed system features.  Three possible criteria of thiskind are input recordability, input specifiability,and asynchronous reproducibility of output.  These criteriaimply that a user can, if he desires, eitherknow or control all the influences affecting the contentand extent of his computer's output.  To definethe scope of the criteria, the notion of an abstractmachine of a programming language and the notionof a virtual computer are explained.  Examples of applicationsof the criteria concern the reading ofa time-of-day clock,  the synchronization of parallelprocesses, protection in multiprogrammed systems,and the assignment of capability indexes.
1748	Lampson, B. W.;	A Scheduling Philosophy for Multiprocessing Systems	A collection of basic ideas is presented, whichhave been evolved by various workers over thepast four years to provide a suitable framework for thedesign and analysis of multiprocessing systems.The notions of process and state vector are discussed,and the nature of basic operations on processesis considered.  Some of the connections between processesand protection are analyzed.  A very generalapproach to priority-oriented scheduling is described,and its relationship to conventional interruptsystems is explained.  Some aspects of time-orientedscheduling are considered. The implementation ofthe scheduling mechanism is analyzed in detail and thefeasibility of embodying it in hardware established.Finally, several methods for interlocking the executionof independent processes are presented and compared.
1749	Dijkstra, E. W.;	The Structure of the "THE"-Multiprogramming System	A multiprogramming system is described inwhich all activities are divided over a number ofsequential processes.  These sequential processes are placedat various hierarchical levels, in eachof which one or more independent abstractions have beenimplemented.  The hierarchical structure provedto be vital for the verification of the logical soundnessof the design and the correctness of its implementation.
1750	Fuchel, K.;Heller, S.;	Considerations in the Design of a MultipleComputer System with Extended Core Storage	The use of large quantities of addressable(but not executable) fast random access memory toheighten the multiprogramming performance of a multicomputer systemis discussed.  The general designof the hardware arrangement and the software componentsand functions of such a system are based on aplanned configuration of dual CDC 6600's that share onemillion words of extended core storage.  In thegeneralization of such a design, special emphasis isplaced on estimating expected gains when comparedwith the traditional configuration of separate and independentcomputers without extended core storage.An observation is made on the use of conventional, slowerspeed, random access storage devices in placeof the faster memory.
1751	Denning, P. J.;	The Working Set Model for Program Behavior	Probably the most basic reason behind the absenceof a general treatment of resource allocationin modern computer systems is an adequate model forprogram behavior.  In this paper a new model, the"working set model," is developed. The working setof pages associated with a process, defined to bethe collection of its most recently used pages, providesknowledge vital to the dynamic management ofpaged memories.  "Process" and "working set" are shown tobe manifestations of the same ongoing computationalactivity; then "processor demand" and "memory demand"are defined; and resource allocation is formulatedas the problem of balancing demands against available equipment.
1752	Oppenheimer, G.;Weizer, N.;	Resource Management for a Medium Scale Time-Sharing Operating system	Task scheduling and resource balancing fora medium size virtual memory paging machine arediscussed in relation to a combined batch processingand time-sharing environment.  A synopsis is givenof the task scheduling and paging algorithms that were implemented,and the results of comparative simulationare given by tracing the development of the algorithmsthrough six predecessor versions.  Throughoutthe discussion particular emphasis is placed on balancingthe system performance relative to the characteristicsof all the system resources.  Simulation results relativeto alternate hardware characteristics and theeffects of program mix and loading variations are also presented.
1753	Daley, R. C.;Dennis, J. B.;	Virtual Memory, Processes, and Sharing in MULTICS	Some basic concepts involved in the designof the MULTICS operating system are introduced.MULTICS concepts of processes, address space, and virtualmemory are defined and the use of paging andsegmentation is explained.  The means by which usersmay share procedures and data is discussed and themechanism by which symbolic references are dynamicallytransformed into virtual machine addresses isdescribed in detail.
1754	Randell, B.;Kuehner, C. J.;	Dynamic Storage Allocation Systems	In many recent computer system designs, hardwarefacilities have been provided for easing theproblems of storage allocation.  A method of characterizingdynamic storage allocation systems-accordingto the functional capabilities provided and the underlyingtechniques used-is presented.  The basic purposeof the paper is to provide a useful perspective fromwhich the utility of various hardware facilitiesmay be assessed.  A brief survey of storage allocationfacilities in several representative computersystems is included as an appendix.
1755	ACM Special Interest Committee;	Proceedings of the ACM Symposium on Operating system Principles	
1756		Hollerith Punched Card Code* (Proposed USA Standard)	
1757		Data Code for Calendar Date for Machine-to-MachineData Interchange* (Proposed USA Standard)	
1758	McKay, S.;	Symmetric Polynomials, (Algorithm 305 [C1])	
1759	Bayer, G.;	Transportation Problem (Algorithm 293 [H])	
1760	Bergson, A.;	Normal Curve Integral (Algorithm 304 [S15])	
1761	O'Brien, W. M.;Wood, J.;	Chi-Squared Integral (Algorithm 299 [S15])	
1762	Kolbig, K. S.;	Dilogarithm (Algorithm 327 [S22])	
1763	Nonweiler, T. F.;	Roots of Low-Order Polynomial Equations (Algorithm 326 [C2])	
1764	Organick, E. I.;	Panel Discussion on Computer Appreciation	Session 19 of the ACM 20 th Anniversary Conferenceon August 31, 1967, was entitled Education,Design Experiments, and Computer Appreciation.  Its secondhalf consisted of a panel discussion on computerappreciation, organized and chaired by Elliot I. Organick.The four panelists were Charles H. Davidson,Bernard A. Galler, Richard, W. Hamming, and Alan J. Perlis.After making prepared statements, the panelistswere joined in discussion by Andries van Dam and ArthurB.Kohn, who had presented papers in the firsthalf.  This is a transcript of the panel discussion,condensed by Dr. Organick and edited by him andthe panelists.  Some remarks referred to papers by vanDam and Kahn or to the discussion during the firsthalf of the session.  Pertinent papers are included in the references.
1765	Hamblen, J. W.;	Expenditures, Sources of Funds, and Utilizationof Digital Computers for Research and Instructionin Higher Education: 1964-65 with Projections for 1968-69	The Southern Regional Education Board publisheda complete report on a survey it conductedto determine the funding and characterize the utilizationof computers used for research and instructionin institutions of higher education in the United States.The sampling survey is described and the estimatesfor this total population are presented.
1766	Bellman, R. E.;Kagiwada, H. H.;Kalaba, R. E.;Vasudenvan, R.;	Quasilinearization and the Estimationof Differential Operators from Eigenvalues	Given a linear ordinary differential operatorcontaining several unknown constants and a numberof its eigenvalues, the values of the unknown constantsare estimated.  A precise formulation is provided,and an effective numerical procedure for solution is indicated.The results of some computational experimentsare given.
1767	Kulsrud, H. E.;	A General Purpose Graphic Language	Interactive use of computers with graphic terminalswill permit many new problems to be solvedusing machines.  In order to handle a variety of applications,it is expedient to develop a general purposegraphic language that is useful on a number of graphicdevices.  A system has been designed to producesuch a language quickly and cheaply.  A model graphiclanguage which has been developed with the systemis presented.
1768	Unger, S. H.;	A Global Parser for Context-Free Phrase Structure Grammars	An algorithm for analyzing any context-free phrasestructure grammar and for generating a programwhich can then parse any sentence in the language (orindicate that the given sentence is invalid) isdescribed. The parser is of the "top-to-bottom" typeand is recursive . A number of heuristic procedureswhose purpose is to shorten the basic algorithm by quicklyascertaining that certain substrings of theinput sentence cannot correspond to the target nonterminalsymbols are included.  Both the generatingalgorithm and the parser have been implemented in RCASNOBOL and have been tested successfully on a numberof artificial grammars and on a subset of ALGOL.  Anumber of the routines for extracting data abouta grammar, such as minimum lengths of N-derivable stringsand possible prefixes, are given and may beof interest apart from their application in this particular context.
1769	Harder, E. L.;	The Expanding World of Computers	The onward sweep of automatic processing ofinformation is impeded by nine principal barriers:geography, cost, problem complexity, man-machine communication,inadequate sensors, lack of understanding,distance, time, and size.  The main incentive for breachingthese barriers is the universal need forprocessing information, ever more urgent as the greaterpart of human work activity changes from productionto service.  Computer developments in hardware, programming,time-sharing, education, data communication,and displays are judged by how effectively they remove thesebarriers, and their barrier-smashing potentialitiesindicate continued rapid expansion.  Problem-orientedlanguages are particularly effective over the entirefront.  Online computers and time-sharing also rate highby this measure.  Education and increased understandingare basic to all progress with the computer.  This complexbut powerful tool is the most important oneavailable to governments and scientists to use in studyingthe problems being created by the populationexplosion, and in analyzing possible solutions.
1770	Parker, D. B.;	Rules of Ethics in Information Processing	The background and motivation for the adoptionby the ACM Council on November 11, 1966, ofa set of Guidelines for Professional Conduct in InformationProcessing are described.  A brief his toryis given of ethical codes in other professions.  Somereasons for and against adoption of ethical rulesare considered, and several sections of the ACM Guidelinesare analyzed.  The purpose is to inform aboutthis important aspect of our profession, aswell as to stimulate thought and interest.
1771		CURRICULUM 68 -- Recommendations for AcademicPrograms in Computer Science -- A Report of theACM Curriculum Committee on Computer science	This report contains recommendations on academicprograms in computer science which were developedby the ACM Curriculum Committee on Computer Science.A classification of the subject areas containedin computer science is presented and twenty-two coursesin these areas are described.  Prerequisites,catalog descriptions, detailed outlines, and annotatedbibliographies for these courses are included.Specific recommendations which have evolved from theCommittee's 1965 Preliminary Recommendations aregiven for undergraduate programs.  Graduate programs in computerscience are discussed and some recommendationsare presented for the development of master's degree programs.Ways of developing guidelines for doctoralprograms are discussed, but no specific recommendationsare made. The importance of service courses,minors, and continuing education in computer science isemphasized.  Attention is given to the organization,staff requirements, computer resources, and other facilitiesneeded to implement computer science educationalprograms.
1772		USASCSOCR Dual Case Keyboard Arrangement* (Proposed USA Standard)	
1773		General Purpose Alphanumeric Keyboard Arrangementfor Information Interchange* (Proposed USAStandard)	
1774	Pankhurst, R. J.;	Program Overlay Techniques	The general features of program overlay systemsare described.  Three main types -- automatic,semiautomatic and nonautomatic -- are classified, and theprogramming techniques are explained as a functionof machine hardware and other system features.  Theimplementation of semiautomatic overlay facilityin a multiprogrammed system on the CDC 6600 is describedin detail, with special reference to real timeapplications.
1775	Zielke, G.;	Adjustment of the Inverse of a Symmetric Matrixwhen Two Symmetric Elements are Changed (Algorithm325 [F1])	
1776	Bayer, G.;	Maxflow (Algorithm 324 [H])	
1777	Ord-Smith, R. J.;	Generation of Permutations in Lexicographic Order (Algorithm 323 [G6])	
1778	Dorrer, E.;	F-Distribution (Algorithm 322 [S14])	
1779	Morris, J.;	t-Test Probabilities (Algorithm [S14])	
1780	Hunter, D. B.;	Harmonic Analysis for SymmetricallyDistributed Data (Algorithm 320 [C6])	
1781	Feldman, J.;Gries, D.;	Translator Writing systems	A critical review of recent efforts to automatethe writing of translators of programming languagesis presented.  The formal study of syntax and its applicationto translator writing are discussed inSection II.  Various approaches to automating the post syntactic(semantic) aspects of translator writingare discussed in Section III, and several related topics in Section IV.
1782	Meisel, W. S.;	A Numerical Integration Formula Useful in Fourier Analysis	A numerical integration formula is presented whichuses unequal sampling intervals.  The intervalsare equally spaced on a log scale.  Such a formulationis useful in Fourier analysis to improve accuracyand ease of usage.  A complete set of formulasfor numerical Fourier analysis is given.
1783	Matula, D. W.;	In-and-Out Conversions	Byan in-and-out conversion we mean that a floating-pointnumber in one base is converted intoa floating-point number in another base and then convertedback to a floating-point number in the originalbase.  For all combinations of rounding and truncationconversions the question is considered of howmany significant digits are needed in the intermediatebase to allow such in-and-out conversions to returnthe original number (when possible), or at least significant digit.
1784	Rabinowitz, P.;	Practical Error Coefficients for EstimatingQuadrature Errors for Analytic Functions	All published error coefficients for estimatingquadrature errors for analytic functions werecomputed on the assumption that the quadrature rulewas exact for polynomials up to a given degree.Since these rules use rounded values for the abscissas andweights and since the true values of the integralsof some of the polynomials in question have an infinitebinary expression, the quadrature rule is notexact.  Hence these errors must be taken into considerationin computing practical error coefficients.
1785	Morris, R.;	Scatter Storage Techniques	Scatter storage techniques as a method forimplementing the symbol tables of assemblers andcompilers are reviewed and a number of ways of usingthem more effectively are presented.  Many of themost useful variants of the techniques are documented.
1786	Maurer, W. D.;	An Improved Hash Code for Scatter Storage	Introduced is a hash coding method based onfixed-point division rather than multiplicationor logical operations.  This new method allows thehash table to have almost any length.  Also a newmethod of handling collisions is discussed.  Known asquadratic search, this method is faster than randomsearch and free from the "clusters" that build up with a linear search.
1787	Gries, D.;	Use of Transition Matrices in Compiling	An algorithms is described which constructsfrom a suitable BNF grammar an efficient left-rightrecognizer for sentences of the corresponding language.The type of recognizer, used in a number ofcompilers, operates with a pushdown stack and witha transition matrix.  Two examples illustrate howsuch recognizers may be used effectively for otherpurposes besides the usual syntax checking.
1788	Halpern, M. J.;	Toward a General Processor for Programming Languages	Many efforts have been made to develop a betterway of implementing a higher level programminglanguage than by the construction of a whole new compiler,but so far none has proved generally satisfactory.In this paper, it is contended that a programminglanguage is best described functionally as a bodyof macro instructions, and that the macro call constitutesa canonical form in terms of which a programmingnotation may be described.  A supporting discussion of thelogical and his torical role of the macro instructionis presented.  Also discussed are the conflict betweenmachine independence and object program efficiency,and the question of where the greatest difficultieslie in compiler construction.
1789	Hoare, M. R.;	Logarithm of Gamma Function (Algorithm 291 [S14])	
1790	Whitley, V. W.;	Muller's Method for Finding roots of anArbitrary Function  (Algorithm 196 [C5])	
1791	Green, D. R.;	Triangular Factors of Modified Matrices (Algorithm 319 [F1])	
1792	Sackman, H.;Erikson, W. J.;Grant, E. E.;	Exploratory Experimental Studies ComparingOnline and Off line Programming Performance	Two exploratory experiments were conducted atSystem Development Corporation to compare debuggingperformance of programmers working under conditionsof on-line and off line access to a computer.  Theseare the first known studies that measure programmers'performance under controlled conditions for standardtasks.  Statistically significant results of both experimentsindicated faster debugging under onlineconditions, but perhaps the most important practical findinginvolves the striking individual differencesin programmer performance.  Methodological problems encounteredin designing and conducting these experimentsare described; limitations of the findings are pointedout; hypotheses are presented to account for results;and suggestions are made for further research.
1793		Presentation of Alphameric Characters for InformationProcessing* (Proposed American NationalStandard)	
1794	Seraphin, D. S.;	A Fast Random Number Generator for IBM 360	
1795	Fateman, R. J.;	Optimal Code for Serial and Parallel Computation	
1796		Index by Subject to Algorithms, 1969	
1797	Proll, L. G.;	Solution of Linear programs in 0-1 (Algorithm 341 [H])	
1798	Kolbig, K. S.;	Coulomb Wave Functions (Algorithm 300 [S22])	
1799	Bray, T. A.;	Elementary Functions by Continued Fractions (Algorithm 229 [B1])	
1800	Parsons, R. G.;	PSIF (Algorithm 147 [S14])	
1801	Claringbold, P. J.;	Analysis of Variance for Balanced Experiments (Algorithm 367 [G2])	
1802	Claringbold, P. J.;	Regression Using Certain Direct Product Matrices (Algorithm 366 [G2])	
1803	Bach, H.;	Complex Root Finding (Algorithm 365 [C5])	
1804	Herriot, R. G.;	Coloring Polygonal Regions (Algorithm 364 [Z])	
1805	Lasser, D. J.;	Productivity of Multiprogrammed Computers-Progressin Developing an Analytic Prediction Method	Multiprogramming as it is discussed here isa mode of computer operation in which two or moreprograms are concurrently in processor memory and proceeding,each using the same central processor unit(CPU) and input-output (I/O) channels.  These programsare actually proceeding intermittently and singly,according to eligibility (readiness to proceed) and priority.It is useful to be able to represent themas proceeding continuously and simultaneously, eachat an effective rate, which may be a fraction ofthat which it would enjoy in the absence of the otherprograms.  The effective progress rate of eachprogram is sensitive to many detailed characteristicsof itself and its co-residents and simulation hasbeen the best available method of predicting it.  Thispaper presents the results of progress in developingan alternative to simulation, a simulation-tested iterativecomputation of these rates under certainsituations.  The algorithm is sensitive to most of thefactors that control the phenomenon, includingnonquantitative or topological features of the programs' structures.
1806	Bach, H.;	On the Downhill Method	The downhill method is a numerical method forsolving complex equations f(z) = 0 on which theonly restriction is that the function w = f(z) mustbe analytical.  An introduction to this method isgiven and a critical review of relating literature ispresented.  Although in theory the method alwaysconverges, it is shown that a fundamental dilemma existswhich may cause a breakdown in practical applications.To avoid this difficulty and to improve the rate ofconvergence toward a root, some modifications ofthe original method are proposed and a program (FORTRAN)based on the modified method is given in Algorithm365.  Some numerical examples are included.
1807	Busam, V. A.;England, D. E.;	Optimization of Expressions in Fortran	A method of optimizing the computation ofarithmetic and indexing expressions of a Fortranprogram is presented.  The method is based on a linearanalysis of the definition points of the variablesand the branching and DO loop structure of the program.The objectives of the processing are (1) toeliminate redundant calculations when references aremade to common subexpression values, (2) to removeinvariant calculations from DO loops, (3) to efficientlycompute subscripts containing DO iteration variables,and (4) to provide efficient index register usage.  Themethod presented requires at least a three-passcompiler, the second of which is scanned backward.  Ithas been used in the development of several FORTRANcompilers that have proved to produce excellent objectcode without significantly reducing the compilationspeed.
1808	Van Tassel, D.;	Advanced Cryptographic Techniques for Computers	Cryptographic techniques which can be used tomaintain the confidentiality of information processedby computers are dealt with.  Special emphasis is paidto the unique characteristics of computer filesthat make many cryptographic methods of little use.Relative security, costs, and preferred methodsare included in this paper.
1809	Parter, S. V.;	Numerical Analysis in a Ph.D. Computer Science Program	Numerical Analysis is the study of methods andprocedures used to obtain "approximate solutions"to mathematical problems.  Much of the emphasis is on scientificcalculation.  The difficulties of educationin such a broad area center around the question of backgroundand emphasis.  The Numerical Analysis programin the Computer Science Department should emphasize anawareness of the problems of computer implementationand experimental procedures.  Nevertheless, there is aneed for a solid background in applied mathematics.
1810	Sayre, D.;	Is Automatic "Folding" of Programs Efficient Enough To Displace Manual?	The operation of "folding" a program intothe available memory is discussed.  Measurementsby Brown et al. and by Nelson on an automatic foldingmechanism of simple design, a demand paging unitbuilt at the IBM Research Center by Belady, Nelson,O'Neil, and others, permitting its quality to becompared with that of manual folding, are discussed,and it is shown that given some care in use theunit performs satisfactorily under the conditions tested,even though it is operating across a memory-to-storageinterface with a very large speed difference.  The disadvantagesof prefolding, which is required whenthe folding is manual, are examined, and a number ofthe important troubles which beset computing todayare shown to arise from, or be aggravated by, thissource.  It is concluded that a folding mechanismwill probably become a normal part of most computing systems.
1811	Rosenfeld, J. L.;	A Case Study in Programming for Parallel-Processors	An affirmative partial answer is provided tothe question of whether it is possible to programparallel-processor computing systems to efficiently decreaseexecution time for useful problems.  Parallel-processorsystems are multiprocessor systems in which several ofthe processors can simultaneously execute separatetasks of a single job, thus cooperating to decreasethe solution time of a computational problem. Theprocessors have independent instruction counters, meaningthat each processor executes its own task programrelatively independently of the other processors.  Communicationbetween cooperating processors is bymeans of data in storage shared by all processors.  Aprogram for the determination of the distributionof current in an electrical network was written for aparallel-processor computing system, and executionof this program was simulated.  The data gathered fromsimulation runs demonstrate the efficient solutionof this problem, typical of a large class of importantproblems.  It is shown that, with proper programming,solution time when N processors are applied approaches1/N times the solution time for a single processor,while improper programming can actually lead to an increaseof solution time with the number of processors.Stability of the method of solution was also investigated.
1812	Grosenbaugh, L. R.;	More on Fortran Random Number Generators	
1813	Ord-Smith, R. J.;	Generation of Permutations in Pseudo-LexicographicOrder (Algorithm 308 [G6])	
1814	Smith, L. B.;	Direct Search (Algorithm 178 [E4])	
1815	Tomlin, F. K.;Smith, L. B.;	Direct Search (Algorithm 178 [E4])	
1816	Watson, W. T.;	Generalized Least Squares Fit By OrthogonalPolynomials (Algorithm 296 [E2])	
1817	Hall, G.;Ray, V. A.;	Computation of Fourier Coefficients (Algorithm 255 [C6])	
1818	Cobb, S. M.;	Associated Legendre Functions of the First Kindfor Real or Imaginary Arguments (Algorithm 47[S16])	
1819	Gautschi, W.;	Complex Error Function (Algorithm 363 [S15])	
1820	Robson, J. M.;	Generation of Random Permutations (Algorithm 362 [G6])	
1821	Shriver, B.;Eberlein, P. J.;Dixon, R. D.;	Permanent Function of a Square Matrix I and II (Algorithm 361 [G6])	
1822	Dial, R. B.;	Shortest-Path Forest with Topological Ordering (Algorithm [H])	
1823	Howell, J. R.;	Factorial Analysis of Variance (Algorithm [G1])	
1824	Balzer, R. M.;Farber, D. J.;	APAREL-A Parse-Request Language	APAREL is described: this language is an extensionto an algorithmic language (PL/I) that providesthe pattern-matching capabilities normally found onlyin special purpose languages such as SNOBOL4 andTMG.  This capability is provided through parse-requestsstated in a BNF-like format.  These parse-requestsform their own programming language with special sequencingrules.  Upon successfully completing a parse-request,an associated piece of PL/I code is executed.  Thiscode has available for use, as normal PL/I stringsthe various pieces (at all levels) of the parse.  Italso has available as normal PL/I variables, theinformation concerning which of the various alternativeswere successful.  Convenient facilities formultiple input-output streams, the initiation of sequencesof parse-requests as a subroutine, and parse-timesemantic checks are also included.  APAREL has proven convenientin building a powerful SYNTAX and FUNCTIONmacro system, an algebraic language preprocessor debuggingsystem, an on-line command parser, a translatorfor Dataless Programming, and as a general string manipulator.
1825	Korenjak, A. J.;	A Practical Method for Constructing LR(k) Processors	A practical method for constructing LR(k) processorsis developed.  These processors are capableof recognizing and parsing an input during a singleno-backup scan in a number of steps equal to thelength of the input plus the number of steps in itsderivation.  The technique presented here is basedon the original method described by Knuth, but decreasesboth the effort required to construct the processorand the size of the processor produced.  This procedureinvolves partitioning the given grammar intoa number of smaller parts.  If an LR(k) processor can beconstructed for each part (using Knuth's algorithm)and if certain conditions relating these individualprocessors are satisfied, then an LR(k) processorfor the entire grammar can be constructed for them.Using this procedure, an LR(1) parser for ALGOLhas been obtained.
1826	Fenichel, R. R.;Yochelson, J. C.;	A LISP Garbage-Collector for Virtual-Memory Computer Systems	In this paper a garbage-collection algorithmfor list-processing systems which operate withinvery large virtual memories is described.  The objectof the algorithm is more the compaction of activestorage than the discovery of free storage.  Because freestorage is never really exhausted, the decisionto garbage collect is not easily made; therefore,various criteria of this decision are discussed.
1827	Pinkerton, T. B.;	Performance Monitoring in a Time-Sharing System	A software measurement facility which is part ofa general purpose time-sharing system is described.The Date Collection Facility (DCF) has been implementedin the Michigan Terminal System (MTS) for theSystem/360 model 67.  It exists for the purpose of monitoringoperating system and user program behaviorand performance.  The overall structure of MTS is outlinedin order to explain the implementation ofthe DCF.  Events in the system are identified and recordedfrom within the supervisor, and dumped tomagnetic tape by an auxiliary program for off-line processing.Events in user programs which are unrelatedto system actions are recorded with a supervisor call.The time of occurrence of each event is accuratelyrecorded, and data items are further identified by job andtype.  The overhead associated with data collectionand its interference with normal jobs is carefully analyzed,and both are shown to be minimal.  Severalexamples are given of information obtained with thefacility and of applications in which it has beenuseful.  Some general guidelines are offered forthe construction of future monitoring programs.
1828	Shoshani, A.;Bernstein, A. J.;	Synchronization in a Parallel-Accessed Data Base	The following problem is considered:  Givena data base which can be manipulated simultaneouslyby more than one process, what are the rules for synchronizationwhich will maximize the amount of parallelactivity allowed.  It is assumed that the data basecan be represented as a graph.  An example of sucha data base is a hierarchy of directories for an on-linefile system.  Methods for synchronization ofprocesses are examined; their validity isdiscussed and their performance compared.
1829	Bond, A. H.;Rightnour, J.;	An Interactive Graphical Display Monitor ina Batch-Processing Environment with Remote Entry	A graphic monitor program is described.  Itwas developed at Carnegie-Mellon University forthe CDC G21 computer, which is a general purpose, batch-processingsystem with remote entry.  The existingG21 system and the graphics hardware are described.The graphic monitor is a resident auxiliary monitorwhich provides comprehensive managerial capabilityover the graphical system in response to commandsfrom the human user.  It also will respond to commandsfrom a user program through a similar interface,where routine calls take the place of manual actions.  Thusthe human and program can interact on a symmetricaland equal basis through the medium of the graphic monitor.The choice made in designing the graphicmonitor, given the constraints of the existing hardwareand computer system, are discussed.  The structureof the monitor program and the human and program interfacesare described.  There is also a transientswapping version with a small resident part,and provision for swapped used submonitors.
1830	Bayes, A. J.;	Retrieval Times for a Packed Direct Access Inverted File	
1831	Stanfel, L. E.;	A Comment on Optimal Tree Structures	
1832	Dunham, C. B.;	Minimax Logarithmic Error	
1833	Herriot, J. G.;	An Ambiguity in the Description of ALGOL 60	
1834	Hoare, C. A. R.;	An Axiomatic Basis for Computer Programming	In this paper an attempt is made to explorethe logical foundations of computer programmingby use of techniques which were first applied in thestudy of geometry and have later been extended toother branches of mathematics.  This involves the elucidationof sets of axioms and rules of inferencewhich can be used in proofs of the properties of computerprograms.  Examples are given of such axiomsand rules, and a formal proof of a simple theorem isdisplayed.  Finally, it is argued that importantadvantages, both theoretical and practical, mayfollow from a pursuance of these topics.
1835	Dewar, R. B. K.;Hochsprung, R. R.;	The IITRAN Programming Language	The IITRAN language, developed to be usedby students, and its important important featuresare described. IITRAN is a procedure-oriented languagewith a one-level block structure and a varietyof data types.  Several novel and powerful featuresare included.  A discussion of design principlesto be followed in a student language is given.
1836	Bell, J. R.;	A New Method for Determining Linear PrecedenceFunctions for Precedence Grammars	The precedence relations of a precedence grammar canbe precisely described by a two-dimensionalprecedence matrix.  Often the information in the matrixcan be represented more concisely by a pair ofvectors, called linear precedence functions.  A new algorithmis presented for obtaining the linear precedencefunctions when given the precedence matrix; this algorithmis shown to possess several computationaladvantages.
1837	Singleton, R. C.;	An Algol Convolution Procedure Based on theFast Fourier Transform (Algorithm 345 [C6])	
1838	Adams, A. G.;	Normal Curve Integral (Algorithm 304 [S15])	
1839	Businger, P. A.;Goulub, G. H.;	Singular Value Decomposition of a ComplexMatrix (Algorithm 358 [F1, 4,5])	
1840	Singleton, R. C.;	An Efficient Prime Number Generator (Algorithm 357 [A1])	
1841	Singleton, R. C.;	A Prime Number Generator Using TheTreesort Principle (Algorithm 356 [A1])	
1842	Simoes, J. M. S.;	An Algorithm for Generating Ising Configurations (Algorithm 355 [Z])	
1843	Brown, W. S.;Richman, P. L.;	The Choice of Base	A digital computer is considered, whose memorywords are composed on N r-state devices plustwo sign bits (two state devices).  The choice of baseB for the internal representation of floating-pointnumbers on such a computer is discussed.  It isshown that in a certain sense B= r is best.
1844	Baskin, H. B.;Horowitz, E. B.;Tennison, R. D.;Rittenhouse, L. E.;	A Modular Computer Sharing System	An alternative approach to the design and organizationof a general purpose interactive multiterminalcomputing system is presented.  The system organization describedis a conceptually simple arrangementof a bank of interchangeable computers, each of whichis a memory/processor pair, that are assigned toprocess terminal jobs as they arrive.  One of the computersserves as the master or control computerand supervises the collection and distribution of messagesfrom and to the remote terminals.  In thesimplest form there is a disk drive for each connectedterminal.  A crosspoint switching network allowsany such disk drive to be connected to any computer.Thus, while each active terminal user "occupies"a dedicated disk drive, he may share the computer withmany other terminal users in a simple manner.The ratio of users to computers is dependent on boththe size and power of the machines used and thecomputation requirements of the particular mix of users.This system organization is inherently a simplerand therefore more reliable approach to time-sharing computersand has the potential of a highly availablesystem at relatively low cost.  Economic configurationsare possible for a range of systems sizes thatspan at least one order of magnitude.  Finally, problemprograms developed by remote terminal users canbe run on a dedicated batch system if compatible computers are used.
1845	Lanzano, B. C.;	Loader Standardization for Overlay Programs	The overlay capability is described for fourof the third generation computer systems: CDC-6000,GE-635, IBM-360, and UNIVAC-1108.  A critique of thefirst three systems is based on actual experiencewith a large overlaid trajectory simulation program;a short history and description of this programis presented.  A standardization of minimum capabilitiesfor loaders is recommended so that programswhich must operate under more than one computer systemmay be easily converted and maintained.  A proposalthat overlay software incorporates a memory occupationspecification concept instead of the conditionaltree structure is delineated.  This concept providesmore efficient and cost-effective utilization ofthe memory as well as increased flexibility in program structure.
1846	Parnas, D. L.;	On Simulating Networks of Parallel Processesin Which Simultaneous Events May Occur	Some of the problems of simulating discreteevent systems, particularly computer systems, ona conventional digital computer are dealt with.  Thesystems are assumed to be described as a networkof interconnected sequential processes.  Briefly reviewedare the common techniques used to handle suchsimulations when simultaneous events do not occur, canbe ignored, or can be handled by simple priorityrules.  Following this, the problem of dealing with simultaneousevents in separate processes is introduced.An abstraction of this problem is developed which admitssolution for a majority of commonly encounteredproblems.  The technique will either find a method ofsimulating the parallel events or report that nonecan be found.  In some of the latter cases it is shownto be possible to find a solution by extendingthe information available to the solution technique, butin many cases the technique becomes computationallyunfeasible when the additional information is provided.
1847	Paton, K.;	An Algorithm for Finding a Fundamental Set of Cycles of a Graph	A fast method is presented for finding a fundamentalset of cycles for an undirected finitegraph.  A spanning tree is grown and the vertices examinedin turn, unexamined vertices being storedin a pushdown list to await examination.  One stagein the process is to take the top element v of thepushdown list and examine it, i.e. inspect all thoseedges (v,z) of the graph for which z has not yetbeen examined.  If z is already in the tree, a fundamentalcycle is added; if not, the edge (v,z) isplaced in the tree.  There is exactly one such stagefor each of the n vertices of the graph.  For largen, the store required in creases as n^2 and the time asn^g where g depends on the type of graph involved.g is bounded below by 2 and above by 3, and it is shownthat both bounds are attained.  In terms ofstorage our algorithm is similar to that of Gotlieb andCorneil and superior to that of Welch; in termsof speed it is similar to that of Welch and superiorto that of Gotlieb and Corneil.  Testsshow ouralgorithm to be remarkably efficient (g=2) on random graphs.
1848	Silverman, G.;	The Damped Taylor's Series Method for Minimizinga Sum of Squares and for Solving Systems ofNonlinear Equations (Algorithm 315 [E4, C5])	
1849	Hamilton, P. A.;Boothroyd, J.;	Function Minimization (Algorithm 251 [E4])	
1850	Leitch, I. M.;	Generation of Permutations in Lexicographic Order (Algorithm 323 [G6])	
1851	McIlroy, M. D.;	Generator of Spanning Trees (Algorithms 354 [H])	
1852	Orgass, R. J.;Waite, W. M.;	A Base for a Mobile Programming System	An algorithm for a macro processor which hasbeen used as the base of an implementation, bybootstrapping, of processors for programming languages isdescribed.  This algorithm can be easily implementedon contemporary computing machines.  Experience withprogramming languages whose implementation is basedon this algorithm indicates that such a language canbe transferred to a new machine in less than oneman-week without using the old machine.
1853	Hansen, W. J.;	Compact List Representation: Definition,Garbage Collection, and System Implementation	Compact lists are stored sequentially in memory,rather than chained with pointers.  Sincethis is not always convenient, the Swym system permitsa list to be chained, compact, or any combinationof the two.  A description is given of that list representationand the operators implemented (most aresimilar to those of LISP 1.5).  The system garbage collectorattempts to make all lists compact; it relocatesand rearranges all of list storage using temporary storage.This unique list-compacting garbage collectionalgorithm is presented in detail.  Several classes of themacros used to implement the system are described.Finally, consideration is given to those design factorsessential to the success of a plex processingsystem implementation.
1854	Wirth, N.;	On Multiprogramming, Machine Coding, and Computer Organization	The author feels that the interrupt featurewhich is available in most modern computers isa potent source of programming pitfalls and errors, andthat it therefore may heavily contribute to theunreliability of programs making use of it.  A programmingscheme is presented which avoids the conceptof the interrupt and permits the specification of concurrent(or pseudoconcurrent) activities in a supposedlymore perspicuous manner.  It is intended to serve asa basis for the construction of operating systems,which are prime examples of programs with concurrentactivities.  The scheme includes a set of basicinstructions for the generation, termination, and synchronizationof parallel processes.  A set of routinesrepresenting these instructions and thereby simulating ahypothetical machine organization has been implementedand test on the IBM System/360.  Two programs using theseinstructions, written in PL360, are presented.
1855	Dewar, H.;Bratley, P.;	A Program for the Syntactic Analysis of English Sentences	A program is described which produces syntacticanalyses of English sentences with respectto a transformational grammar.  The main features of theanalyzer are that it uses only a limited dictionaryof English words and that it pursues all analysis pathssimultaneously while processing the sentencefrom left to right.  The form of representation usedfor the dictionary and the grammar is indicatedand an outline account is given of the analysis procedure.Techniques for keeping the size of the analysisrecord within reasonable limits and for avoiding the needfor dynamic application of certain transformationalrules are described.   A number of examples of outputproduced by the program are given.  The outputincludes timing information.
1856	Quillian, M. R.;	The Teachable Language Comprehender:A Simulation Program and Theory of Language	The Teachable Language Comprehender (TLC) isa program designed to be capable of being taughtto "comprehend" English text.  When text which the programhas not seen before is input to it, it comprehendsthat text by correctly relating each (explicit or implicit)assertion of the new text to a large memory.This memory is a "semantic network" representing factualassertions about the world.  The program alsocreates copies of the parts of its memory which havebeen found to relate to the new text, adapting andcombining these copies to represent the meaning of thenew text.  By this means, the meaning of all textthe program successfully comprehends is encoded intothe same format as that of the memory.  In thisform it can be added into the memory.  Both factualassertions for the memory and the capabilities forcorrectly relating text to the memory's prior contentare to be taught to the program as they are needed.TLC presently contains a relatively small number ofexamples of such assertions and capabilities, butwithin the system, notations for expressing either of theseare provided.  Thus the program now correspondsto a general process for comprehending language, andit provides a methodology for adding the additionalinformation this process requires to actually comprehendtext of any particular kind.  The memory structureand comprehension process of TLC allow new factual assertionsand capabilities for relating text to suchstored assertions to generalize automatically.  Thatis, once such an assertion or capability is putinto the system, it becomes available to help comprehenda great many other sentences in the future.Thus the addition of a single factual assertion orlinguistic capability will often provide a largeincrement in TLC's effective knowledge of the world andin its overall ability to comprehend text.  Theprogram's strategy is presented as a general theory of language comprehension.
1857	Chase, S. M.;Fosdick, L. D.;	Filon Quadrature (Algorithm [D1])	
1858	Chase, S. M.;Fosdick, L. D.;	An Algorithm for Filon Quadrature	An algorithm for Filon quadrature is described.Considerable attention has been devoted toan analysis of the round-off and truncation errors.The algorithm includes an automatic error controlfeature.
1859	Hall, C. A.;	Error Bounds for Periodic Quintic Splines	Explicit error bounds for periodic quintic splineinterpolation are developed.  The first (third)derivative of the periodic spline is shown to be a sixth(fourth) order approximation at the mesh pointsto the first (third) derivative of the function being interpolated.
1860	Feldman, J. A.;	An Algol-Based Associative Language	A high level programming language for large,complex associative structures has been designedand implemented.  The underlying data structure hasbeen implemented using a hash-coding technique.The discussion includes a comparison with other workand examples of applications of the language.
1861	Arden, B. W.;Galler, B. A.;Graham, R. M.;	The MAD Definition Facility	One of the first definition facilities forhigher level languages is described.  Users of thelanguage can define new operators and/or data typesinto the MAD language, so that their use appearsas if they were predefined.  Information is given onhow one writes definitions, as well as on much ofthe motivation behind the form in which definitions arewritten. Some conclusions are drawn about futuredefinitional facilities.
1862	Finerman, A.;	Computing Capabilities at Argentine and Chilean Universities	The author reports on a trip to universities inArgentina and Chile during November 1968, describinguniversity conditions and computing activities.  As elsewhere,these universities are experiencing studentdiscontent with the status quo and the solutions theyare attempting contrast: Argentina is excludingstudents from participating in university government;Chile is allowing such participation.  Universitycomputing service and academic activities are limited.The number of computers is small and so is thecapacity, none larger than an IBM 360/40; with someexception, computing science academic programs arerare. This situation is by no means attributable tothose responsible for computing developments, whostrive for excellence; rather the "system" is hard toover-come.  Universities, especially those withstrong European traditions, adapt slowly to new academicresources and disciplines; superimposed arethe severe technological and economic constraints of thedeveloping nation.  Consequently, in the absenceof conscious government emphasis on strengthening computingcapabilities, future progress may be retarded.
1863	Messham, D. K.;	Minit Algorithm for Linear Programming (Algorithm 333 [H])	
1864	Boothroyd, J.;	Generation of Hilbert Derived Test Matrix (Algorithm 274 [F1])	
1865	Sauer, G.;	Algol 60 Reference Language Editor (Algorithm 268 [R2])	
1866	Clemm, D. S.;	Characteristic Values and Associated Solutionsof Mathieu's Differential Equation (Algorithm352 [S22])	
1867	Hooker, W. W.;	On the Expected Lengths of Sequences Generatedin Sorting by Replacement Selecting	In the replacement-selecting technique of sorting,one is interested in the ratio L(j) of theexpected length of the j-th sequence generated by thetechnique to the number of memory cells used.Using complex-variable theory, it is shown that L(j)-> 2 and that, asymptotically, the average intervalbetween sign changes of L(j)-2 is 2.6662.
1868	Kennedy, M.;	On Obtaining Correct Input:A New Approach	Most information put into machine readableform, whether from scientific or business origins,is still keypunched.  This paper is addressed towardthe difficulty of obtaining correctly keypunchedand key verified data and an alternative method is suggestedin which the computer itself is used to ruleout the possibility of errors in input.  This techniqueis explained and illustrated by reference toa working program which involves essentially two phases:in the first phase errors are detected by themachine, and subsequently, in the second phase, they are corrected by it.
1869	Kain, R. Y.;	Block Structures, Indirect Addressing, and Garbage Collection	Programming languages have included explicitor implicit block structures to provide a namingconvenience for the programmer.  However, when indirectaddressing is used, as in SNOBOL, naming constraintsmay be introduced.  Two modifications to SNOBOL are described,resulting in two desirable consequences:(1) naming constraints disappear even when there isindirect addressing within function definitions;and (2) there is a significant saving in the number ofcalls to the garbage collector, because some garbageis collected, at little expense, each time a functionreturns to its calling program.  These modificationshave been implemented as an extension to a SNOBOL dialect.
1870	Donnelly, T.;	Some Techniques for Using Pseudorandom Numbers in Computer Simulation	An algorithm is described by which uniform pseudorandomintegers may be used to construct binary"numbers" in which the probability that each bit in theword is a 1-bit and can assume any desired parametervalue.  Techniques for making use of such "numbers"in simulation programming are described.
1871	Cottafava, G.;LeMoli, G.;	Automatic Contour Map	Some methods for contour mapping by means ofa digital plotter are discussed, and a new methodis presented that is simple enough to be implemented byprograms with a rather small number of instructions(about 120 FORTRAN IV instructions are required).  Comparisonswith some methods proposed by other authorsare also performed,  A FORTRAN IV program implementingthe proposed method is available at the Istitutodi Elettrotecnica ed Elettronica, Politencnico di Milano.
1872	Salzer, H. E.;	Chebyshev Interpolation and QuadratureFormulas of Very High Degree (Errata)	
1873	Fox, B. L.;	Accelerating LP Algorithms	It is shown how a novel method for computing(related) inner products can accelerate the pricingphase of LP algorithms.  Other LP applications are indicated.
1874	Hemmerle, W. J.;	Generating Pseudorandom Numbers on a Two'sComplement Machine such as the IBM 360	The familiar multiplicative congruential generatoris examined in the context of the type oftwo's complement arithmetic used in the IBM 360 series.Different sequences of residues are consideredand relationships established among them.  It is shownthat a sequence of positive and negative residuesmay be produced more simply and economically than withthe conventional approach and yet have twice theperiod of the latter without loss of desirable statisticalproperties.  Another easily generated sequenceinvolving absolute values is also shown to have twicethe period but with less attractive statisticalproperties.  The statistical properties of these sequencesare given and related to previously establishedcriteria.
1875	Amos, D. E.;Slater, M. L.;	Polynomial and Spline Approximation by Quadratic Programming	The problem of approximation to a given function,or of fitting a given set of data, wherethe approximating function is required to have certainof its derivations of specified sign over thewhole range of approximation, is studied.  Two approachesare presented, in each of which quadratic programmingis used to provide both the constraints on the derivativesand the selection of the function which yieldsthe best fit.  The first is a modified Bernstein polynomialscheme, and the second is a spline fit.
1876	Schneider, A. J.;	Generation of Test Matrices Having CertainSign Patterns and Prescribed Positive Spectra	A class of orthogonal transformations is presentedwhose members transform a given positivediagonal matrix into a matrix having one of four special sign patterns.
1877	Habermann, A. N.;	Prevention of System Deadlocks	A well-known problem in the design of operatingsystems is the selection of a resource allocationpolicy that will prevent deadlock.  Deadlock is thesituation in which resources have been allocatedto various tasks in such a way that none of the taskscan continue.  The various published solutionshave been somewhat restrictive: either they do not handlethe problem in sufficient generality or theysuggest policies which will on occasion refuse a requestwhich could have been safely granted.  Algorithmsare presented which examine a request in the light ofthe current allocation of resources and determinewhether or not the granting of the request will introducethe possibility of a deadlock.  Proofs givenin the appendixes show that the conditions imposed bythe algorithms are both necessary and sufficientto prevent deadlock.  The algorithms have been successfully used in the THE system.
1878	Weizenbaum, J.;	Recovery of Reentrant List Structures in SLIP	One consequence of the reference-count-basedspace-recovery system employed by SLIP is thatreentrant list structures are not recovered even whenexplicitly erased.  LISP-like garbage-collectionschemes are free of this impediment.  They however,depend on being able to find and mark nodes thatare reachable from program variables.  By tracing alldescendants from program variables may then beidentified and collected.  The list-creating functionLIST of SLIP may be amended to mark those listsfor which the programmer wishes to assume responsibility.Given this modification, a LISP-like garbagecollector that recovers abandoned reentrant list structuresmay then be appended to the SLIP system.
1879	Randell, B.;	A Note on Storage Fragmentation and Program Segmentation	The main purpose of this paper is the presentationof some of the results of a series of simulationexperiments investigating the phenomenon of storage fragmentation.Two different types of storage fragmentationare distinguished: (1) external fragmentation, namely theloss in storage utilization caused by the inabilityto make use of all available storage after it has beenfragmented into a large number of separate blocks;and (2) internal fragmentation, the loss of utilizationcaused by rounding up a request for storage,rather than allocating only the exact number of words required.The most striking result is the apparentlygeneral rule that rounding up requests for storage,to reduce the number of different sizes of blockscoexisting in storage, causes more loss of storageby increased internal fragmentation than is savedby decreased external fragmentation.  Described also area method of segment allocation and an accompanyingtechnique for segment addressing which take advantageof the above result.  Evidence is presented ofpossible advantages of the method over conventional paging techniques.
1880	Golub, G. H.;	Chebyshev Solution to an OverdeterminedLinear System (Algorithm 328 [F4])	
1881	MacLeod, I. D. G.;	Transpose Vector Stored Array (Algorithm 302 [K2])	
1882	Duke, B. J.;	Determination of the Square Root of a PositiveDefinite Matrix (Algorithm 298 [F1])	
1883	Fair weather, G.;	Modified Romberg Quadrature(Algorithm [D1])	
1884	Belady, L. A.;Nelson, R. A.;Shedler, G. S.;	An Anomaly in Space-Time Characteristics ofCertain Programs Running in a Paging Machine	The running time of programs in a paging machinegenerally increases as the store in whichprograms are constrained to run decreases.  Experiments,however, have revealed cases in which the reverseis true: a decrease in the size of the store is accompaniedby a decrease in running time.  An informaldiscussion of the anomalous behavior is given, and forthe case of the FIFO replacement algorithm a formaltreatment is presented.
1885	Friedman, J.;	A Computer System for Transformational Grammar	A comprehensive system for transformationalgrammar has been designed and implemented on theIBM 360/67 computer.  The system deals with the transformationalmodel of syntax, along the lines ofChomsky's Aspects of the Theory of Syntax. The majorinnovations include a full,formal description ofthe syntax of a transformational grammar, a directed randomphrase structure generator, a lexical insertionalgorithm, an extended definition of analysis, anda simple problem-oriented programming language inwhich the algorithm for application of transformationscan be expressed.  In this paper we present thesystem as a whole, first discussing the general attitudes underlyingthe development of the system, thenoutlining the system and discussing its more importantspecial features.  References are given to paperswhich consider some particular aspect of the system in detail.
1886	Breuer, M. A.;	Generation of Optimal Code for Expressions via Factorization	Given a set of expressions which are to becompiled, methods are presented for increasing theefficiency of the object code produced by first factoringthe expressions, i.e. finding a set of subexpressionseach of which occurs in two or more other expressionsor subexpressions.  Once all the factors have beenascertained, a sequencing procedure is applied whichorders the factors and expressions such that allinformation is computed in the correct sequence and factorsneed be retained in memory a minimal amountof time.  An assignment algorithm is then executed inorder to minimize the total number of temporarystorage cells required to hold the results of evaluatingthe factors.  In order to make these techniquescomputationally feasible, heuristic procedures areapplied, and hence global optimal results are notnecessarily generated.  The factorization algorithmsare also applicable to the problem of factoringBoolean switching expressions and of factoring polynomialsencountered in symbol manipulating systems.
1887	Sweet, R. A.;	A Recursive Relation for the Determinant of a Pentadiagonal Matrix	A recursive relation, relating leading principalminors, is developed for the determinant ofa pentadiagonal matrix.  A numerical example is includedto indicate its use in calculating eigenvalues.
1888	Blue, J. L.;	Spline Function Methods for Nonlinear Boundary-Value Problems	The solution of the nonlinear differential equationY"=F(x,Y,Y') with two-point boundary conditionsis approximated by a quintic or cubic spline functiony(x).  The method is well suited to nonuniformmesh size and dynamic mesh size allocation.  For uniformmesh size h, the error in the quintic spliney(x) is O(h^4), with typical error one-third that fromNumerov's method.  Requiring the differentialequation to be satisfied at the mesh points resultsin a set of difference equations, which are blocktridiagonal and so are easily solved by relaxation or other standard methods.
1889	Parker Jr., L. T.;Gallie, T. M.;Brooks Jr., F. P.;Ferrel, J. K.;	Introducing Computing to Smaller Collegesand Universities -- A Progress Report	By technical means that are now routine, computerservice for smaller colleges and universitiescan be provided by remote terminals of a central facility.Access, however, is not enough-effectiveorganizational and educational methodology for introducingcomputing at such institutions must also bedeveloped.  The experience of two years with a statewidenetwork involving-41 institutions is discussed.Lessons include the importance of a separate organizationrepresenting the small colleges, the necessityfor on-campus training for the institutions, the needfor some special programming and documentationto support such users,and the development of curriculum by evolutionary means.
1890	Sakai, T.;Nagao, M.;	Simulation of Traffic Flows in a Network	A computer simulation program which dealswith traffic flows in the network of a large areais described.  Each road is segmented into blocks ofseveral ten-meter lengths and is represented bya bidirectional list in computer memory.  The movementof cars, i.e. the transfer of cars from one blockto the next, is expressed by a proper formula.  Thisformula is based on the supposition that the speedof cars in a block is determined only by the density ofcars in the block, and this speed-versus-densitycurve is empirically given the numerical values.  Thissimulation scheme has its excellent point in thatit makes it possible to trace the dynamic behaviorof traffic flows in a variety of situations, someexamples of which are given for an actual area of the city of Kyoto, Japan.
1891	Ophir, D.;Shepherd, B. J.;Spinrad, R. J.;	Three-Dimensional Computer Display	A stereographic display terminal has beenproduced using the raster display (BRAD) recentlydeveloped at Brookhaven.  The system uses a rotating refreshmemory to feed standard television monitors.To produce a stereographic display the computer calculatesthe projected video images of an object,viewed from two separate points.  The resulting videomaps are stored on separate refresh bands of therotating memory.  The two output signals are connectedto separate color guns of a color television monitor,thus creating a superimposed image on the screen.  Opticalseparation is achieved by viewing the imagethrough color filters.  The display is interactive andcan be viewed by a large group of people at thesame time.
1892	Wallace, V. L.;Mason, D. L.;	Degree of Multiprogramming in Page-on-Demand Systems	A simple stochastic model is described whichoffers a base for understanding the relationshipbetween the number of programs permitted to share memory(the degree of multiprogramming), drum trafficrates, and central processing unit utilization in page-on-demand,multiprogrammed, time-shared computersystems.  The model preserves, as a key feature, theproperty of page-demand statistics which impliesa "burst" of page demands at the beginning of any jobor quantum execution.  The model, a Markov chain,is analyzed numerically and the results are presented graphicallyfor a wide range of key environment-descriptiveparameters.  Implications of the results to time-sharedsystem design and programming are discussed,and a calculation of the optimal degree of multiprogrammingfor a wide range of parameters is presentedgraphically.
1893	Noltemeier, A.;	Roots of Polynomials by a Root-Squaringand Resultant routine (Algorithm 340 [C2])	
1894	Knop, R.;	Normal Random Deviates (Algorithm 334 [G5])	
1895	Hill, I. D.;	Gaussian Quadrature Formulas (Algorithm 331 [D1])	
1896	Gautschi, W.;	Regular Coulomb Wave Functions (Algorithm 292 S22])	
1897	Kolbig, K. S.;	Coulomb Wave Functions (Algorithm 300 [S22])	
1898	Kolbig, K. S.;	Regular Coulomb Wave Functions (Algorithm 292 [S22])	
1899	Bartels, R. H.;Golub, G. H.;	Simplex Method Procedure Employing Lu Decomposition (Algorithm 350 [H])	
1900		Clarification of Fortran Standards-Initial Progress	In 1966 after four years of effort, FORTRANbecame the first programming language standardizedin the United States.  Since that initial achievement,study and application of the standard specificationshave revealed the need for maintenance of the standards.As the result of work initiated in 1967, aninitial set of clarifying interpretations has been prepared.The nature of the maintenance, correctionsto the standard specifications, and completed interpretations are reported.
1901	Belady, L. A.;Kuehner, C. J.;	Dynamic Space-Sharing in Computer Systems	A formalization of relationships between space-shadingprogram behavior, and processor efficiencyin computer systems is presented.  Concepts of value andcost of space allocation per task are definedand then value and cost are combined to develop a singleparameter termed value per unit cost.  The intentis to illustrate a possible analytic approach to theinvestigation of the problems of space-sharing andto demonstrate the method on sample problems.
1902	Hext, J. B.;Winings, J. W.;	An Automatic Grading Scheme for Simple Programming Exercises	A discussion is given of alterations that weremade to a typical university operating systemto record the results of programming exercises in threedifferent languages, including assembly language.In this computer-controlled grading scheme provisionis made for testing with programmer-supplied dataand for final runs with system-supplied data.  Exercisesrun under the scheme may be mixed with otherprograms, and no special recognition of exercises by the operators is necessary.
1903	Salzer, H. E.;	Chebyshev Interpolation and Quadrature Formulas of Very High Degree	
1904	Rabinowitz, P.;	Rough and Ready Error Estimates in GaussianIntegration of Analytic Functions	
1905	Bartels, R. H.;Goulub, G. H.;	The Simplex Method of Linear Programming Using LU Decomposition	Standard computer implementations of Dantzig'ssimplex method for linear programming are basedupon forming the inverse of the basic matrix and updatingthe inverse after every step of the method.These implementations have bad round-off error properties.This paper gives the theoretical backgroundfor an implementation which is based upon the LU decomposition,computed with row interchanges, of thebasic matrix.  The implementation is slow, but has goodround-off error behavior.  The implementationappears as CACM Algorithm 350.
1906	Lass, S.E.;	Automated Printed Circuit Routing with a Stepping Aperture	A computer program for routing interconnectionson a two-sided printed circuit board with aregular pattern of lines, pins (terminals), and vias(feed-through holes) is described.  In this program,each interconnection is given a planned routing-typically,down from the upper pin, through a via, andhorizontally to the lower pin.  From the top, a virtualaperture (i.e. a long horizontal slit) is steppeddown the board.  The planned routing is the basis forrerouting interconnections within the apertureto resolve conflicts for lines and vias below the apertureand to maximize the effective line usage.If a conflict has not been resolved before the aperturearrives at the lower pin,interconnections aredeleted to resolve the conflict.  Extensions of this techniqueto the control of crosstalk between routedinterconnections and to the problem of obtaining100 percent interconnect are also discussed.
1907	Bartlett, K. A.;Scantlebury, R. A.;	A Note on Reliable Full-Duplex Transmission over Half-Duplex Links	A simple procedure for achieving reliable full-duplextransmission over half-duplex links isproposed. The scheme is compared with another of thesame type, which has recently been described inthe literature.  Finally, some comments are made onanother group of related transmission procedureswhich have been shown to be unreliable under some circumstances.
1908	Gold, M. M.;	Time-Sharing and Batch-Processing:  An ExperimentalComparison of Their Values in a Problem -Solving Situation	An experimental comparison of problem-solvingusing time-sharing and batch-processing computersystems conducted at MIT is described in this paper.This study is the first known attempt to evaluatetwo such systems for what may well be the predominant userpopulation within the next decade-the professionalswho, as nonprogrammers, are using the computer as anaid in decision-making and problem-solving ratherthan as a programming end in itself.  Statisticallyand logically significant results indicate equalcost for usage of the two computer systems; however,a much higher level of performance is attained bytime-sharing users.  There are indications that significantlylower costs would have resulted if thetime-sharing users had stopped work when they reacheda performance level equal to that of the batchusers.  The users' speed of problem-solving and theirattitudes made time-sharing the more favorablesystem.
1909	Stroud, A. H.;Kohli, J. P.;	Computation of Jn(x) by Numerical Integration	It is shown to be practical to compute Jn(x) bynumerical integration of its integral representationusing the trapezoidal rule. The error in thisapproximation was studied empirically.
1910	Rose, D. J.;	An Algorithm for Solving a Special Classof Tridiagonal Systems of Linear Equations	An algorithm is presented for solving a systemof linear equation Bu=k where B is tridiagonaland of a special form.  It is shown that this algorithmis almost twice as fast as the Gaussian eliminationmethod usually suggested for solving such systems.In addition, explicit formulas for the inverse anddeterminant of the matrix B are given.
1911	Petrick, S. R.;Postal, P. M.;Rosenbaum, P. S.;	On Coordination Reduction and Sentence Analysis	A class of coordination phenomena in naturallanguages is considered within the frame workof transformational theory.  To account for these phenomenait is proposed that certain machinery beadded to the syntactic component of a transformationalgrammar. This machinery includes certain ruleschemata, the conditions under which they are to beapplied, and conditions determining the sequenceof subtrees on which they are to be performed.  A solutionto the syntactic analysis problem for thisclass of grammars is outlined.  Precise specificationof both the generative procedure of this paperand its inverse is given in the form of LISP function definitions.
1912	Katz, J. H.;	Simulation of Outpatient Appointment Systems	An experimental computer program is describedwhich simulates appointment systems employedby outpatient departments of hospitals.  Both major kindsof appointment systems-individual and block-canbe simulated.  The purpose of the Simulator is to enablethe user to evaluate the effectiveness of alternativeappointment systems in a given clinical environment.
1913	Schwachheim, G.;	Polygamma Functions with Arbitrary Precision (Algorithm 349 [S14])	
1914	Klimpel, R. R.;	Matrix Scaling by Integer Programming (Algorithm 348 [F1])	
1915	Galimberti, R.;Montanari, U.;	An Algorithm for Hidden Line Elimination	The algorithm presented causes the elimination ofhidden lines in the representation of a perspectiveview of concave and convex plane-faced objects on thepicture plane.  All the edges of the objects areconsidered sequentially, and all planes which hide everypoint of an edge are found.  The computing timeincreases roughly as the square of the number of edges.The algorithm takes advantage of a reduced numberof concave points and automatically recognizes if onlyone object with no concave points is considered.In this last case, the result is obtained in a much simpler way.
1916	Lowe, T. C.;	Analysis of Boolean Program Models for Time-Shared, Paged Environments	Directed graphs or their associated matrices arefrequently used to represent the logical structureof sequences of computer instructions.  Such techniquesare used and, in addition, data references arerepresented in a nondirected model. The complete structuralspecification of a program is representedby a combined model.  A transformation of the combinedmodel yields a new model in which additional timinginformation is also contained.  Analysis of these modelsprior to execution yields information valuablein determining segmentation of instructions and data fora time-shared environment, as well as for initialpage loading; during execution, the analysis may beused for "look ahead" control of page turning.
1917	Singleton, R. C.;	An Algol Procedure for the Fast Fourier Transformwith Arbitrary Factors (Algorithm 339 [C6])	
1918	Gray, M.;	Distribution of Indistinguishable Objectsinto Distinguishable Slots (Algorithm 329 [G6])	
1919	Singleton, R. C.;	An Efficient Algorithm for Sorting withMinimal Storage (Algorithm 347 [M1])	
1920	Morris, J.;	F-Test Probabilities (Algorithm 346 [S14])	
1921	Singleton, R. C.;	An Algol Convolution Procedure Based on theFast Fourier Transform (Algorithm 345 [C6])	
1922		Proposed USA Standard (Data Communication ControlProcedures for the USA Standarad Code for InformationInterchange)	
1923	Rosin, R. F.;	Pseudofiles	An approach to system interfaces for highlevel languages using basic input/output supportfacilities is described.  It is shown that this techniquecan provide potentially inexpensive methodsfor programs to communicate with deeply embeddedfacilities such as command language processors.
1924	McKellar, A. C.;Coffman Jr., E. G.;	Organizing Matrices and Matrix Operations for Paged Memory Systems	Matrix representations and operations are examinedfor the purpose of minimizing the page faultingoccurring in a paged memory system.  It is shown thatcarefully designed matrix algorithms can lead toenormous savings in the number of page faults occurringwhen only a small part of the total matrix canbe in main memory at one time.  Examination of addition,multiplication, and inversion algorithms showsthat a partitioned matrix representation (i.e. one submatrixor partition per page) in most cases inducedfewer page faults than a row-by-row representation.The number of page-pulls required by these matrixmanipulation algorithms is also studied as a functionof the number of pages of main memory availableto the algorithm.
1925	Morse, S. P.;	Concepts of Use in Contour Map Processing	Generalized techniques whose use can simplifythe solution of problems relating to contourmaps.  One of these techniques makes use of the topologicalproperties of contour maps.  The topologyis represented by a graphical structure in which adjacentcontour lines appear as connected nodes.  Anothergeneralized technique consists of utilizing geometricalproperties to determine the characteristics ofstraight lines drawn on the contour map.  Both of thesetechniques have been applied to the problem oflocating the ground track of an aircraft fromelevation readings obtained during a flight.
1926	Berns, G. M.;	Description of FORMAT, a Text-Processing Program	FORMAT is a production program which facilitatesthe editing and printing of "finished" documentsdirectly on the printer of a relatively small (64k) computersystem.  It features good performance, totallyfree-form input, very flexible formatting capabilitiesincluding up to eight columns per page, automaticcapitalization, aids for index construction, and aminimum of nontext items.  It is written entirelyin FORTRAN IV.
1927	Salton, G.;	Information Science in a Ph.D. Computer Science Program	This report contains recommendations on a sample coursecurriculum in the general area of informationorganization and information system design in a Ph.D.Computer Science Program.  The subject area isfirst briefly described, followed by a listing of some desirablegraduate-level courses.  Suitable bibliographiesare appended.
1928	Ulrich, E. G.;	Exclusive Simulation of Activity in Digital Networks	A technique for simulating the detailed logicnetworks of large and active digital systemsis described.  Essential objectives sought are improvedease and economy in model generation, economyin execution time and space, and a facility for handlingsimultaneous activities.  The main results obtainedare a clear and useful separation of structural and behavioralmodel description, a reduction of manualtasks in converting Boolean logic into a structural model,the elimination of manual processes in achievingexclusive simulation of activity, an event-schedulingtechnique which does not deteriorate in economyas the event queue grows in length, and a simulationprocedure which deals effectively with any mixtureof serial and simultaneous activities.  The passage oftime is simulated in a precise, quantitative fashionand systems to be simulated may be combinations of synchronousand asynchronous logic.  Certain aspectsof the techniques described may be used for the simulationof network structures other than digital networks.
1929	Schroeder, M. R.;	Images from Computers and Microfilm Plotters	Digital computers are widely used for theprocessing of information and data of all kinds,including the pictorial information contained in photographsand other graphical representations.  Efficientconversion facilities for putting graphical informationinto the computer and retrieving it in graphicalform are therefore much needed.  One of the most commonlyemployed devices for obtaining permanent graphicaloutput from digital computers is the microfilm plotter.Regrettably, present models have no provisionfor producing images with a continuous gray scale or "half tones."In this note several programming techniquesare described for obtaining half tone pictures from amicrofilm plotter under the control of a digitalcomputer.  Illustrative examples of several methods are given.
1930	Kruskal, J. B.;	Extremely Portable Random Number Generator	Extremely portable subroutines are sometimesneeded for which moderate quality and efficiencysuffice.  Typically, this occurs for library functions(like random number generation and in core sorting)which are not entirely universal or are not used in astandardized way.  The literature on random numbergenerators does not seem to contain an algorithm thatmeets requirements of this sort.  An extremelyportable 8-line FORTRAN program is provided which basedon an important paper by Coveyou and MacPherson(1967).Using their methods, Fourier analysis is appliedto the probability function for the consecutiven-tuples provided by our generator (with n less thanor equal to 4).  While the small modulus which mustbe used to maintain portability prevents the qualityof the generator from being high, the generatorcompares well with the bounds established in the above mentioned paper.
1931	Smith, L. B.;	Interval Arithmetic Determinant Evaluationand Its Use in Testing for a Chebyshev System	Two recent papers, one by Hansen and one byHansen and R. R. Smith, have shown how IntervalArithmetic (I.A.) can be used effectively to bound errorsin matrix computations.  In the present papera method proposed by Hasen and R. R. Smith is comparedwith straightforward use of I.A. in determinantevaluation.  Computational results show the accuracyand running times that can be expected when usingI.A. for determinant evaluation.  An application usingI.A. determinants in a program to test a set offunctions to see if they form a Chebyshev system is then presented.
1932	King, R. F.;Phillips, D. L.;	The Logarithmic Error and Newton's Method for the Square Root	The problem of obtaining optimal starting valuesfor the calculation of the square root usingNewton's method is considered.  It has been pointed outelsewhere that if relative error is used as themeasure of goodness of fit, optimal results are notobtained when the initial approximation is a bestfit.  It is shown here that if, instead, the so-calledlogarithmic error is used, then a best initialfit is optimal for both types of error.  Moreover, useof the logarithmic error appears to simplify theproblem of determining the optimal initial approximation.
1933	Payne, W. H.;Rabung, J. R.;Bogyo, T. P.;	Coding the Lehmer Pseudo-random Number Generator	An algorithm and coding technique is presentedfor quick evaluation of the Lehmer pseudo-randomnumber generator modulo 2**31 - 1, a prime Mersennenumber with produces 2**31 - 2 numbers, on a p-bit(greater than 31) computer.  The computation method isextendible to limited problems in modular arithmetic.Prime factorization for 2**61 - 2 and a primitive rootfor 2**61 - 1, the next largest prime Mersennenumber, are given for possible construction of a pseudo-randomnumber generator of increased cycle length.
1934	Redziejowski, R. R.;	On Arithmetic Expressions and Trees	A description is given of how a tree representing theevaluation of an arithmetic expressioncan be drawn in such a way that the number of accumulatorsneeded for the computation can be representedin a straightforward manner.  This representation reducesthe choice of the best order of computationto a specific problem under the theory of graphs.An algorithm to solve this problem is presented.
1935	Arora, S. R.;Dent, W. T.;	Randomized Binary Search Technique	A mathematical model is developed for the meanand variance of the number of trials to recovera given document in a randomly received list of files.The search method described is binary in natureand offers new potential for information retrieval systems.
1936	Patt, Y. N.;	Variable Length Tree Structures Having Minimum Average Search Time	Sussenguth suggests in a paper (1963) that afile should be organized as a doubly-chained treestructure if it is necessary both to search and to updatefrequently.  Such a structure provides a compromisebetween the fast search/slow update characteristics ofbinary searching and the slow search/fast updatecharacteristics of serial searching.  His method, however,contains the limiting restriction that allterminal nodes lie on the same level of the tree.  This paperconsiders the effect of relaxing this restriction.First, trees which have the property that a priori thefilial set of each node is well defined are studied.It is proved that coding the nodes within each filialset with respect to the number of terminal nodesreachable from each is necessary and sufficient to guaranteeminimum average search time.  Then the moregeneral case (that is, where the entire structure ofthe tree is changeable) is treated.  A procedureis developed for constructing a tree with a minimumaverage search time.  A simple closed expressionfor this minimum average search time is obtained asa function of the number of terminal nodes.  Thestorage capacity required to implement the doubly-chainedtree structure on a digital computer is alsodetermined.  Finally, the total cost of the structure,using Sussenguth's cost criterion, is computed.It is shown that significant improvements in boththe average search time and the total cost can beobtained by relaxing Sussenguth's restriction that allterminal nodes lie on the same level of the tree.
1937	Day, R. H.;Mansfield, M. K.;Ellis, M. E.;	CODAS: A Data Display System	CODAS, a Customer Oriented Data System, isa user-oriented data retrieval and display system.The command language of the system provides the userwith an easy means for specifying data retrievaland display requests.  Data is displayed as tables andgraphs produced in a format ready for publication.In this paper the statements of the request languageand the general system design are described.
1938	Stimler, S.;	Some Criteria for Time-Sharing System Performance	Time-sharing systems, as defined in this article,are those multiaccess systems which permita terminal user to utilize essentially the full resourcesof the system while sharing its time with otherterminal users.  It is each terminal user's abilityto utilize the full resources of the system thatmakes quantitative evaluation of time-sharing systemsparticularly difficult.  Six criteria are describedwhich have been successfully used to perform first-levelquantitative time-sharing system performanceevaluation.
1939	Friedman, J.;	Directed Random Generation of Sentences	The problem of producing sentences of a transformationalgrammar by using a random generatorto create phrase structure trees for input to the lexicalinsertion and transformational phases is discussed.A purely random generator will produce base treeswhich will be blocked by the transformations, andwhich are frequently too long to be of practical interest.A solution is offered in the form of a computerprogram which allows the user to constrain and directthe generation by the simple but powerful deviceof restricted subtrees.  The program is a directedrandom generator which accepts as input a subtreewith restrictions and produces around it a tree whichsatisfies the restrictions and is ready for thenext phase of the grammar.  The underlying linguisticmodel is that at Noam Chomsky, as presented inAspects of the Theory of Syntax.  The program is writtenin FORTRAN IV for the IBM 360/67 and is partof a unified computer system for transformational grammar.It is currently being used with several partialgrammars of English.
1940	Smith, O. K.;	Calculation of a Polynomial and its DerivativeValues by Horner Scheme (Algorithm 337 [C1])	
1941	Field, J. B. F.;	F-Distribution (Algorithm 322 [S14])	
1942	Vandergraft, J.;Mesztenyi, C.;	Finding a Solution of N Functional Equationsin N Unknowns (Algorithm 314 [C5])	
1943	Farkas, I.;	Complete Elliptic Integrals (Algorithm 165 [S21])	
1944	Levine, D. A.;	Student's t-Distribution (Algorithm 344 [S14])	
1945	Arden, B. W.;	The Role of Programming in a Ph.D. Computer Science Program	In this general paper the role of programmingin advanced graduate training is discussed.Subject matter related to programming as well as programmingper se is considered.  The  importance andapplication of formalism are considered and also theneed for good empirical experimentation.  A briefoutline for a sequence of courses is included, and subjectheadings that have been obtained from an extensivebibliography are given.  A bibliography of programming references is included.
1946	Ku, S. Y.;Adler, R. J.;	Computing Polynomial Resultants: Bezout's Determinantvs. Collins' Reduced P.R.S. Algorithm	Algorithms for computing the resultant of twopolynomials in several variables, a key repetitivestep of computation in solving systems of polynomialequations by elimination, are studied.  Determiningthe best algorithm for computer implementation dependsupon the extent to which extraneous factors areintroduced, the extent of propagation of errors caused bytruncation of real coefficients, memory requirements,and computing speed.  Preliminary considerations narrowthe choice of the best algorithm to Bezout'sdeterminant and Collins' reduced polynomial remainder sequence(p.r.s.) algorithm.  Detailed tests performedon sample problems conclusively show that Bezout's determinantis superior in all respects except forunivariate polynomials, in which case Collins' reducedp.r.s. algorithm is somewhat faster.  In particularBezout's determinant proves to be strikingly superior innumerical accuracy, displaying excellent stabilitywith regard to round-off errors. Results of tests are reported in detail.
1947	Lowry, E. S.;Medlock, C. W.;	Object code Optimization	Methods of analyzing the control flow and dataflow of programs during compilation are appliedto transforming the program to improve object time efficiency.Dominance relationships, indicating whichstatements are necessarily executed before others, areused to do global common expression eliminationand loop identification.  Implementation of these and otheroptimizations in OS/360 FORTRAN H are described.
1948	Cannon, J. J.;	Computers in Group Theory: a Survey	Computers are being applied to an increasinglydiverse range of problems in group theory.The most important areas of application at present arecoset enumeration, subgroup lattices, automorphismgroups of finite groups, character tables, and commutatorcalculus.  Group theory programs range fromsimple combinatorial or numerical programs to largesymbol manipulation systems.  In this survey themore important algorithms in use are described and contrasted,and results which have been obtained usingexisting programs are indicated.  An extensive bibliography is included.
1949	Wagner, R. A.;	Finiteness Assumptions and Intellectual Isolation of Computer Scientists	
1950	Raduchel, W. J.;	Efficient Handling of Binary Data	
1951	Fuchs, E.;Jackson, P. E.;	Estimates of Distributions of Random Variablesfor Certain Computer Communications Traffic Models	A study of multiaccess computer communications hascharacterized the distributions underlying an elementarymodel of the user-computer interactive process.  The model used iselementary in the sense that many of the random variables thatgenerally are of interest in computer communications studies can bedecomposed into the elements of this model.  Data were examinedfrom four operational multiaccess systems, and the model is shown tobe robust; that is each of the variables of the model has thesame distribution independent of which of the four systems is being examined.It is shown that the gamma distribution can be used todescribe the discrete variables.  Approximations to the gamma distributionby the exponential distribution are discussed for the systems studied.
1952		Index by Subject to Algorithms, 1970	
1953	Redish, K. A.;	Exponential Integral Ei(x) (Algorithms 385 $S13))	
1954	Stewart, G. W.;	Eigenvalues and Eigenvectors of a RealSymmetric Matrix (Algorithm 384 $F2))	
1955	Sale, A. H. J.;	Characteristic Values and Associated Solutions ofMathieu's Differential Equation (Algorithm 352 $S22))	
1956	Black, N. A.;	Optimum Merging from Mass Storage	An algorithm is displayed which yields the merge orders such that the totalread time, defined to be the sum of seek time plus data-transfertime, is minimized for a sort using mass storage. The analysis isparameterized in terms of the ratio of seek time to the time it takesto fill available core with records, and the file size in unitsof core lengths; and thus it can be applied to any conventionalCPU/mass storage combination.  An explicit formula for total readtime is derived, in terms of the parameters, which correlates verywell with the total read time calculated using the optimum mergeorders yielded by the algorithm.  The formula involves the roots of a simpletranscendental equation.  A short table of these rootsis included.  Numerical results are graphically displayed for a widerange of the parameters.  It is found that the normalized readtime for optimum merging on a given hardware configuration is proportionalto the file length times the logarithm of the file length.
1957	Shapiro, S. C.;	The List Set Generator: A Construct for Evaluating Set Expressions	The list set generator is defined and algorithmsfor its use are given.  The list set generator isa construct which may be added to a list processing system or anysystem that handles sets.  It efficiently generates the set whichresults from any expression involving sets and set operators.  Theefficiency derives from evaluating the expression as a whole andin parallel, rather than evaluating subexpressions andthen using those sets to arrive at the final result.
1958	Thompson, R. J.;	Improving Round-off in Runge-Kutta Computations with Gill's Method	A Runge-Kutta-Gill scheme in common use is based on an incompleteadaptation for floating point operations of Gill's method.  Animproved version reduces round-off error significantly.  In this notethe heart of the scheme is presented in Fortran language.  It isthen shown how an improved version of the method can be obtained withthe addition of two Fortran statements.  The two version is asignificant improvement.  A numerical example comparing the two is included.
1959	Morgan, H. L.;	An Interrupt Based Organization for Management Information Systems	A programming structure, language constructs, and a supervisory systemorganization are proposedfor the design and coding of large shared data base systems.  Thebases for this organization are a generalized interrupt structureand the newly introduced concept of "file tagging," which is theprocess of associating program structures and interrupt generatingconditions with items in the data base.  An algorithm for resolvingconflicts which arise in scheduling the interrupt processing routinesis presented.  DPL, a programming language and supervisorysystem in which these concepts are implemented, is used to illustratedthe new organization which is proposed for management information systems.
1960	Betourne, C.;Boulenger, J.;Ferrie, J.;Kaiser, C.;Krakowiak, S.;Mossiere, J.;	Process Management and Resource Sharing in the Multiaccess System ESOPE	The main design principles of the multiaccess system ESOPE are described.Emphasis is placed on basic ideas underlying the design ratherthan on implementation details.  The main features of the systeminclude the ability given to any user to schedule his own parallelprocesses using system primitive operations, the file-memory relationship,and the allocation-scheduling policy, which dynamicallytakes into account recent information about user behavior.
1961	Tiernan, J. C.;	An Efficient Search Algorithm to Find the Elementary Circuits of a Graph	A theoretically most efficient search algorithm is presentedwhich uses an exhaustive search to find all of the elementarycircuits of a graph.  The algorithm can be easily modified to find allof the elementary circuits with a particular attribute such aslength.  A rigorous proof of the algorithm is given as well as an exampleof its application.  Empirical bounds are presented relatingthe speed of the algorithm to the number of vertices and the numberof arcs.  The speed is also related to the number of circuitsin the graph to give a relation between speed and complexity.Extensions to undirected and s-graphs are discussed.
1962	Mathews, M. V.;Moore, F. R.;	GROOVE-A Program to Compose, Store, and Edit Functions of Time	A program which makes possible creating, storing, reproducing,and editing functions of time is described.  The functions are typicalof those generated by human beings.  Multiple functions (up to 14)are produced for long periods of time (up to several hours) atsufficiently high sampling rates to describe fast human reactions(up to 200 samples per second).  The functions can be used for avariety of purposes such as the control of machine tools or soundsynthesizers or anything a person normally controls.  The programoperates on a small computer (DDP-224).  Functions are stored on adisk file.  Functions may be created by real-time human inputs tothe computer which can interact with already stored functions andcomputed functions.  Real-time feedback from the process beingcontrolled is an important link in the system.  The environment foreffective man-machine interaction has been carefully nurtured.
1963	Rokne, J.;	Condition Numbers of PEI Matrices	
1964	Bernstein, A.;	Comment on the Working Set Model for Program Behavior	
1965	Ehrman, J. R.;	Correction to "Logical" Arithmetic on Computerswith Two's Complement Binary Arithmetic	
1966	Wilson, W. J.;	A Generalized Method for Generating Argument/Function Values	
1967	Bratley, P.;	An Improved Algorithm to Produce Complex Primes (Algorithm 401 $A1))	
1968	Knight, W.;Mersereau, W.;	Eigenvalues and Eigenvectors of a RealGeneral Matrix (Algorithm 343 $F1))	
1969	Van Emden, M. H.;	Increasing the Efficiency of Quicksort (Algorithm 402 $M1))	
1970		Unrecorded Magnetic Tape for Information Interchange (9 Track-200 and800 CPI, NRZI and 1600 CPI, PE)* (Proposed American National Standard)	
1971		Recorded Magnetic Tape for Information Interchange (1600CPI, Phase Encoded)* (Proposed American National Standard)	
1972	Cheney, C. J.;	A  Nonrecursive List Compacting Algorithm	A simple nonrecursive list structure compacting scheme or garbagecollector suitable for both compact and LISP-like list structures is presented.The algorithm avoids the need for recursion by using the partial structure asit is built up to keep track of those lists that have been copied.
1973	Bell, J. R.;Kaman, C. H.;	The Linear Quotient Hash Code	A new method of hash coding is presented andis shown to possess desirable attributes.  Specifically, the algorithmis simple, efficient, and exhaustive, while needing littletime per probe and using few probes per lookup.  Performancedata and implementation hints are also given.
1974	Conrow, K.;Smith, R. G.;	NEATER2: A PL/I Source Statement Reformatter	NEATER2 accepts a PL/I source program and operates on it to producea reformatted version.  When in the LOGICAL mode, NEATER2 indicatesthe logical structure of the source program in the indentationpattern of its output.  Logic errors discovered through NEATER2logical analysis are discovered much more economically than is possiblethrough compilation and trial runs.  A number of options areavailable to give the user full control over the output format andto maximize the utility of NEATER2 as an aid during the earlystages of development of a PL/I source deck.  One option, USAGE, causesNEATER2 to insert into each logical unit of coding a statementwhich will case the number of times each one is executed to be recordedduring execution.  This feature is expected to provide amajor aid in optimization of PL/I programs.
1975	Mifsud, C. J.;	A Multiple-Precision Division Algorithm	A generalized division algorithm for use with positive integral operands ispresented.  Depending upon the algebraic relationship of the firsttwo ciphers of the divisor, one or at most two adjustments to the originaldivisor and dividend must be performed before the division operation can beinitiated. The uniqueness of this method will cause each trial cipher in thequotient to be either equal to or one greater than its final replacement.
1976	Lum, V. Y.;	Multi-attribute Retrieval with Combined Indexes	In this paper a file organization scheme designed toreplace the use of the popular secondary index filing scheme(or inverted files on secondary key fields) is described.Through the use of redundancy and storingkeys (or access numbers of the records) that satisfy different combinationsof secondary index values in "buckets," it is possible to retrieveall keys satisfying any input query derived from a subset offields by a single access to an index file, although each bucket maybe used for many combinations of values and a combination ofbuckets may be required for a given query.  The method which, in itsdegenerate case, becomes the conventional secondary index filingscheme works similarly but has the following advantages: (1) the eliminationof multiple accesses in many cases; (2) the eliminationof false drops; (3) the elimination of computer time to perform intersectionof key sets each qualified for one secondary index fieldonly; and (4) the avoidance of long strings of keys when an indexfield appearing in a query has very few possible values.  Redundancy, in somecases, is the same as the secondary indexing method. In the general case,trade-off between the number of accesses for query and redundancy exists.
1977	LaFata, P.;Rosen, J. B.;	An Interactive Display for Approximation by Linear Programming	An interactive programwith a graphical display has been developed for the approximation ofdata by means of a linear combination of functions (includingsplines) selected by the user.  The coefficients of the approximationare determined by linear programming so as to minimize the errorin either the L1 or L-infinity norm.  Auxiliary conditions such asmonotonicity or convexity of the approximation can also be imposed. Thisinteractive system is described and several examples of its use are given.
1978	Smith, L. B.;	The Use of Interactive Graphics To Solve Numerical Problems	With the advent of on-line (time-sharing) computer systemsand graphic terminals, we have available a new dimensionin numerical problem solving capabilities.  Rather than simply usethe new power to achieve fast turnaround, we can develop interactiveroutines which are easy to use and also take advantage of theinsight and visual capabilities of the human problem solver.  Severalon-line systems for general purpose mathematical problem solvinghave already been implemented as well as some special purposesystems for solving problems in a particular area such as ordinarydifferential equations.  The advantage of restricting the problemarea is that the interface with a user can be greatly simplified.In this paper we discuss some of the advantages accrued by suchsystems and design considerations for interactive routines.  Furthermore,an implementation of an on-line least squares data-fittingprogram, PEG, is presented with results obtained from empiricaldata.  In conclusion, area for future work in this field are discussed.
1979	Stehfest, H.;	Numerical Inversion of Laplace Transforms (Algorithm 368 $D5))	
1980	Peto, R.;	An Efficient Algorithm for Sorting withMinimal Storage (Algorithm 347 $M1))	
1981	Holmgren, B.;	Normal Curve Integral (Algorithm 304 $S15))	
1982	Wallick, G. C.;	Modified Havie Integration (Algorithm 400 $D1))	
1983	Seppanen, J. J.;	Spanning Tree $H) (Algorithm 399)	
1984	Stone, R. A.;	Tableless Date Conversion $Z) (Algorithm 398)	
1985	Chang, S. K.;Gill, A.;	An Integer Programming Problem $H) (Algorithm 397)	
1986	Hill, G. W.;	Student's t-Quantiles $S14) (Algorithm 396)	
1987	Hill, G. W.;	Student's t-Distribution $S14) (Algorithm 395)	
1988	Earley, J.;	A Formalism for Translator Interactions	A formalism is presented for describing the actionsof processors for programming languages-compilers,interpreters, assemblers-and their interactions in complex systemssuch as compiler-compilers or extendible languages.The formalism here might be used to define and answer such aquestion as "Can one do bootstrapping using a meta-compilerwhose metaphase is interpretive?"  In addition an algorithmis presented for deciding whether or not a given system canbe produced from a given set of component processors.
1989	Woods, W. A.;	Transition Network Grammars for Natural Language Analysis	The use of augmented transition network grammars for the analysisof natural language sentences is described.  Structure-buildingactions associated with the arcs of the grammar network allow for the reordering,restructuring, and copying of constituents necessary to producedeep-structure representations of the type normally obtained from atransformational analysis, and conditions on the arcs allow for apowerful selectivity which can rule out meaningless analyses and takeadvantage of semantic information to guide the parsing.  Theadvantage of this model for natural language analysis are discussedin detail and illustrated by examples.  An implementation of anexperimental parsing system for transition network grammars is brieflydescribed.
1990	Dunham, C. B.;	Numerical Constants (Algorithm)	
1991	Bavel, Z.;	On the Number of Automorphisms of a Singly Generated Automaton	
1992	Lamport, L.;	Comment on Bell's Quadratic Quotient Method for Hash Code Searching	
1993	Cody, W. J.;Paciorek, K. A.;	Regular Coulomb Wave Functions (Algorithm 292 $S22))	
1994	Dial, R. B.;	Decision Table Translation $H) (Algorithm 394)	
1995	Abdali, S. K.;	Special Series Summation with Arbitrary Precision $C6) (Algorithm 393)	
1996	Smith, R. R.;McCall, D.;	Systems of Hyperbolic PDE $D3) (Algorithm 392)	
1997	van Emden, M. H.;	Increasing the Efficiency of Quicksort	A method is presented for the analysis of various generalizations ofquicksort.  The average asymptotic number of comparisons needed is shownto be an log^2(n).  A formula is derived expressing a in terms ofthe probability distribution of the "bound" of a partition.  Thisformula assumes a particularly simple form for a generalization alreadyconsidered by Hoare, namely, choice of the bound as medianof a random sample. The main contribution of this paper is anothergeneralization of quicksort, which uses a bounding interval insteadof a single element as bound.  This generalization turns out tobe easy to implement in a computer program.  A numerical approximationshows that a = 1.140 for this version of quicksort compared with1.386 for the original.  This implies a decrease in number of comparisons of18 percent; actual tests showed about 15 percent saving in computing time.
1998	Ehrlich, L. W.;	Complex Matrix Inversion Versus Real	A comparison of complex matrix with real matrix inversionis made.  It is shown that the complex inversion can be up totwice as fast as the real inversion.  Further, the rounding errorbound for complex inversion is about one-eighth that of real,for Gaussian elimination.  Using extended inner productaccumulation the bound is half of the real system.
1999	Wilson, M. W.;	Optimal Starting Approximations for GeneratingSquare Root for Slow or No Divide	On machine with slow or no division, it is preferable touse an iterative scheme for the square root different fromthe classical Heron scheme.  The problem of optimal initialapproximants is considered, and some optimal polynomial initialapproximations are tabulated.
2000	Kimble, G. W.;	A Variation of the Goodman-Lance Method forthe Solution of Two-Point Boundary Value Problems	A recently published method for the interpolativesolution of nonlinear equations is improved,and applied to give a significant variation of the Goodman-Lancemethod for the solution of two-point boundary value problems.The resulting method applies in particular to the numerical solutionof optimal control problems in the Euler-Lagrange formulation.Quantitative estimates are presented which indicate that the variationis nearly twice as fast on some problems in the latter context.
2001	Moler, C. B.;Solomon, L. P.;	Integrating Square Roots	Differential equation of the (y')^2 = f(y) are difficult to integratenumerically because of the singularity at points where f(y) vanishes.  Asimple trick removes the singularity.
2002	Hirschsoln, I.;	AMESPLOT-A Higher Level Data Plotting Software System	AMESPLOT is an extensible software system designed to make the display ofdata as simple, painless, and neat as possible.  The system described ishardware-independent and has been implemented on a variety of installations,of different manufacturers, having diverse configurations.  The elementscommon to all types of data plots are outlined and the way in which theseelements may be combined into a system based on simple modules is demonstrated.These modules are specified independently and are independent of the axissystems or other attributes of the plot.  This enables plots of anycomplexity to be constructed by adding or replacing modules.  Thebasic syntax of AMESPLOT is outlined, and a brief description is givenof its current utility software, consisting of "macros" to produceself-scaled plots, formal tablets of text-interspersed with subplots,map coastlines, and 3-D plots.  The system was formulated in a way such that the user could supply the minimum of information,and it should be fully integrable with user's program writtenin most conventional higher languages.  The functions of positioning,locating, and scaling (in the layout of multiple subplots) ofaxes, labels, and all other elements of the plot are handled automaticallyby the software system unless the user specifies otherwise.  The structuringof plots from multiple, independent, self-contained subplots is described.Transformation, projection, scaling, rotation, or shifting of entire plots orsubplots by the action of one or more simple modules is possible.  The usermay interact freely with AMESPLOT at three levels, enabling him to constructhis own data markers, alphabetic characters, and transformations, andto produce a variety of artistic and other effects.
2003	Bracchi, G.;Somalvico, M.;	An Interactive Software System for Computers-AidedDesign:  An Application to Circuit Project	The characteristics of an interactive software system, intended to constitutean interface between designer and computer during various steps ofthe design process, are presented.  The main emphasis is given to thedescription of the features of the two high level user orientedlanguages, operating at different levels, on which the interactionis based.  The first one is IMOL, an interactive monitor language,which is designed to perform the overall and control functionsof the software system; its design criteria provide the user withcommands which are both simple and efficient in order to perform allthe functions needed in computer-aided circuit design.  The second one isCOIF, a circuit oriented graphic language, which is designedto describe, generate, and manipulate graphic problem specifications;it is an  extension of Fortran with graphic-type variables,so that the designer who is familiar with Fortran need not learn a newlanguage.  The application to computer-aided circuit designis in particular examined; on the other hand, the adopted designcriteria provide sufficient generality to extend the use of the two languagesto different computer-assisted applications.
2004	Bouknight, W. J.;	A Procedure for Generation of Three-dimensionalHalf-toned Computer Graphics Presentations	A description is given of an algorithm for producing computer generatedhalf-tone presentations of three-dimensional polygonal surface structures.This algorithm achieves a significant increase in speed of computation overthe Warnock algorithm developed at the University of Utah and implementedalso on the Coordinated Science Laboratory CDC 1604 computersystem at the University of Illinois.  The history leading to the algorithmdevelopment and then the algorithm itself are described.Results are presented and are compared with computer runs achievedby the Warnock approach.  An extension of the procedure to variable positionillumination sources is also given.
2005		Proposed Revision of American National Standard X3.21-1967,"Rectangular Holes in Twelve-Row Punched Cards"*	
2006	Kerpelman, C.;	Proposed American National Standard	
2007		Algorithms Policy/Revised August 1970	
2008	Wise Jr., W. R.;	Gaussian Quadrature Formulas (Algorithm 331 $D1))	
2009	Proll, L. G.;	Simpson's Rule for Multiple Integration (Algorithm 233 $D1))	
2010	McKay, J.;	Unitary Symmetric Polynomials $Z) (Algorithm 391)	
2011	Hubner, H.;	Sequency Ordered Walsh Functions $S22) (Algorithm 390)	
2012	Hubner, H.;	Binary Ordered Walsh Functions $S22) (Algorithm 389)	
2013	Hubner, H.;	Rademacher Function $S22) (Algorithm 388)	
2014	Fielding, K.;	Function Minimization and Linear Search $E4) (Algorithm 387)	
2015	Ichbiah, J. D.;Morse, S. P.;	A Technique for Generating Almost OptimalFloyd-Evans Productions for Precedence Grammars	A technique is developed for generating almost optimal Floyd-Evans productionsgiven a precedence grammar. A graph formulation is used for the problem ofmerging productions.  The productions generated correspond to the minimum costinverse-arborescence of that graph.  The validity of the technique isdemonstrated for weak precedence grammars defined here, but the productionsmechanically generated for any precedence grammar can often be modified insuch a way that correct, almost optimal parsers are obtained.
2016	Gintell, J. W.;Saltzer, J. H.;	The Instrumentation of Multics	An array of measuring tools devised to aid in the implementation of a prototypecomputer utility is discussed.  These tools include special hardwareclocks and data channels, general purpose programmed probingand recording tools, and specialized measurement facilities.  Someparticular measurements of interest in a system which combines demandpaging with multiprogramming are described in detail.  Where appropriate,insight into effectiveness (or lack there of) of individual tools is provided.
2017	Brawn, B. S.;Gustavson, G.;Mankin, E. S.;	Sorting in a Paging Environment	This sorting study was part of an extensive measurement projectundertaken on the M44/44X, an experimental paging system which wasconceived and implemented at IBM Research in order to explore thevirtual machine concept.  The study was concerned with the implementationof sorting procedures in the context of the dynamic pagingenvironment characteristic of virtual memory machines.  Descriptions ofthe experimental sort programs and analysis of the performancemeasurement results obtained for them are presented. The insight gainedfrom the experimental effort is used to arrive at a set ofbroad guidelines for writing sort programs for a paging environment.
2018	Day, A. C.;	Full Table Quadratic Searching for Scatter Storage	The quadratic residue search method for hash tables avoids muchof the clustering experienced with a linear search method.  The simplequadratic search only accesses half the table.  It has been shownthat when the length of the table is a prime of the form 4n+3, where nis an integer, the whole table may be accessed by two quadraticsearches plus a separate access for the original entry point. A searchmethod is presented which is computationally simple, has all the advantagesof the quadratic search, and yet accesses all the table in one sweep.
2019	Nagy, G.;Tuong, N.;	Normalization Techniques for Hand printed Numerals	Family of pattern standardizationtechniques based on geometrical projection is applied to a file ofdigitized hand printed numerals obtained from sales clerks. Theprinciple involves transforming a quadrilateral specified in termsof the convex hull of each pattern into a square. The amount ofoverlap within each class of characters versus the amount between classesis used to evaluate the degree of normalization achieved with respect to otherpublished methods including size and shear normalization through moments.
2020	Nielsen, N. R.;	The Allocation of Computer Resources-Is Pricing the Answer?	The widespread use of complex third generation computing systems has led to amuch broader concern about the means by which the resources of these systemsare allocated among the user community.  One means that is suggestedmore and more frequently is a pricing procedure.  In thispaper the manner in which one would like to allocate computing resourcesis considered, and then the extent to which a pricing mechanism fits this moldis discussed.  Inasmuch as pricing must serve as a rationing mechanism attimes, consideration is given to the means by which prices can be adjustedflexibly in order to make a dynamic allocation of resources.  Consideration isalso given to the means by which users can be insulated from the harmfuleffects of frequent price fluctuations.  Although the subject of pricing hasbeen given a lot of attention recently, a number of misconceptionspersist about its purpose and its operation.  An attempt is made to clarifysome of these misunderstandings and to highlight the advantages anddisadvantages and to highlight the advantages and disadvantages of pricing. Twoillustrative pricing systems are also discussed in order to demonstrate theapplicability of pricing in quite different environments.
2021	Hunt, B.R.;	A Comment on Axiomatic Approaches to Programming	
2022	Pomeranz,J. E.;	Note on an Anomaly in Paging	
2023	Baecker, H. D.;	A Note on Data Base Deadlocks	
2024	Sattley, K.;Millstein, R.;	Comments on a Paper by Lowe	
2025	Sale, A. H. J.;	Student's t-Distribution; Jacobi Polynomials;Modified Romberg Quadrature;Factorial Analysis of Variance; (Algorithms 332,344,351,359)	
2026	Ng, E. W.;	Exponential Integral (Algorithm 385 $S13))	
2027	Bray, T.;	Ricatti-Bessel Functions of First and Second Kind (Algorithm 22 $S17))	
2028	Bradley, G. H.;	Greatest Common Divisor of n Integersand Multipliers $A1) (Algorithm 386)	
2029	Paciorek, K. A.;	Exponential Integral $S13) (Algorithm 385)	
2030	Woods, W. A.;	Context-Sensitive Parsing	This paper presents a canonical form for context-sensitivederivations and a parsing algorithm which findseach context-sensitive analysis once and only once.  The amount of memoryrequired by the algorithm is essentially no more than the required tostore a single complete derivation.  In addition, a modifiedversion of the basic algorithm is presented which blocks infinite analysesfor grammars which contain loops.  The algorithm isalso compared with several previous parsers for context-sensitivegrammars and general rewriting systems, and the difference betweenthe two types of analyses is discussed.  The algorithm appears tobe complementary to an algorithm by S. Kuno in several respects, includingthe space-time trade-off and the degree of context dependence involved.
2031	Bradley, G. H.;	Algorithm and Bound for the Greatest Common Divisor of n Integers	A new version of the Euclideanalgorithm for finding the greatest common divisor of n integers a(i)and multipliers x(i) such that gcd = x(1)a(1) + ... + x(n)a(n)is presented.  The number of arithmetic operations and the numberof storage locations are linear in n.  A theorem of Lame that gives a boundfor the number of iterations of the Euclidean algorithm for two integersis extended to the case of n integers.  An algorithm to construct a minimalset of multipliers is presented.  A Fortran program for the algorithm appearsas Comm. ACM Algorithm 386.
2032	Coffman Jr., E. G.;Eve, J.;	File Structures Using Hashing Functions	A general method of file structuring is proposed which uses a hashingfunction to define tree structure.  Two types of such trees are examined,and their relation to trees studied in the past is explained.Results for theprobability distributions of path lengths are derived and illustrated.
2033	Bloom, B. H.;	Space/Time Trade-offs in Hash Coding with Allowable Errors	In this paper trade-offs among certain computational factorsa given set of messages.  Two new hash-coding methods are examinedand compared with a particular conventional hash-coding method.The computational factors considered are the size of the hash area(space), the time required to identify a message as a nonmember of thegiven set (reject time), and an allowable error frequency.  The new methodsare intended to reduce the amount of space required to contain the hash-codedinformation from that associated with conventional methods.  The reduction inspace is accomplished by exploiting the possibility that a small fraction oferrors of commission may be tolerable in some applications, in particular,applications in which a large amount of data is involved and a core residenthash area is consequently not feasible using conventional methods.  In suchapplications, it is envisaged that overall performancecould be improved by using a smaller core resident hash area inconjunction with the new methods and, when necessary, by using somesecondary and perhaps time-consuming test to "catch" the smallfraction of errors associated with new methods.  An example is discussedwhich illustrates possible areas of application for the newmethods.  Analysis of the paradigm problem demonstrates that allowinga small number of test messages to be falsely identified asmembers of the given set will permit a much smaller hasharea to be used without increasing reject time.
2034	Waite, W. M.;	The Mobile Programming System: STAGE2	STAGE2 is the second level of a bootstrap sequence whichis easily implemented on any computer.  It is a flexible,provided by STAGE2 are summarized, and the implementation techniqueswhich have made it possible to have STAGE2 running on a newmachine with less than one man-week of effort are discussed.  The approachhas been successful on over 15 machines of widely varyingcharacteristics.
2035	Wilkes, M. A.;	Conversational Access to a 2048-Word Machine	LAP6 is an on-line system running on a 2048-word LINC which provides fullfacilities for text editing, automatic filing and file maintenance, andprogram preparation and assembly.  It focuses on the preparation and editingof continuously displayed 23,040-character text strings (manuscripts) whichcan be positioned anywhere by the user and edited by simply addingand deleting lines as though working directly on an elastic scroll.Other features are available through a uniform command set which itself canbe augmented by the user.  The machine, although small,aids program design by providing display scope and premarkedrandomly addressable LINC tapes as standard items, in an environmentsimilar to that of a sophisticated terminal.  The tapes are logicallysimilar to a disk.  Priority was given to the design of efficienttape algorithms to minimize the limitations of the small memory.  Techniquesdeveloped for handling scroll editing, filing, and the layered systemstructure are outlined.  LAP6 is used by about 2000 people in 11 countries.Its design was strongly influenced by performance criteria established ininterviews held with LINC users themselves during the specification period.
2036	Grant, C. A.;	An Interactive Command Generating Facility	A facility to permit conversationally controlled tasksto be executed in a noninteractive environment is proposed.A means by which programs can generate interactive time-sharing commandsand receive the corresponding output response is presented.  The commandswill be invoked as if they had been typed at a console keyboard.  It isargued that this facility will help overcome some of the current limitationsin man-computer communication. A set of functions to accomplish the abovewhich could be embedded into any string processing language is suggested,and necessary information pertinent to implementation of the facility onexisting time-sharing systems is given.
2037	Chase, P. J.;	Permutations of a Set with Repetitions (Algorithm 383 $G6))	
2038	Chase, P. J.;	Combinations of M Out of N Objects (Algorithm 382 $G6))	
2039	Shriver, B.;Eberlein, P. J.;Dixon, R. D.;	Permanent Function of a Square Matrix I and II (Algorithm 361 $G6))	
2040	Wallick, G. C.;	Modified Romberg Quadrature (Algorithm 351 $D1))	
2041	Chandler, J. P.;Harrison, W. C.;	Shellsort (Algorithm 201 $M1))	
2042	London, R. L.;	Treesort 3 (Algorithm 245 $M1))	The certification of an algorithm can takethe form of a proof that the algorithm is correct.  As an illustrativebut practical example, Algorithm 245, TREESORT 3 for sortingan array, is proved correct.
2043	Stewart, G. W.;	Eigenvalues and Eigenvectors of a RealSymmetric Matrix $F2) (Algorithm 384)	
2044	Chase, P. J.;	Permutations of a Set with Repetitions (Algorithm 383 $G6))	
2045	Chase, P. J.;	Combinations of M Out of N Objects (Algorithm 382 $G6))	
2046	Codd, E. F.;	A Relational Model of Data for Large Shared Data Banks	Future users of large data banks must be protected from having to know how thedata is organized in the machine (the internal representation).  A promptingservice which supplies such information is not a satisfactorysolution.  Activities of users at terminals and most applicationprograms should remain unaffected when the internal representationof data is changed and even when some aspects of the external representationare changed.  Change in data representation will often be needed as a resultof changes in query, update, and report traffic and natural growth in thetypes of stored information.  Existing noninferential, formatted data systemsprovide users with tree-structured files or slightly more general networkmodels of the data.  In Section 1, inadequacies of these models are discussed.A model based on n-ary relations, a normal form for data base relations,and the concept of a universal form for data base relations,and the concept of a universal data sublanguage are introduced.  InSection 2, certain operations on relations (other than logicalinference) are discussed and applied to the problemsof redundancy and consistency in the user's model.
2047	Stewart, G. W.;	Incorporating Origin Shifts into the QRAlgorithm for Symmetric Tridiagonal Matrices	The QR iteration for the eigenvalues of a symmetric tridiagonal matrix canbe accelerated by incorporating a sequence of origin shifts.  The origin shiftmay be either subtracted directly from the diagonal elements ofthe matrix or incorporated by means of an implicit algorithm.  Bothmethods have drawbacks: the direct method can unnecessarily degrade smalleigenvalues, while the implicit method can effectively loose the shift andthereby retard the convergence.  This paper presents a new method which hasneither drawback.
2048	Hillstrom, K. E.;	Comparison of Several Adaptive Newton-Cotes Quadrature Routinesin Evaluating Definite Integrals with Peaked Integrands	This report compares the performance of five different adaptive quadratureschemes, based on Newton-Cotes (2N + 1) point rules (N = 1, 2, 3, 4, 5), inapproximating the set of definite integrals INTEGRAL$1/(x^2 + p^2)) dx withrelative accuracy e.
2049	Linz, P.;	Accurate Floating-Point Summation	This paper describes an alternate method for summing a setof floating-point numbers.  Comparison of the error bound forthis method with that of the standard summation method shows that itis considerably less sensitive to propagation of round-off error.
2050	Damerau, F. J.;	Automatic Parsing for Content Analysis	Although automatic syntactic and semantic analysis is not yet possible forall of an unrestricted natural language text, some applications, of whichcontent analysis is one, do not have such a stringent coverage requirement.Preliminary studies show that the Harvard Syntactic Analyzer canproduce correct and unambiguous identification of the subject andobject of certain verbs for approximately half of the relevant occurrences.This provides a degree of coverage for content analysis variables whichcompares favorably to manual methods, in variables which compares favorablyto manual methods, in which only a sample of the total available text isnormally processed.
2051	Frantz, D. G.;	A PL/I Program to Assist the Comparative Linguist	A practical PL/I program is described whichcan assist comparative linguists to determinethe regular sound correspondences between genetically related languages.The investigator must arrange data for input by aligning pairsof suspected cognates.  The program tabulates the correspondences,and uses list processing techniques to sort and count them.Each pair of words is then assigned a relative value that is a functionof the total frequency in the data of each correspondence foundin that pair of words.  The output is a list of all correspondencetypes with their frequency of occurrence in the data, and aseparate listing of each correspondence with all word-pairs showingthat correspondence (unless their relative value is below an arbitrarilychosen cutoff point).  The article explains the usefulness,as well as the limitations, of the programs, and illustrates itsuse with a small portion of hypothetical data.
2052	Grimes, J. E.;	Scheduling to Reduce Conflict in Meetings	Conflicts in scheduling can be treated as defining an undirected linear graphindependently of the relation of the activities in conflict to additionalconstraints of time and space.  Each connected component of such a graph,which can be found by an algorithm described by Gotlieb and Corneil,corresponds to a set of events that must be scheduled at different times.
2053	Muthukrishnan, C. R.;Rajaraman, V.;	On the Conversion of Decision Tables to Computer Programs	The use of execution time diagnostics in pinpointing ambiguities in decisiontables is discussed.  It is pointed out that any attempt at resolvingambiguities at compile time will, in general, be impossible.  Itis shown that, as a consequence, tree methods of converting decisiontables to programs are inadequate in regard to ambiguity detection.Two algorithms for programming decision tables whose meritsare simplicity of implementation and detection of ambiguities atexecution time are presented. The first algorithm is for limited entrydecision tables and clarifies the importance of proper codingof the information in the decision table.  The second algorithm programsa mixed entry decision table directly without going throughthe intermediate step of conversion to a limited entry form, therebyresulting in storage economy.  A comparison of the algorithms and othersproposed in the literature is made.  Some features of a decision tableto Fortran IV translator for the IBM 7044 developed by the authors are given.
2054	Elder, H. A.;	On the Feasibility of Voice Input toan On-line Computer Processing System	An on-line digital computer processing system is considered in which anordinary telephone is the complete terminal device, input to the computerbeing provided as a sequence of spoken words, and output to the user beingaudio responses from the machine.  The feasibility of implementing such asystem with a FORTRAN-like algebraic compiler as the object processor isconsidered.  Details of a specific word recognition program are given.  Thistechnique depends on three simplifying restrictions, namely, a "small"vocabulary set, "known" speakers, and a "moment of silence"between each input word.  Experimental results are presented givingerror rates for different experimental conditions as well as the machineresources required to accommodate several users at a time. The results showthat at this time it is both economically and logically feasible to handle atleast 40 users at a time with an IBM 360/65 computer.
2055	Lachenmaier, R.;	Subroutine to Perform In-Situ Transpositionof a Rectangular Matrix (Algorithm 380)	
2056	Proll, L. G.;	Gomory (Algorithm 263A $H))	
2057	Knop, R. E.;	Random Vectors Uniform in Solid Angle (Algorithm 381 $G5))	
2058	Laflin, S.;Brebner, M. A.;	In-Situ Transposition of a Rectangular Matrix (Algorithm 380 $F1))	
2059	Crespi-Reghizzi, S.;Morpurgo, R.;	A Language for Treating Graphs	A language for the representation of graph is described, and the formulation ofgraph operations such as node and/or link deletion or insertion, union,intersection, comparison, and traversal of graphs is given.  Graphsare represented by linked lists.  The language is syntactically definedas an extension to ALGOL 60, and it is translated into ALGOLby means of a syntax-driven compiler.  Application areas for this language areoperation research, network problems, control theory, traffic problems, etc.
2060	Reynolds, J. C.;	GEDANKEN-A Simple Typeless Language Based on thePrinciple of Completeness and the Reference Concept	GEDANKEN is an experimental programming language with the followingcharacteristics.  (1) Any value which is permitted in some context of thelanguage is permissible in any other meaningful context.  In particular,functions and labels are permissible  results of functions and valuesof variables.  (2) Assignment and indirect addressing are formalizedby introducing values, called reference, which in turn possessother values.  The assignment operation always affects the relationbetween some reference and its value,  (3) All compound datastructures are treated as functions.  (4) Type declarations arenot permitted.  The functional approach to data structures and theuse of references insure that any process which accepts some datastructure will accept any logically equivalent structure, regardlessof its internal representation.  More generally, any data structuremay be implicit; i.e. it may be specified by giving an arbitraryalgorithm for computing or accessing its components.  The existence oflabel variables permits the construction of coroutines,quasi-parallel processes, and other unorthodox control mechanisms.A variety of programming examples illustrates the generality of the language.Limitations and possible extensions are discussed briefly.
2061	Loeckx, J.;	An Algorithm for the Construction Of Bounded-Context Parsers	An algorithm is described which accepts an arbitrary context-freegrammar and constructs a bounded-context parser forit whenever such a parser exists.  In the first part of the paperthe definition of a context-free grammar and the working of abounded-context parser are recalled.  The notion of reduction class fora context-free grammar is then introduced and its connection withthe structure of a bounded-context parser is indicated.  Next,pushdown automata which generate the different reduction classesof a context-free grammar are defined.  Finally, the algorithm is described;it essentially carries out an exhaustive study of all possibleruns of the pushdown automata generating the reduction classes.In the second part, the utility of the algorithm is discussed in the light of the experience gained from its use in compiler design.The algorithm is claimed to be particularly useful in thesimultaneous design of a language and a compiler for it.
2062	Sasser, W. E.;Burdick, D. S.;Graham, D. A.;Naylor, T. H.;	The Application of Sequential Samplingto Simulation: An Example Inventory Model	Four different sequential sampling procedures are appliedto the analysis of data generated by a computer simulationexperiment with a multi-item inventory model.  For each procedurethe cost of computer time required to achieve given levels ofstatistical precision is calculated.  Also the cost of computer timeusing comparable fixed sample size methods is calculated.  Thecomputer costs of fixed sample size procedures versussequential sampling procedures are compared.
2063	Vere, S.;	Translation Equations (Errata)	
2064	Sitton, G. A.;	Operations on Generalized Arrays with the Genie Compiler	Operations on vectors, matrices, and higher dimensional storage arrays arestandard features of most compilers today.  The elements of such structures areusually restricted to be scalars.  For many sophisticated applicationsthis restriction can impose cumbersome data representations.An efficient system has been devised and implemented which allowsthe elements of multidimensional arrays to themselves be multidimensionalarrays.  This system was developed from a storage structurein which the location, length, and content of each array is describedby a codeword which can be interpreted by the system.  Code words may describearrays containing more codewords, thus providingall needed descriptive information for hyperstructures of any form.
2065	Hodes, L.;	A Programming System for the On-line Analysis of Biomedical Images	A preliminary description of the software for a computer-displaysystem is given with special emphasis on the  man-machine interaction. Thissystem is intended for a wide variety of biomedical applications.As an example, the methods are applied to the karyotyping of chromosomes.  Thesystem is separated into four programming tasks: picture transformations, filemaintenance, picture structuring, and display management.  Picture structuringis considered as the vehicle for man-machine communication.A prototype data format for pictures, called a picture-form, is developed.Structure operators are defined which manipulate picture-forms to producenew pictures-forms.  Many of the ideas are taken from the symbolic mathematicallaboratory at MIT conceived by Marvin Minsky.
2066	Knight, K. R.;	An Algol Construction for Procedures as Parameters of Procedures	
2067	DeVries, R. C.;	Comment on Lawler's Multilevel Boolean Minimization	
2068	Smith, J. L.;	Comment on Multiprogramming Under a Page on Demand Strategy	
2069	Heess Jr., W. F.;	Comments on a Paper by Wallace and Mason	
2070	Hsiao, D.;Harary, F.;	A Formal System for Information Retrieval from Files	
2071	Fosdick, L. D.;Einarsson, Bo;	Filon Quadrature (Algorithm 353 $D1))	
2072	Cook, N. D.;	Modified Romberg Quadrature (Algorithm 351 $D1))	
2073	Guignard, M. M.;	Solution of Linear Programs in 0-1 Variablesby Implicit Enumeration (Algorithm 341 $H))	
2074	Lyness, J. N.;	Sqank (Algorithm 379 $D1))	
2075	Pankiewicz, W.;	Discretized Newton-Like Method for Solving a Systemof Simultaneous Nonlinear Equations (Algorithm 378 $C5))	
2076	Nilson, E. N.;	Cubic Splines on Uniform Meshes	A very simple procedure is presented for constructing cubic splines,periodic or nonperiodic, on uniform meshes.  Arcs of two cubics sufficeto construct a basis of cardinal splines.  An algorithm is given whichrequires only minimal storage and computation and permits easy trade-offof one against the other.
2077	Pomeranz, J. E.;Weil Jr., R. L.;	The Cyclical Majority Problem	The problem of the cyclical majority is presented and some new, simulatedresults for 3, 4, 5, ..., 40 issues ad 3, 5, 7, ..., 37 judges are reported.
2078	Eastman, C. M.;	Representations for Space Planning	Problems involving the arrangement of objects in two-or three-space where the objective function primarily consistsof derivatives of the distance between objects or their arrangementare called space planning problems.  The representationalrequirements for this problem area are defined and compared with currentcomputer graphic languages.  Four alternative data structuresthat allow automated space planning are described and compared.
2079	Wirth, N.;	On Multiprogramming, Machine Coding, and Computer Organization	
2080	Hansen, P. B.;	The Nucleus of a Multiprogramming System	This paper describes the philosophy and structure of a multiprogramming systemthat can be extended with a hierarchy of operating systems to suit diverserequirements of program scheduling and resource allocation.  The systemnucleus simulates an environment in which program execution and input/outputare handled uniformly as parallel, cooperating processes.  A fundamental set of primitives allows the dynamic creation and controlof a hierarchy of processes as well as the communication among them.
2081	Bayer, R.;Witzgall, C.;	Some Complete Calculi for Matrices	A matrix calculus is introduced with the intention of developing data structuressuitable for a high level algorithmic language for mathematical programming.The paper investigates how the special structure of matrices can be describedand utilized for efficient computing by saving memory space andsuperfluous operations.  Sequences of Matrices (and sequences of sequencesof matrices) are considered, and matrix operators areextended to sequence operators and cumulative operators.  Algorithmsare given which use symbol manipulation of matrix expressions soas to find the forms best suited for computation.  These forms arecalled normal forms.  Several completeness results are obtainedin the sense that for each expression an equivalent expressionin normal form can be found within a specified calculus.
2082	Mills, H. D.;	Syntax-Directed Documentation For PL 360	The language PL 360, together with its phrase structure grammar, is used as aconcrete basis for illustrating an idea called syntax-directed documentation.This idea is (1) to use the phrase structure of a program to define thestructure of a formal documentation for that program; (2) to use the syntactictypes and identifiers in the resulting structure to trigger the automaticformation of questions to the programmer, whose answers willbecome part of that documentation; and (3) to provide automatic storageand retrieval facilities so that other programmers who wantto understand or modify the program can access the resulting documentation,which is cross-indexed in various ways by syntactic typesand objects.  A small PL 360 program, already foundin the literature, is worked out as an example.
2083	DeSalvio, A. J.;Purdy, J. G.;Rau, J.;	Creation and Control of Internal Data BasesUnder a Fortran Programming Environment	A method is described for the definition of a user's COMMON structureand the automatic generation of the necessary COMMON, DIMENSION, EQUIVALENCE,and type declarations for each of the user's routines.  The definitionfor the COMMON is contained in an easy to modify form, thusallowing the control of general communications of data between routines.The described system has been implemented on the IBM 7094,CDC 6000 series, and the IBM 360.  The method has proved to be invaluablefor the definition and control of COMMON in many large-scale programs.
2084	Maurer, H. A.;	A Note on the Complement of Inherently Ambiguous Context-Free Languages	
2085	Dempster, J. R. H.;	Comment on a Paging Anomaly	
2086	Kailas, M. V.;	Another Method of Converting from Hexadecimal to Decimal	
2087	Pager, D.;	A Number System for the Permutations	
2088	Bray, T. A.;Witzgall, C.;	Netflow (ALgorithm 336 $H))	
2089	Rapp, D. G.;Scott, L. D.;	Prime Number (Algorithm 310 $A1))	
2090	Levine, M. J.;	Symbolic Expansion of Algebraic Expressions (Algorithm 377 $R2))	
2091	Cardenas, A. F.;Karplus, W. J.;	PDEL-A Language for Partial Differential Equations	Conventional computer methods available to solvecontinuous system problems characterized by partialdifferential equations are very time-consuming and cumbersome.  Aconvenient, easy to learn and to use, high level problem orientedlanguage to solve and study partial differential equation problemshas been designed; a practical translator for the language has alsobeen designed, and a working version of it has been constructedfor a significant portion of the language.  This Partial DifferentialEquation Language, PDEL, is outlined, and the highlightsof the translator are briefly summarized.
2092	Schwarcz, R. M.;Burger, J. F.;Simmons, R. F.;	A Deductive Question-Answer for Natural Language Inference	The question-answering aspects of the Protosynthex III prototype language processing system are described and exemplified indetail.  The system is written in LISP 1.5 and operates on the Q-32time-sharing system.  The system's data structures and their semanticorganization, the deductive question-answering formalism ofrelational properties and complex-relation-forming operators, andthe question-answering procedures which employ these features intheir operation are all described and illustrated.  Examples of thesystem's performance and of the limitations of its question-answeringcapability are presented and discussed.  It is shown that theuse of semantic information in deductive question answering greatlyfacilitates the process, and that a top-down procedure which worksfrom question to answer enables effective use to be made of thisinformation.  It is concluded that the development of ProtosynthexIII into a practically useful system to work with large databases is possible but will require changes in both the datastructures and the algorithms used for question answering.
2093	Schweikert, D. G.;	A Comparison of Error Improvement Estimatesfor Adaptive Trapezoid Integration	Various simple choices of error improvement estimates for the trapezoidrule are studied to demonstrate a comparison procedure which isrelatively independent of the profusion of adaptive search and stoppingstrategies.  Comparisons are based on x^r, `; the inclusionof the noninteger powers makes this more realistic than the usual polynomialbased comparison.  Behavior near the singularity was foundto be the dominant factor, and a new estimate, based on a constantcurvature assumption and parametric differences, was consideredslightly better than the other choices considered.
2094	Watson, G. A.;	On an Algorithm for Nonlinear Minimax Approximation	Certain nonlinear minimax approximation problems are characterized by properties which permit the application of special algorithms,mainly based on the exchange algorithms of Remes (1934, 1935), fortheir solution.  In this paper the application to problems of thistype of a general nonlinear algorithm due to Osborne and Watson(1969) is considered.  Examples are given to illustrate that thisalgorithm can give satisfactory results and, in particular, cansuccessfully solve problems which lead to difficultieswith the more conventional specialist method.
2095	Batson, A.;Ju, S.;Wood, D. C.;	Measurements of Segment Size	Distributions of segment sizes measured under routine operating conditions on a computer system which utilizes variable sized segments(the Burroughs B5500) are discussed.  The most striking featureof the measurements is the large number of small segments-about 60percent of the segments in use contain less than 40 words.  Althoughthe results are certainly not installation independent, and although theyare particularly influenced by features of the B5500 ALGOL system, theyshould be relevant to the design of new computer systems,especially with respect to the organization of paging schemes.
2096	Slagle, J. R.;Dixon, J. K.;	Experiments with the M & N Tree-Searching Program	The M & N procedure is an improvement to the mini-maxbacking-up procedure widely used in computer program for game-playingand other purposes.  It is based on the principle that it isdesirable to have many options when making decisions in the face ofuncertainty.  The mini-max procedure assigns to a MAX (MIN) nodethe value of the highest (lowest) valued successor to that node.The M & N procedure assigns to a MAX (MIN) node some function ofthe M (N) highest (lowest) valued successors.  An M & N procedure waswritten in LISP to play the game of kalah, and it was demonstrated thatthe M & N procedure is significantly superior to the mini-maxprocedure.  The statistical significance of important conclusions is given.Since information on statistical significance has often been lacking in paperson computer experiments in the artificial intelligence field, these experimentscan perhaps serve as a model for future work.
2097	Fenichel, R. R.;Weizenbaum, J.;Yochelson, J. C.;	A Program to Teach Programming	The TEACH system was developed at MIT to ease the cost and improve the resultsof elementary instruction in programming.  To the student, TEACH offers looselyguided experience with a  conversational language which was designed withteaching in mind.  Faculty involvement is minimal.  A term of experiencewith TEACH is discussed.  Pedagogically, the system appears to be successful;straightforward reimplementation will make it economically successful as well.Similar programs of profound tutorial skill will appear only as the results ofextended research.  The outlines of his research are beginning to become clear.
2098	Hill, G. W.;Loughhead, M.;	t-Test Probabilities (Algorithm 321);Student's t-Distribution (Algorithm 344)	
2099	Knoble, H. D.;	Eigenvalues and Eigen vectors of aReal General Matrix (Algorithm 343 $F))	
2100	Barrodale, I.;	Ortho (Algorithm 127 $F5))	
2101	Spath, H.;	Least Squares Fit By f(x) = Acos(Bx+C) (Algorithm 376 $E2))	
2102	Spath, H.;	Fitting Data To One Exponential (Algorithm 375 $E2))	
2103	White, J. S.;	Restricted Partition Generator (Algorithm 374 $A1))	
2104	White, J. S.;	Number of Doubly Restricted Partitions (Algorithm 373 $A1))	
2105	Robins, M. F.;Beyer, J. D.;	An Interactive Computer System Using Graphical Flowchart Input	An interactive computer system operational on a graphical computer terminal isdescribed.  This system was designed to demonstrate a method of programming bycomputer interpretation of a flowchart.  The user draws a description of asampled-data system and specifies description is transmitted to a largescale computer.  The design is simulated, and a graphic representation of theprocessed signal is returned to the scope.  A successful design may requirenumerous modifications of the original design.  A graphical interactive systemprovides an environment to perform this iterative process efficiently andeffectively.
2106	Ness, D. N.;Green, R. S.;Martin, W. A.;Moulton, G. A.;	Computer Education in a Graduate School of Management	Several years of experience have led to the belief that the creativedesign and evaluation of management information systems requiresa thorough understanding of the related computer technology.  Conceptssuch as paging and priority interrupt systems can best be explained at themachine language level.  Any machine used for expositionshould fulfill several criteria.  It should: (1) raise as fewspurious issues as possible; (2) allow, without undue effort, thesolution of interesting problems; (3) be capable of exposing alloutstanding issues of significance, capable of exposing all outstandingissues of significance, within the chosen machine; (4) beseful for pursuing issues in great depth when appropriate; (5) notbe committed to the equipment provided by any manufacturer; (6) be able toprovide the student with diagnostic aids to a great depth;(7) allow the student ready access to the machine; (8) be capableof extension to expose new issues as they come along.  We haveconstructed a simulated machine and its associated software whichmeets these criteria.  This system, called the PRISM system,is documented by a primer and a reference manual.
2107	Bell, J. R.;	The Quadratic Quotient Method: A HashCode Eliminating Secondary Clustering	Secondary clustering as a cause of hash code inefficiency is discussed, and anew hashing method based on its elimination is presented.  Comparisons withprevious methods are made both analytically and empirically.
2108	Jones, B.;	A Variation on Sorting by Address Calculation	The principles of address calculation and merging are combined to yield anefficient sorting technique. Detailed flowcharts of the most important programsteps are included. The characteristics of the proposed sort are discussed.
2109	Radke, C. E.;	The Use of Quadratic Residue Research	A quadratic residue search method has previously been suggestedto avoid the clustering usually encountered when hash address collisionsoccur and linear search methods are used.  The search size, becauseof the property of quadratic residues, is limited to one half ofthe storage table.  It is shown that for some classes of prime numbersthe complement of the set of quadratic residues can easily be determined andhence the entire table of size p, where p is that prime number, can be searched.
2110	Earley, J.;	An Efficient Context-free Parsing Algorithm	A parsing algorithm which seems to be the most efficient general context-freealgorithm known is described.  It is similar to both Knuth's LR(k) algorithmand the familiar top-down algorithm.  It has a time bound proportional ton^3 (where n is the length of the string being parsed) in general; it has an^2 bound for unambiguous grammars; and it runs in linear time on a largeclass of grammars, which seems to include most practical context-freeprogramming language grammars.  In an empirical comparison it appearsto be superior to the top-down and bottom-up algorithms studied by Griffithsand Petrick.
2111	Morgan, H. L.;	Spelling Correction in Systems Programs	Several specialized techniques are shown for efficientlyincorporating spelling correction algorithms into compilers and operating systems.  These include the use of syntaxand semantics information, the organization of restricted keywordand symbol tables, and the consideration of a limited class of spellingerrors.  Sample 360 coding for performing spelling correctionis presented.  By using systems which perform spelling correction,the number of debugging runs per program has been decreased,saving both programmer and machine time.
2112	Vere, S.;	Translation Equations	Input limited transduction expressions, or translation equations,are used to describe the syntax and left-context sensitive semantics forcontext-free languages.  A formal procedure is given for deriving froma set of translation equations the specifications for a pushdown translator.The translator consists of Mealy form finite-state automata interactingby means of a pushdown stack.  Within the framework described stringrecognition and parsing may be treated as special cases of the translationproblem.
2113	von Glasersfeld, E.;	The Multistore Parser for Hierarchical Syntactic Structures	A syntactic parser is described for hierarchical concatenation patternsthat are presented to the analyzer in the form of linear strings.  Particularemphasis is given to the system of "significant addresses" by meansof which processing times for large-scale matching procedurescan be substantially reduced.  The description makes frequent useof examples taken from the fully operational implementation of theparser in an experimental English sentence analyzer.  By structuringan area of the computer's central core storage in such a waythat the individual locations of bytes and bits come to represent thedata involved in the matching procedure, the shifting of informationis reduced to a minimum, and the searching of lists is eliminatedaltogether.  The matches are traced by means of binary masksand the state of single bits determines the operational flow of theprocedure.  The method could be implemented with any interpretivegrammar, provided it can be expressed by the functional classificationof the items composing the input hierarchical structures.
2114	Hsiao, D.;	A Formal System for Information Retrieval from Files	A generalized file structure is providedby which the concepts of keyword, index, record, file, directory,file structure, directory decoding, and record retrieval are definedand from which some of the frequently used file structures suchas inverted files, index-sequential files, and multilist files arederived.  Two algorithms which retrieve records from the generalized filestructure are presented.
2115	Payne, W. H.;	Fortran Tausworthe Pseudorandom Number Generator	
2116		Interchange Rolls of Perforated Tape for InformationInterchange* (Proposed American National Standard)	
2117		Representation for Calendar Date for Machine-to-Machine Data Interchange*(Proposed American National Standard)	
2118	Griffin, R.;Redish, K. A.;	An Efficient Algorithm for Sorting withMinimal Storage (Algorithm 347 $M1))	
2119	Gautschi, W.;Klein, B. J.;	Derivatives (Algorithm 282 $S22))	
2120	Dunham, K. B.;	An Algorithm to Produce Complex Primes, Csieve (Algorithm 372 $A1))	
2121	McKay, J. K. S.;	Partitions in Natural Order (Algorithm 371 $A1))	
2122	Butler, E. L.;	General Random Number Generator (Algorithm 370 $G5))	
2123	Schaffer, H. E.;	Generator of Random Numbers Satisfying thePoisson Distribution (Algorithm 369 $G5))	
2124	Stehfest, H.;	Numerical Inversion of Laplace Transforms (Algorithm 368 $D5))	
2125	Montanari, U.;	A Note on Minimal Length Polygonal Approximation to a Digitized Contour	A method for extracting a smooth polygonalcontour from a digitized image is illustrated.The ordered sequence of contour points and the connection graph ofthe image are first obtained by a modified Ledley algorithm in oneimage scan.  A minimal perimeter polygon subjected to specified constraintsis then chosen as the approximating contour.  The determination of the minimalpolygon can be reduced to a nonlinear programmingproblem, solved by an algorithm which takes into accountthe weak bonds between variables.  Some examples are presented,and the corresponding computing times are listed.
2126	Irons, E. T.;	Experience with an Extensible Language	An operational extensible language system is described.The system and its base language are appraised withrespect to efficiency, flexibility, and utilityfor different categories of users.
2127	Simmons, R. F.;	Natural Language Question-Answering Systems: 1969	Recent experiments in programming naturallanguage question-answering systems are reviewedto summarize the methods that have been developed for syntactic, semantic,and logical analysis of English strings.  It is concludedthat at least minimally effective techniques have been devised foranswering questions from natural language subsets in small scaleexperimental systems and that a useful paradigm has evolved to guideresearch efforts in the field.  Current approaches to semanticanalysis and logical inference are seen to be effective beginningsbut of questionable generality with respect either to subtle aspects ofmeaning or to applications over large subsets of English.Generalizing from current small-scale experiments to language-processingsystems based on dictionaries with thousands of entries-withcorrespondingly large grammars and semantic systems-may entaila new order of complexity and require the invention and developmentof entirely different approaches to semantic analysis and questions answering.
2128	Mullery, A. P.;Driscoll, G. C.;	A Processor Allocation Method for Time-Sharing	A scheduling algorithm is proposed which is intended to minimize changes oftasks on processors and thereby reduce over-head.  The algorithm also hasapplication to more general resource allocation problems.  It is implementedby means of a method for efficiently handling dynamically changing segmentedlists.
2129	Gautschi, W.;	Recursive Computation of Certain Derivatives-AStudy of Error Propagation	A brief study is made of the propagation of errorsin linear first-order difference equations.  Therecursive computation of successive derivatives of (e^x)/xand (cos x)/x is considered as an illustration.
2130	Lowe, T. C.;	Automatic Segmentation of Cyclic Program StructuresBased on Connectivity and Processor Timing	Time-shared, multiprogrammed, and overlayed batch systems frequentlyrequire segmentation of computer programs into discrete portions.These program portions are transferred between executable andperipheral storage whenever necessary; segmentation of programs in a manner that  reduces the frequency of such transfers is thesubject of this paper.  Segmentation techniques proposed by C. V.Ramamoorthy are subject to limitations that arise when the preferredsegment size is not compatible with the physical restrictionsimposed by the available computing equipment.  A generalization ofRamamoorthy's suggestions is made in order to allow their applicationwhen circumstances are other than ideal.
2131	Gustafson, S.;	Rapid Computation of Weights of InterpolatoryQuadrature Rules [D1] (Algorithm 417)	
2132	Gustafson, S.;	Rapid Computation of Coefficients of InterpolationFormulas [E1] (Algorithm 416)	
2133	Bourgeois, F.;Lassalle, J. C.;	Algorithm for the Assignment Problem(Rectangular Matrices) [H] (Algorithm 415)	
2134	Bourgeois, F.;Lassalle, J.;	An Extension of the Munkres Algorithm forthe Assignment Problem to Rectangular Matrices	The assignment problem, together with Munkresproposed algorithm for its solution in squarematrices, is presented first.  Then the authors developan extension of this algorithm which permitsa solution for rectangular matrices.  Timing resultsobtained by using an adapted version of Silver'sAlgol procedure are discussed, and a relation betweensolution time and problem size is given.
2135	Gustafson, S.;	Rapid Computation of General InterpolationFormulas and Mechanical Quadrature Rules	Let f have n continuous on a closed interval[a,b] and let L be a linear functional.  The attemptis made to approximate L (f) with L (Q) where Q is a polynomial,approximating f.  Algorithms are developedfor rapid computation of L (Q) for a wide class ofselections of Q which includes the Lagrangian andHermitian rules as special cases.
2136	Blumberg, J. W.;Foulk, C. R.;	A Note on "A Modification of Nordsieck'sMethod Using an 'Off-Step' Point"	
2137	Rochfeld, A.;	New LISP Techniques for a Paging Environment	The system described herein employs the blockconcept, and that of global and local variables,in addition to the methods applied in most LISP systems.Also, a new means of list representation isused: "local sequential" for lists created during compilation,and "block level sequential" for thosecreated dynamically.  A new garbage collection algorithmhas been introduced to make lists as compactas possible; partial garbage collection is performed aftereach block exit instead of total garbage collectionwhen storage is exhausted.  The algorithm does not usethe customary flagging procedure.  This combinationof features has eliminated the need for a free list,and effectively minimizes the number of pages usedat any moment.
2138	Wulf, W. A.;Russell, D. B.;	BLISS: A Language for Systems Programming	A language, BLISS, is described.  This languageis designed so as to be especially suitablefor use in writing production software systems for aspecific machine (the PDP-10): compilers, operatingsystems, etc.  Prime design goals of the design are theability to produce highly efficient object code,to allow access to all relevant hardware features ofthe host machine, and to provide a rational meansby which to cope with the evolutionary nature of systemsprograms.  A major feature which contributesto the realization of these goals is a mechanism permittingthe definition of the representation of alldata structures in terms of the access algorithm for elements of the structure.
2139	Harrison, M. C.;	Implementation of the Substring Test by Hashing	A technique is described for implementing thetest which determines if one string is a substringof another.  When there is low probability that the testwill be satisfied, it is shown how the operationcan be speeded up considerably if it is preceded bya test on appropriately chosen hash codes of thestrings.
2140	Mullin, J. K.;	Retrieval-Update Speed Tradeoffs Using Combined Indices	In a paper in the November 1970 Communicationsof the ACM, V. Y. Lum introduced a techniqueof file indexing named combined indices.  This techniquepermitted decreased retrieval time at the costof increased storage space.  This paper examines combinedindices under conditions of file usage withdifferent fractions of retrieval and update.  Tradeoffcurves are developed to show minimal cost of fileusage by grouping various partially combined indices.
2141	Amidon, E. L.;Akin, G. S.;	Algorithmic Selection of the BestMethod for Compressing Map Data Strings	The best of a dozen different methods forcompressing map data is illustrated.  The choicesare generated by encoding data strings-sequence of likecodes-by three methods and in four directions.Relationships are developed between compression alternativesto avoid comparing all of them.  The techniquehas been used to compress data from forest resource maps,but is widely applicable to map and photographicdata reduction.
2142	Gordon,R.;Herman, G. T.;	Reconstruction of Pictures from Their Projections	There are situations in the natural sciencesand medicine (e.g. in electron microscopy andX-ray photography) in which it is desirable to estimate thegray levels of a digital picture at the individualpoints from the sums of the gray levels along straightlines (projections) at a few angles.  Usually,in such situations, the picture is far from determinedand the problem is to find the "most representative"picture.  Three algorithms are described (all usingMonte Carlo methods) which were designed to solvethis problem.  The algorithms are applicable in a largeand varied number of fields.  The most importantuses may be the reconstruction of possibly asymmetric particlesfrom electron micrographs and three-dimensionalX-ray analysis.
2143	Bolub, G. H.;Smith, L. B.;	Chebyshev Approximation of Continuous Functionsby a Chebyshev System of Functions [E2] (Algorithm 414)	
2144	Malcolm, M. A.;	On Accurate Floating-Point Summation	The accumulation of floating-point sums isconsidered on a computer which performs t-digitbase B floating-point addition with exponents in the range-m to M.  An algorithm is given for accuratelysumming N t-digit floating-point numbers.  Each ofthese N numbers is split into q parts, forming qNt-digit floating-point numbers.  Each of these is thenadded to the appropriate one of n auxiliary t-digitaccumulators.  Finally, the accumulators are added togetherto yield the computed sum.  In all, qN+n-1t-digit floating-point additions are performed.  Underusual conditions, the relative error in the computedsum is at most [(t+1)/v]B^(1-t) for some v.  Further,with an additional q+n-1 t-digit additions, thecomputed sum can be corrected to full t-digit accuracy.For example, for the IBM/360 (B=16, t=14, M=63,m=64), typical values for q and n are q=2 and n=32.In this case, (*) becomes N <= 32,768, and we have[(t+1)/v]B^(1-t) = 4x16^-13.
2145	Aramaki, I.;Kawabata, T.;Kazuhiko, A.;	Automation of Etching-Pattern Layout	HELP (Heuristic Etching-Pattern Layout Program)is an application program developed to computerizethe tedious and error-prone although vitally importantwiring design of printed circuit boards.  HELPhelps automate a design stage one step closer to productionthan logical design.  It can be used to designwiring patterns of two-layer circuit boards on whichICs in dual-in-line packages as well as discretecomponents such as transistors and resistors have beenplaced.  HELP employs two methods of wiring.One is the heuristic method, which simulates humanapproaches to wiring design, and the other is thetheoretically interesting but time-consuming method ofmaze-running, based on the Lee's algorithm.  HELPperforms more than 90 percent of required wiring bythe heuristic path with respect to a performancefunction for each point-to-point, and point-to-lineconnection.  It can bring the number of successfulwiring connections very close to 100 percent.
2146	Shell, D. L.;	Optimizing the Polyphase Sort	Various dispersion algorithms for the polyphasesorting procedure are examined.The optimumalgorithm based on minimizing the total number of unitstrings read is displayed.  The logic of thisalgorithm is rather complicated; hence, several othernew dispersion algorithms with more straightforwardlogic are presented.  Of the simple dispersion algorithmsdiscussed, the  Horizontal is best.  It doesapproximately one-fourth to one and one-half percentless reading and writing than most algorithms inuse today.  An additional two and one-fourth to threepercent improvement can be achieved by utilizingthe Modified Optimum Algorithm.  This algorithm is relativelystraightforward, but it requires a fairlyclose estimate of the total number of unit strings before the dispersion begins.
2147	Hamblen, J. W.;	Using Computers in Higher Education:Past Recommendations, Status, and Needs	Data from a survey conducted with NationalScience foundation support, which was publishedin December 1970, is reviewed, and it is pointed outthat, with regard to computers in higher education,national goals stated in the Rosser and Pierce Reportshave not been attained.  Quality was lacking inhardware or courses in nearly half of the associateand bachelor's degree programs in data processing,computer science, etc., offered in 1966-67.  A pleais made for continuing studies on status and goalsfor computing in higher education, improvement of degreeprograms, and a national testing laboratoryfor educational technology.
2148	Branquart, P.;Lewi, J.;Sintzoff, M.;Wodon, P. L.;	The Composition of Semantics in Algol 68	The main features of Algol 68 are explainedfrom a semantic point of view.  It is shown howthe language permits the composition of values and actions,i.e. ultimately programs, from a minimumset of primitives with a few fundamental recursive rulesof composition.  The associated syntax is brieflyreviewed.  An attempt has been made to obtain a structuredand simple introduction to both Algol 68 andits orthogonal design.
2149	Lyness, J. N.;	ENTCAF and ENTCRE: Evaluation of NormalizedTaylor Coefficients of an Analytic Function [C5](Algorithm 413)	
2150	Courois, P. J.;Heymans, F.;Parnas, D. L.;	Concurrent Control with "Readers" and "Writers"	The problem of the mutual exclusion of severalindependent processes from simultaneous accessto a "critical section" is discussed for the case wherethere are two distinct classes of processes knownas "readers" and "writers."  The "readers" may sharethe section with each other, but the "writers" musthave exclusive access.  Two solutions are presented:one of the case where we wish minimum delay forthe readers; the other for the case where we wishwriting to take place as early as possible.
2151	Nemeth, A. G.;Rovner, P. D.;	User Program Measurement in a Time-Shared Environment	A general discussion of the measurement ofsoftware systems is followed by a description ofa hardware and software scheme for measuring user programsin a time-shared environment.  The TX-2 computerat MIT Lincoln Laboratory was used for the implementationof such a system and the characteristics ofthis implementation are reported.  A scenario showingthe system in use is presented.  Finally, it isshown how other time-sharing systems may provide similar measuring facilities.
2152	Newman, W. M.;	Display Procedures	Although the use of structured display filesis widespread in interactive computer graphics,these structures present a number of problems whichtend to restrict their generality and usefulness.This paper discusses some of these problems, and suggests analternative approach to display systemdesign which avoids the use of structured display files.This technique employs display procedures togenerate information for display.  By including transformationswithin calls to these procedures it ispossible both to simplify the specification of picturesand to speed up their generation.  Display procedurespermit picture elements to be defined conditionallyand also facilitate the processing of inputs frompointing devices.  The paper is illustrated by examplesfrom aversion of the EULER language in whichdisplay procedures were implemented.
2153	Oldehoeft, A. E.;Conte, S. D.;	Experiments with an Automated Instructional System for Numerical Methods	A computer system was developed at PurdueUniversity to teach portions of an undergraduatecourse in numerical methods.  Each instructional unitor lesson is divided into three modes of instructionwhich allow the student to press from a computer-controlledpresentation to a student-controlled investigation.The system is designed as a classroom-independent courseof study, and has been used for two semestersby students in lieu of conventional classroom instruction.Initial measures of effectiveness, studentacceptance, and operational cost are the result of testingthe system independent of instructor intervention.The system is operational on a CDC 6500 with teletype terminals.
2154	ANSI Subcommittee X3J3;	Clarification of Fortran Standards-Second Report	In 1966, after four years of effort, Fortranbecame the first programming language standardizedin the United States.  Since that initial achievementstudy and application of the standard specificationshave revealed the need for maintenance of the standards.As the result of work initiated in 1967, aninitial set of clarifying interpretations was prepared andthis clarification was published in Communicationsof the ACM in May 1969.  That work has continued andhas resulted in the preparation of this second setof clarifying interpretations.  The nature of the maintenanceand the new set of corrections to and interpretationsof the standard specifications are reported.
2155	Earley, J.;	Toward an Understanding of Data Structures	This paper presents a notation and formalismfor describing the semantics of data structures.This is based on directed graphs with named edges andtransformations on these graphs.  In addition,an implementation facility is described which couldbe part of a programming language, which allows aprogrammer who has expressed the semantics of an algorithmin terms of the graphs to then specify theimplementation of some of his data structures in order to gain efficiency.
2156	Fenichel, R. R.;	Comment on Cheney's List-Compaction Algorithm	
2157	Flores, I.;Madpis, G.;	Average Binary Search Length for Dense Ordered Lists	
2158	Liniger, W.;	A Stopping Criterion for the Newton-Raphson Methodin Implicit Multistep Integration Algorithmsfor Nonlinear Systems of Ordinary Differential Equations	
2159	Phillips, D. L.;	A Note on Best One-Sided Approximations	
2160	Wong, E.;Chiang, T. C.;	Canonical Structure in Attribute Based File Organization	A new file structure for attribute based retrievalis proposed in this paper.  It allows queriesinvolving arbitrary Boolean functions of the attribute-valuepairs to be processed without taking intersectionsof lists.  The structure is highly dependent on theway in which the file is to be used and is uniquelydetermined by the specification of the allowed queries.Thus, for example, the structure for retrievalon the basis of ranges of values of a given attribute wouldbe very different from one where only retrievalon the basis of a single value is permitted.  The fileorganization being proposed is based on the atomsof a Boolean algebra generated by the queries.  The desirableproperties claimed for this structure areproved, and file maintenance questions are discussed.
2161	Paton, K.;	An Algorithm for the Blocks and Cutnodes of a Graph (Corrigendum)	
2162	Isoda, S.;Goto, E.;	An Efficient Bit Table Technique for DynamicStorage Allocation of 2^n-word Blocks	An efficient bit table technique for dynamic storageallocation of 2^n-word blocks, which requiresa minimized amount of memory for bookkeeping purposes,is described. The technique has been tested inan implementation of the list processing language L^6.A number of ideas incorporated in the processorare also described.
2163	Teichroew, D.;	Education Related to the Use of Computers in Organizations	The ACM Curriculum Committee on Computer Educationfor Management has been carrying out a studyon "Curriculum Development in Management InformationSystems Education in Colleges and Universities"under a grant from the National Science Foundation.This position paper provides a framework for thestudy.  Preliminary conclusions are presented on theneed for education in administrative informationsystems, and appropriate college curricula and coursesare suggested.  Also, the role of professionalsocieties and organizations using computers is discussed,and the plans of the Committee are outlined.The initial approach of the Committee has been to describethe education necessary for the effectiveuse of computers in organizations, to classify thepositions for which education is required, and tosurvey educational programs now available.
2164	Moses, J.;	Symbolic Integration: The Stormy Decade	Three approaches to symbolic integration in the1960's are described.  The first, from artificialintelligence, led to Slagle's SAINT and to a largedegree to Moses' SIN.  The second, from algebraicmanipulation, led to Manove's implementation and toHorowitz' and Tobey's reexamination of the Hermitealgorithm for integrating rational functions.  The third,from mathematics, led to Richardson's proofof the unsolvability of the problem for a class of functionsand for Risch's decision procedure for theelementary functions.Generalizations of Risch's algorithmto a class of special functions and programsfor solving differential equations and for findingthe definite integral are also described.
2165	Barton, D.;Fitch, J. P.;	General Relativity and the Application of Algebraic Manipulative Systems	The paper describes some applications of symbolicalgebra systems to problems of general relativityincluding the derivation of the field equations, thePetrov classification of a metric, and the solutionof the field equations in the presence of matter ina simple case.  Attention is drawn to the strictlyalgebraic difficulties encountered in this work.
2166	Jefferys, W. H.;	Automated Algebraic Manipulation in Celestial Mechanics	In this paper we consider some of the applicationsof automated algebraic manipulation whichhave been made in celestial mechanics.  Particular attentionis paid to the use of Poisson series, anda typical problem in perturbation theory is described.The requirements of processors for use in celestialmechanics are considered and compared with those for generalmanipulation packages.  Some future directionsfor research using these systems are briefly outlined.To illustrate the relative simplicity of thealgorithm required in celestial mechanics, a typicalintegration problem is considered in an appendix.
2167	Moses, J.;	Algebraic Simplification: A Guide for the Perplexed	Algebraic simplification is examined first fromthe point of view of a user who needs to comprehenda large expression, and second from the point of viewof a designer who wants to construct a useful andefficient system.  First we describe various techniquesakin to substitution.  These techniques can beused to decrease thesize of an expression and make itmore intelligible to a user.  Then we delineatethe spectrum of approaches to the design of automatic simplificationcapabilities in an algebraic manipulationsystem.  Systems are divided into five types.  Each typeprovides different facilities for the manipulationand simplification of expressions. Finally we discusssome of the theoretical results related to algebraicsimplification.  We describe several positive resultsabout the existence of powerful simplificationalgorithms and the number-theoretic conjectures on whichthey rely.  Results about the nonexistence ofalgorithms for certain classes of expressions are included.
2168	Fenichel, R. R.;	List Tracing in Systems Allowing Multiple Cell-Types	List-processing systems have each allowed theuse of only a single size and configuration oflist cell.  In this paper a system is described whichallows the use of arbitrarily many different sizesand configurations of list cells, possibly not specified until run time.
2169	Hall Jr., A. D.;	The Altran System for Rational Function Manipulation-A Survey	Altran is a complete system for symbolic computationwith rational functions in several variableswith integer coefficients.  It has been designed andimplemented to handle large problems with ease andefficiency.  Considerable effort has been spent to ensurea minimum amount of machine dependence in theimplementation, thus permitting the system to be installedquickly and easily on a variety of computingmachines.  In this paper a brief description of the language,run time data structures, and implementationis given.
2170	Hearn, A. C.;	Applications of Symbol Manipulation in Theoretical Physics	This paper surveys the applications of symboliccomputation techniques to problems in theoreticalphysics.  Particular emphasis is placed on applicationsin quantum electrodynamics where the most activityhas occurred.
2171	Raduchel, W. J.;	Solution of Simultaneous Nonlinear Equations	
2172	Cermak, J.;	Graph Plotter [J6] (Algorithm 412)	
2173	McVitie, D. G.;Wilson, L. B.;	Three Procedures for the Stable Marriage Problem [H] (Algorithm 411)	
2174	McVitie, D. G.;Wilson,L. B.;	The Stable Marriage Problem	The original work of Gale and Shapley on an assignmentmethod using the stable marriage criterionhas been extended to find all the stable marriage assignments.The algorithm derived for finding allthe stable marriage assignments is proved to satisfyall the conditions of the problem.  Algorithm 411applies to this paper.
2175	Ramamoorthy, C. V.;Gonzalez, M. J.;	Subexpression Ordering in the Execution of Arithmetic Expressions	An arithmetic expression can often be brokendown into its component subexpressions.  Dependingon the hardware environment in which the expression isto be executed, these subexpressions can be evaluatedin serials, in parallel, or in a combination of thesemodes.  This paper shows that expression executiontime can be minimized only if consideration is given tothe ordering of the subexpressions.  In particular,subexpressions should be executed in order of decreasingmemory and processor time requirements.  Thisobservation is valid for configurations ranging froma uniprocessor with an unbuffered main memory tomultiprocessor with a "cache" buffer memory.  If thenumber of subexpressions which can be executed inparallel exceeds the number of available processors,then execution of some of these subexpressions mustbe postponed.  A procedure is given which combines thisrequirement with the earlier ordering considerationsto provide an optimal execution sequence.
2176	Ferguson, D. E.;	Buffer Allocation in Merge-Sorting	A fixed buffer allocation for merge-sortingis presented here which minimizes the number ofinput-output operations for a given order of merge.When sorting on movable arm disks, the number ofseeks is equal to the number of input-output operations,and the seek time usually controls the sorttime.  First some standard terminology is introduced.Then the input buffer allocation method is described,followed by an analysis of the improvement to be expectedover more conventional allocation.  This analysismakes use of a particular distribution function.  Ananalysis of a completely different distributionis given which yields similar results.  This suggeststhat the results do not depend on a particulardistribution function.  An optimum output buffer sizeis also determined.  It is concluded that thisbuffering allocation can significantly reduce the timeof merge sorting on movable arm disks when theinput data are not random, and that this output bufferallocation should be used whether the data israndom or not.
2177	Paton, K.;	An Algorithm for the Blocks and Cutnodes of a Graph	An efficient method is presented for findingblocks and cutnodes of an arbitrary undirectedgraph.  The graph may be represented either (i) as anordered list of edges or (ii) as a packed adjacencymatrix.  If w denotes the word length of the machineemployed, the storage (in machine words) requiredfor a graph with n nodes and m edges increases essentiallyas 2(m+n) in case (i), or (n^2)/win case(ii).  A spanning tree with labeled edges is grown,two edges finally bearing different labels if andonly if they belong to different blocks.  For both representationsthe time required to analyze a graphon n nodes increases as n^G where G depends on the typeof graph, 1 <= G <= 2, and both bounds are attained.Values of G are derived for each of several suitablefamilies of test graphs, generated by an extensionof the web grammar approach.  The algorithm is comparedin detail with that proposed by Read for which1 <= G <= 3.
2178	Pratt, T. W.;Friedman, D. P.;	A Language Extension for Graph Processing and Its Formal Semantics	A simple programming language "extension,"Graspe, for processing directed graphs is defined.Graspe consists of a type of directed graph data structureand a set of primitive operations for manipulatingthese structures.  Graspe may be most easily implementedby embedding it in a host language.  Emphasisis placed both on Graspe itself and on its method ofdefinition.  Commonly, the definition of a languageinvolves definition of the syntactic elements and explanationof the meaning to be assigned them (thesemantics).  The definition of Graspe here is solely interms of its semantics; that is, the data structuresand operations are defined precisely but without assignmentof a particular syntactic representation.Only when the language is implemented is assignmentof an explicit syntax necessary.  An example ofan implementation of Graspe embedded in Lisp is given asan illustration.  The advantages and disadvantagesof the definition of a language in terms of its semantics are discussed.
2179	DeRemer, F. L.;	Simple LR(k) Grammars	A class of context-free grammars, called the"Simple LR(k)" or SLR(k) grammars is defined.This class has been shown to include weak precedenceand simple precedence grammars as proper subsets.How to construct parsers for the SLR(k) grammars isalso shown.  These parser-construction techniquesare extendible to cover all of the LR(k) grammars ofKnuth; they have been implemented and by directcomparison proved to be superior to precedence techniques,not only in the range of grammars covered,but also in the speed of parser construction andin the size and speed of the resulting parsers.
2180	Bernstein, A. J.;	A Programmer Training Project	A project is described whose purpose is to trainselected black residents of the Albany-Schenectadyarea in computer programming and arrange for jobs forthem in the computer field. Both the organizationand curriculum of the course are discussed.
2181	McKenney, J. L.;Tonge, F. M.;	The State of Computer Oriented Curricula in Business Schools 1970	The ACM Committee on Computer Education for Management,supported by a National Science FoundationGrant, is established to appraise the state of the artand to develop a series of recommendations forimproving computer education for management.  To providethe Committee with material for its study ofcurricular needs, five regional meetings in the UnitedStates were held in 1970, at each of which a broadcross section of invited academicians and practitionersconsidered the state of curricula in businessschools.  Three topics were covered: curricula forthe general manager; computer-related material inrequired and functional courses; and curricula for studentsconcentrating on computer-based informationsystems.  An analysis of the minutes of the meetingsrevealed a common set of experiences which raisedsimilar pedagogic and economic issues.  This presentationgives a summary of the discussions; a condensationof the pedagogic and substantive concerns raised; andconsideration of the resource allocation issuesinvolved.  Preliminary to the Committee's recommendationsfor improving computer education for management,this report has been prepared to provide the participantsand the administrators of their institutionswith background information for the ongoing task of coursedevelopment.  Chairman of the ten-man Committeeis Daniel Teichroew (The University of Michigan).
2182	Zelkowitz, M.;	Interrupt Driven Programming	
2183	Walker, R. J.;	Binary Summation	
2184	Fraser, A. G.;	On the Meaning of Names in Programming Systems	It is assumed that there is a similarity offunction between the data names of a programminglanguage and the file names of an operating system.The two functions are discussed in terms of thesame basic concepts in order to identify the extentto which they overlap. It is suggested that thereis some similarity between the idea of a file directoryand a storable object of type context.  Manipulationswith contexts are then discussed at length.  It is notedthat there is a simple extension of Church'sLambda notation that deals nicely with these ideas ofcontext manipulation.  Whereas a function can beregarded as the abstraction based upon the first two terms ofthe expression Lambda(name list)(expression)(value list),it is found that a context can be viewed as an abstractionbased upon the first two terms in the equivalentexpression Mu(name list)(value list)(expression).
2185	Glaswin, H. T.;	A Note on Compiling Fixed Point Binary Multiplications	An algorithm is developed for compiling, asa sequence of shifts, additions,and subtractions,many fixed point binary multiplications involving aconstant.  The most significant characteristics ofthe algorithm are the simplicity of the test whichdetermines if the algorithm should be applied andthe degree to which it "suggests" efficient object code.
2186	Bosarge Jr., W. E.;Johnson, O. G.;	Numerical Properties of the Ritz-Trefftz Algorithm for Optimal Control	In this paper the Ritz-Trefftz algorithm is appliedto the computer solution of the state regulatorproblem.  The algorithm represents a modification ofthe Ritz direct method and is designed to improvethe speed of solution and the storage requirements tothe point where real-time implementation becomesfeasible.  The modification is shown to be more stablecomputationally than the traditional Ritz approach.The first concern of the paper is to describe thealgorithm and establish its properties as a validand useful numerical technique.  In particular such usefulproperties as definiteness and reasonablenessof condition are established for the method.  The secondpart of the paper is devoted to a comparisonof the new techniques with the standard procedure ofnumerically integrating a matrix Riccati equationto determine a feedback matrix.  The new technique isshown to be significantly faster for comparableaccuracy.
2187	Amarel, S.;	Computer Science: A Conceptual Framework for Curriculum Planning	Two views of computer science are considered:a global view which attempts to capture broadcharacteristics of the field and its relationships toother fields, and a local view which focuses onthe inner structure of the field.  This structure is presentedin terms of the kinds of knowledge, problems,and activities that exist within the discipline, aswell as the relations between them.  An approachto curriculum planning in computer science is presentedwhich is guided by the structure of the field,by the fact that change is an important feature of thesituation, and by the expectation that computerscience will continue to increase its working contacts with other disciplines.
2188	Foley, J. D.;	An Approach to the Optimum Design of Computer Graphics Systems	Display system designers are faced with thedifficult task of selecting major subsystems inan intelligent way.  Each subsystem is chosen from largenumbers of alternatives; the selection is basedon considerations such as system response time, systemcost, and the distribution of data storage andprocessing between the graphics processor and its supportingdata processing system.  The work reportedhere develops an objective, quantitative design procedureand helps give a better understanding of nowto  configure display systems.  This is accomplished bymeans of a mathematical model of a computer drivengraphics system.  The parameters of the model are functionsof the capabilities of the graphics hardwareand of the computational requirements of the graphics application.The model can be analyzed using numericalqueueing analysis or simulation to obtain an averageresponse time prediction.  By combining the modelwith an optimization, the best graphics system configuration,subject to a cost constraint, is foundfor several applications.  The optimum configurationsare in turn used to find general display systemdesign guidelines.
2189	Harada, K.;	Generation of Rosary Permutations Expressed in Hamiltonian Circuits	Systematic generation of a specific classof permutations fundamental to scheduling problemsis described.  In a nonoriented complete graph withn vertices, Hamitonian circuits equivalent to .5(n- 1)! specific permutations of n elements, termed rosarypermutations, can be defined.  Each of themcorresponds to two circular permutations which mirror-imageeach other, and is generated successivelyby a number system covering 3*4*...*(n-1) sets of edges.Every set of edges {E[k]}, 1 <= E[k] <= k,3 <= k <= (n-1) is determined recursively by constructinga Hamiltonian circuit with k vertices froma Hamiltonian circuit with k-1 vertices, starting withthe Hamiltonian circuit of 3 vertices.  The basicoperation consists of transposition of a pair of adjacentvertices where the position of the pair inthe permutation is determined by {E[k]}.  Two algorithmstreating the same example for five verticesare presented.  It is very easy to derive all possible n!permutations  from the .5(n - 1 )! rosary permutationsbe cycling the permutations and by taking them in thereverse order-procedures which can be performedfairly efficiently by computer.
2190	House, F. R.;	Function Minimization	
2191	Chambers, J. M.;	ALGORITHM 410 Partial Sorting [M1]	
2192	Morris Jr., J. H.;	Another Recursion Induction Principle	An inductive method for proving things aboutrecursively defined functions is described.  Itis shown to be useful for proving partial functions equivalentand thus applicable in proofs about interpretersfor programming languages.
2193	Fenichel, R. R.;	On Implementation of Label Variables	Variables of label mode are conventionallyimplemented with a technique which fails to trapcertain programming errors.  Fine-grained calendar clockshave recently become available; these allowimplementation of label variables via a new techniquewhich traps all programming errors of this variety.
2194	Richards, D. L.;	How To Keep the Addresses Short	An algorithm is presented for minimizing thesum of the lengths of the blocks of coding producedby an assembler or compiler when (1) the length ofeach computer instruction is assumed to be either"long" or "short" ("long," if the memory location addressedis more than a predetermined distance fromthe current location; "short," otherwise), and (2)there are blocks of instructions whose beginnings(origins) are separated by prespecified amounts. For example,some computers permit either 8-bit addressing(interpreted relative to the location counter) or full16-bit addressing of all of memory.  When assemblingor compiling two or more blocks of instructions whichhave many mutual references in such a computer,there is no simple iterative procedure for keepingas many of the addresses short as possible.  Thispaper demonstrates that a wide class of problems ofthis type can be formulated as covering problemssolvable by means of elementary arithmetic operationson the column vectors of a ternary matrix.
2195	Montanari, U.;	On the Optimal Detection of Curves in Noisy Pictures	A technique for recognizing systems of linesis presented.  In this technique the heuristicof the problem is not embedded in the recognition algorithmbut is expressed in a figure of merit.A multistage decision process is then able to recognizein the input picture the optimal system of linesaccording to the given figure of merit.  Due to theglobal approach, greater flexibility and adequacyin the particular problem is achieved.  The relationbetween the structure of the figure of merit andthe complexity of the optimization process is then discussed.The method described is suitable for parallelprocessing because the operations relative to eachstate can be computed in parallel, and the numberof stages is equal to the length N of the curves (orto log2 N if the approximate method is used).
2196	Krolak, P.;Felts, W.;Marble, G.;	A Man-Machine Approach Toward Solving the Traveling Salesman Problem	The traveling salesman problem belongs to animportant class of scheduling and routing problems.It is also a subproblem in solving others, such asthe warehouse distribution problem.  It has beenattacked by many mathematical methods with but meagersuccess.  Only for special forms of the problemor for problems with a moderate number of points canit be solved exactly, even if very large amountsof computer time are used.  Heuristic procedures havebeen proposed and tested with only slightly betterresults.  This paper describes a computer aided heuristictechnique which uses only a modest amount ofcomputer time in real-time to solve large (100-200)point problems.  This technique takes advantage ofboth the computer's and the human's problem-solvingabilities.  The computer is not asked to solve theproblem in a brute force way as in many of today's heuristics,but it is asked to organize the data forthe human so that the human can solve the problem easily.The technique used in this paper seems topoint to new directions in the field of man-machine interactionand in the field of artificial intelligence.
2197	Nielsen, N. R.;	The Merit of Regional Computing Networks	One of the suggested means for stimulating thespread of computing capabilities in institutionsof higher learning is through the construction of regionalcomputing networks.  One such network hasbeen constructed in the San Francisco Bay Area by StanfordUniversity.  This paper reports upon the lessonslearned from the operation of the network over the pasttwo years.  A major impact of the network wasnot so much the computer power delivered to the schoolsas the awakening of computing awareness and thefostering of capability development at these schools. Theexpertise and assistance from the central facilityas well as the sharing of ideas among the participantswere other important benefits.  Both the qualityand variety of services provided by the central facilitywere found to play a key role in the effectivenessof the network.  A regional network brings many benefitsand should not be judged as a purveyor of rawcomputer power alone.
2198	Codasyl Systems Committee;	Introduction to "Feature Analysis ofGeneralized Data Base Management Systems"	This paper is a separately published introductionto a main report which analyzes the featuresof generalized data base management systems.  This introductiongives a review of the current state ofthe art in these systems and discusses the differencesand similarities between capabilities found inhost language systems and those found in self-containedsystems.  After some discussion of the problemsof data independence and binding,the four user levelsare identified and described.  Technical problemsfacing future designers are described.  The first ofthese is that of handling existing stored data andthe next is that of providing more complex data structuresthan those already available in conventionalprogramming languages.  The problem of high level interrogationand update functions acting on networkstructures is mentioned, followed by a discussion of theproblem of catering to a high volume of transactionsinitiated from terminals by parametric users-the lowestlevel of user.  The use of Cobol as a basis forfurther development work is considered at some lengthwith respect to data structures, host languagecapabilities, and self-contained capabilities.  Thissection also assesses the effect of the Data BaseTask Group proposals.  The final section outlines theten major topics in the main body of the full report.
2199	McNamee, J. M.;	A Sparse Matrix Package (Part I) [F4] (Algorithm 408)	
2200	Stein, M. L.;Munro, W. D.;	On Complement Division	The division algorithm theorem is expressedin a form that permits it to serve as the basisfor devising division operations that produce both quotientand remainder in complement form.  Algorithmsfor division yielding complement results are derivedfor numbers represented in any base greater thanone.  Both radix and radix-less-one complementation schemesare considered.  The binary form of the algorithmsthus includes both two's and one's complement implementation.The problem of quotient overflow for complementresults is dealt with as is that of selecting an appropriateform of the remainder condition for complementdivision.
2201	Talbot, P. A.;Carr III, J. W.;Coulter Jr., R. R.;Hwang, R. C.;	Animator: An On-Line Two-dimensional Film Animation System	Animator is a computer animation system whichwas designed to overcome some of the inherentdisadvantages associated with conventional computer animationtechniques.The DEC-338 serves as an inputterminal for movie making, allowing the trial and errordesign of picture sequences in a conversationalmode.  During all stages on the system input elements(light pen, pushbuttons, and teletype) is maintained.At the user's request, this record is sent to the IBM360/75 where the S-D 4020 instructions necessaryto produce the same sequence of pictures can be generated.It is anticipated that one of the primarycontributions of Animator will be the provision of afacility which will allow any professor to producehis own expository film strips.
2202	Tucker, A. B.;Flynn, M. J.;	Dynamic Microprogramming: Processor Organization and Programming	A dynamically microprogrammed processor is characterizedby a small (4^k 64-bit word) read-write"micro" storage.  The access time of this storage issimilar to the cycle time of the machine (50-100nsec).  This microstorage is used to contain both dataand subroutines.  The (micro) instructions insuch a processor differ from the conventional in thatthey perform only purely combinatorial operations;sequencing is under the control of the microinstruction.The presence of the read-write microstoragepermits a more flexible assignment of resources than theread-only storage.  In particular, the processordeveloped in this paper stresses the simultaneous operation(within the microinstruction) of the adder,shifter, masker, and testing facilities of the processor.A microassembly language is developed andthe overhead involved in subroutine linkages is analyzed.The efficiency of a flexible software linkagescheme is examined as to its overhead for various subroutinecharacteristics.  Finally, three examplesof problem-oriented programming are considered and theresulting coding is compared against a System/360assembly language version, with the technology normalized.
2203	Lum, V. Y.;Yuen, P. S. T.;Dodd, M.;	Key-to-Address Transform Techniques: A FundamentalPerformance Study on Large Existing FormattedFiles	The results of a study of eight differentkey-to-address transformation methods applied toa set of existing files are presented.  As each methodis applied to a particular file, load factor andbucket size are varied over a wide range.  In addition,appropriate variables pertinent only to a specificmethod take on different values.  The performance ofeach method is summarized in terms of the numberof accesses required to get to a record and the numberof overflow records created by a transformation.Peculiarities of each method are discussed.  Practicalguidelines obtained from the results are stated.Finally, a proposal for further quantitative fundamental study is outlined.
2204	Wirth, N.;	Program Development by Stepwise Refinement	The creative activity of programming-to be distinguishedfrom coding-is usually taught by examplesserving to exhibit certain techniques.  It is here consideredas a sequence of design decisions concerningthe decomposition of tasks into subtasks and of datainto data structures.  The process of successiverefinement of specifications is illustrated by a shortbut nontrivial example, from which a number ofconclusions are drawn regarding the art and the instruction of programming.
2205	Gear, C. W.;	DIFSUB for Solution of Ordinary DifferentialEquations [D2] (Algorithm 407)	
2206	Howell, J.;	Exact Solution of Linear Equations UsingResidue Arithmetic [F4] (Algorithm 406)	
2207	Gear, C. W.;	The Automatic Integration of Ordinary Differential Equations	An integration technique for the automaticsolution of an initial value problem for a set ofordinary differential equations is described.  A criterionfor the selection of the order of approximationis proposed.  The objective of the criterion is to increasethe step size so as to reduce solution time.An option permits the solution of "stiff" differentialequations.  A program embodying the techniquesdiscussed appears in Algorithm 407.
2208	Williams, J. G.;	Storage Utilization in a Memory Hierarchy When StorageAssignment Is Performed by a Hashing Algorithm	The utilization of storage is studied in a two-levelmemory hierarchy.  The first storage level,which is the fast store, is divided into a number ofstorage areas.  When an entry is to be filed inthe hierarchy, a hashing algorithm will attempt toplace the entry into one of these areas.  If thisparticular area is full, then the entry will be placedinto the slower second-level store, even thoughother areas in the first-level store may have spaceavailable.  Given the N entries have been filed inthe entire hierarchy, an expression is derived for theexpected number of entries filed in the first-levelstore.This expression gives a measure of how effectivelythe first-level store is being used.  By meansof examples, storage utilization is then studied as afunction of the hashing algorithm, the number ofstorage areas into which the first-level store is dividedand the total size of the first-level store.
2209	Winters, W. K.;	A Scheduling Algorithm for a Computer Assisted Registration System	This paper presents the scheduling algorithmused in the Computer Assisted Registration Systemat the University of Tennessee.  Notation is defined andthe logic of the algorithm necessary to implementeducational policy is described.  Results fromthe first term's implementation are presented.
2210	Manna, Z.;Waldinger, R. J.;	Toward Automatic Program Synthesis	An elementary outline of the theorem-provingapproach to automatic program synthesis is given,without dwelling on technical details.  The method isillustrated by the automatic construction of bothrecursive and iterative programs operating on naturalnumbers,lists, and trees,  In order to constructa program satisfying certain specifications a theoreminduced by those specifications is proved, andthe desired program is extracted from the proof.  Thesame technique is applied to transform recursivelydefined functions into iterative programs, frequentlywith a major gain inefficiency.  It is emphasizedthat in order to construct a program with loops or withrecursion, the principle of mathematical inductionmust be applied. The relation between the version ofthe induction rule used and the form of the programconstructed is explored in some detail.
2211	Noll, A. M.;	Scanned-Display Computer Graphics	A television-like scanned-display system hasbeen successfully implemented on a Honeywell DDP-224computer installation.  The scanned image is storedin the core memory of the computer, and softwarescan conversion is used to convert the rectangular coordinatesof a point to the appropriate word andbit in an output display array in core storage.  Resultsthus far indicate that flicker-free displaysof large amounts of data are possible with reasonablyfast graphical interaction.  A scanned image ofsize 240 X 254 points is displayed at a 30 frame-per-second rate.
2212	Tolman, H.;	F-DISTRIBUTION	
2213	Dell, A. M.;Weil, R. L.;Thompson, G. L.;	Roots of Matrix Pencils: The GeneralizedEigenvalue Problem [F2] (Algorithm 405)	
2214	Rokne, J.;Lancaster, P.;	Complex Interval Arithmetic	Complex interval arithmetic is defined usingreal interval arithmetic.  Complex interval divisionis defined so as to assure smallest possible resulting intervals.
2215	Slagle, J. R.;Lee, R. C. T.;	Application of Game Tree Searching Techniquesto Sequential Pattern Recognition	A sequential pattern recognition (SPR) proceduredoes not test all the features of a patternat once.  Instead, it selects a feature to be tested.  Afterreceiving the result of that test, the procedureeither classifies the unknown pattern or selects anotherfeature to be tested, etc.  Medical diagnosisis an example of SPR.  In this paper the authors suggestthat SPR be viewed as a one-person game playedagainst nature (chance).  Virtually all the powerful techniquesdeveloped for searching two-person, strictlycompetitive game trees can easily be incorporated eitherdirectly or by analogy into SPR procedures.In particular, one can incorporate the "mini averagebacking-up procedure" and the "gamma procedure,"which are the analogues of the "minimax backing-up procedure"and the "alpha-beta procedure," respectively.Some computer simulated experiments in character recognitionare presented.  The results indicate thatthe approach is promising.
2216	Hurwitz Jr., H.;	On the Probability Distribution of the Values of Binary Trees	An integral equation is derived for the generatingfunction for binary tree values, the valuesreflecting sorting effort. The analysis does not assumeuniformly distributed branching ratios, andtherefore is applicable to a family of sorting algorithmsdiscussed by Hoare, Singleton, and van Emden.The solution to the integral equation indicates thatusing more advanced algorithms in the family makesonly minor reductions in the expected sorting effort,but substantially reduces the variance in sortingeffort.  Statistical tests of the values of severalthousand trees containing up to 10,000 points havegiven first, second, and third moments of the value distributionfunction in satisfactory agreement withthe moments computed from the generating function.  Theempirical tests, as well as the analytical results,are in agreement with previously published results for thefirst moment in the cases of uniform and nonuniformdistribution of branching ratio, and for the second momentin the case of uniform distribution of branchingratio.
2217	Slagle, J. R.;Farrell, C. D.;	Experiments in Automatic Learning for a Multipurpose Heuristic Program	An automatic learning capability has been developedand implemented for use with the MULTIPLE(MULTIpurpose Program that LEarns) heuristic tree-searchingprogram, which is presently being appliedto resolution theorem-proving in predicate calculus.MULTIPLE's proving program (PP) uses two evaluationfunctions to guide its search for a proof of whetheror not a particular goal is achievable.  Thirteengeneral features of predicate calculus clauses were createdfor use in the automatic learning of betterevaluation functions for PP.  A multiple regressionprogram was used to produce optimal coefficientsfor linear polynomial functions in terms of the features.Also, automatic data-handling routines werewritten for passing data between the learning programand the proving program, and for analyzing andsummarizing results.  Data was generally collected forlearning (regression analysis) from the experienceof PP.  A number of experiments were performed to testthe effectiveness and generality of the learningprogram. Results showed that the learning produced dramaticimprovements in the solutions to problemswhich were in the same domain as those used for collectionlearning data.  Learning was also shown togeneralize successfully to domains other than those usedfor data collection.  Another experiment demonstratedthat the learning program could simultaneously improveperformance on problems in a specific domain andon problems in a variety of domains.  Some variationsof the learning program were also tested.
2218	Nielsen, N. R.;	An Analysis of Some Time-Sharing Techniques	The effectiveness of certain time-sharing techniquessuch as program, relocation, disk rotationaldelay minimization, and swap volume minimization isinvestigated.  Summary data is presented, and thefindings are discussed.  The vehicle for this investigationwas a SIMULA based simulation model reflectingan early framework for a planned Burroughs B6500 time-sharingsystem.  Inasmuch as the B6500 system isbased upon the use of variable sized segments and adynamic overlay procedure, data is also presentedwhich provides some indication of the effectiveness of thistype of organization in a time-sharing environment.The design characteristics and operational capabilitiesof the simulation model are also described.
2219	Bernstein, A. J.;Sharp, J. C.;	A Policy-Driven Scheduler for a Time-Sharing System	The service received by a process from a time-sharingoperating system can be characterizedby a resource count SUM{w[i]R[ij]} where R[ij] is thenumber of units of service received by processi from resource i and w[i] is the cost per unit of theservice.  Each class of users can be characterizedby a policy function which specifies the amount of servicea user who belongs to this class should receiveas a function of time.  Priority changes dynamicallyas a function of the difference between the servicepromised to the user by the policy function and the servicehe actually receives.  A scheduling and swappingalgorithm which keeps the resource count of each processabove its policy function will provide the specifiedlevel of service.  Overhead can be reduced by avoidingswaps of process which have received at leasthis level of service.  The algorithm has been implementedin a general purpose operating system, andit has provided significantly better service to interactiveand to batch jobs than the previous scheduler.
2220	Shwayder, K.;	Conversion of Limited-Entry Decision Tables to ComputerPrograms-A Proposed Modification to Pollack'sAlgorithm	Pollack has proposed an algorithm for convertingdecision tables into flowcharts which minimizesubsequent execution time when compiled into a computerprogram.  Two modifications of this algorithmare proposed.  The first relies on Shannon's noiselesscoding theorem and the communications conceptof entropy but does not completely test the ELSE Rule.The second modification completely tests theELSE Rule but results in more executions than the first modification.Both modifications result in modificationguarantees a globally optimal solution.
2221	Pollack, S. L.;	Comment on the Conversion of Decision Tables to Computer Programs	
2222	Redish, K. A.;	Comment on London's Certification of Algorithm 245	
2223	Kolm, A.;Dahlstrand, T.;	Minit Algorithm For Linear Programming (Algorithm 222 [H])	
2224	Lucas Jr., C. W.;Terrill, C. W.;	Complex Gamma Function [S14] (Algorithm 404)	
2225	Coleman, M. W.;Taylor, M. S.;	Circular Integer Partitioning [A1] (Algorithm 403)	
2226	Proll, L. G.;	Further Evidence for the Analysis of Algorithmsfor the Zero-One Programming Problem	The purpose of this note is to report computationalexperience additional to that recentlysummarized by Gue et al, with two algorithms for thezero-one linear programming problem.  An error inGue's paper is corrected.  The utility of one ofthe algorithms as a suboptimizer is indicated.
2227	Hoare, C. A. R.;	Proof of a Program: FIND	A proof is given of the correctness of thealgorithm "Find."  First, a informal descriptionis given of the purpose of the program and the methodused.  A systematic technique is described forconstructing the program proof during the process of codingit, in such a way as to prevent the intrusionof logical errors.  The proof of termination is treatedas a separate exercise.  Finally, some conclusionsrelating to general programming methodology are drawn.
2228	Holt, R. C.;	Comments on Prevention of System Deadlocks	Habermann's method of deadlock prevention isdiscussed, where deadlock is defined as a systemstate from which resource allocations to certain processesare not possible.  It is shown that the schedulermay introduce "artificial" deadlocks which Habermann'smethod does not prevent.  Permanent blocking isthe situation where certain processes never receive theirresource requests.  It is shown that deadlockprevention does not necessarily eliminate permanent blocking.A method of preventing permanent blockingis given.
2229	Brucke, R. A.;	Construction of Rational and Negative Powers of a Formal Series	Some methods are described for the generationof fractional and negative powers of any formalseries, such as Poisson series or Chebyshev series.  Itis shown that, with the use of the three elementaryoperations of addition, subtraction, and multiplication,all rational (positive and negative) powersof a series can be constructed.  There are basically twoapproaches: the binomial theorem and the iterationmethods.  Both methods are described here, and the relationshipbetween them is pointed out.  Some well-knownclassical formulas are obtained as particular cases,and it is shown how the convergence properties ofthese formulas can be improved with very little additionalcomputations.  Finally, at the end of thearticle, some numerical experiments are describedwith Chebyshev series and with Fourier series.
2230	Bracchi, G.;Ferrari, D.;	A Language for Treating Geometric Patterns in a Two-dimensional space	In this paper CADEP, a problem-oriented languagefor positioning geometric patterns in a two-dimensionalspace, is presented.  Although the language has beenspecifically designed for the automatic generationof integrated circuit masks, it turns out to be wellsuited also for such other placement problems asarchitecture design, urban planning, logical and blockdiagram representation.  The design criteria,the structure, and the specific features of CADEP are illustrated.
2231	Chang, S.;	The Reconstruction of Binary Patterns from Their Projections	Given the horizontal and vertical projectionsof a finite binary pattern f, can we constructthe original pattern f?  In this paper we give a characterizationof patterns that are reconstructablefrom their projection.  Three algorithms are developedto reconstruct both unambiguous and ambiguouspatterns.  It is shown that an unambiguous pattern canbe perfectly reconstructed in time m X n and thata pattern similar to an ambiguous pattern can also be constructedin time m X n, where m, n are the dimensionsof the pattern frame.
2232	Klinger, A.;	Pattern Width at a Given Angle	That the pattern feature "width as a functionof angle" possesses several possible interpretationsis demonstrated in this paper, which is a review ofthe width concept in pattern recognition and thegeometrical concept itself.  The object of the workis to clarify how the word description can be madeprecise so that computer algorithms for feature extractionmay be obtained; the focus is on the theoreticalsubject matter.  The results consist of a set-theoreticdefinition of width-at-angle, a theorem relatingit to the pattern boundary radius vector, and descriptionsof alternate widths.  All widths are calculatedfor an illustrative example; graphical and tabular comparisonsare given.  Substantial variation in width-at-anglemagnitude is found.  The principal conclusion is thatthe set-theoretic width-at-angle is a useful patternfeature when it can be easily computed.  Further investigationof the information contained in only partof a width function is recommended for cases wherecomputation of width-at-angle is difficult.
2233	Hammer, C.;	Signature Simulation and Certain Cryptographic Codes	Three cyphers allegedly authored by ThomasJefferson Beale in 1822 have been the subject ofintensive study for over 100 years.  Generations ofcryptanalysts have expended untold man-years, thusfar without success, attempting tode code them; vast armiesof fortune hunters and treasure seekers havedevoted Herculean labors to digging up the rolling hillsof Virginia trying to locate the promised bonanza.The history of pertinent activities would fill volumes,yet serious students of cryptography have alwayshad nagging doubts about the cyphers' authenticity.It has been alleged that the "known solution" toCypher Number Two: 115, 73, 24, 818, 37, 52, 49,...("Ihave deposited in the County of Bedford aboutfour miles from Buford's in an excavation or vault...")with the aid of an unsanitized version of theDeclaration of Independence was merely a superb, imaginative,and grandiose hoax perpetrated ages agofor whatever reasons.  Modern computer technology couldobviously perform signature analyses the processof encoding itself so as to yield new clues and deeperinsights into their construction.  For the benefitof the uninitiated, the encoding method used in thesecond cypher employs a specified document whosewords are simply numbered consecutively, and first lettersof these words are sought out at random tomatch the letters of these words are sought out at randomto match the letters of the clear text or message.The sequence of numbers corresponding to these matchesis then written down as the final code.  Whileprimitive, the process has the advantage of relativesecurity until the source document becomes known;at that moment the cypher can be decoded even by secondgraders.  The work now completed with the helpof our UNIVAC 1108 includes numerous analytical studiesof the Beale cyphers and various types of simulations.For example, we have turned the entire process ofsimulated encoding by various schemes over to themachine and analyzed the signatures of these syntheticcodes; we have also encoded various messages byhand, using different texts and a variety of methods toobtain their signatures. These simulations provideconvincing evidence that the signatures are both processand data dependent; they indicate also verystrongly that Mr. Beale's cyphers are for real and thatit is merely a matter of time before someonefinds the correct source document and locates theright vault in the common-wealth of Virginia.
2234	Heiberger, R. M.;	Roots of Matrix Pencils (Algorithm R405)	
2235	Marshall, D. R. T.;	Decision Table Translation (Algorithm R394)	
2236	Frisch, M. J.;	Remarks on Characteristic Values and AssociatedSolutions of Mathieus Differential Equation,Exponential Integral, and Systems of HyperbolicP.D.E. (Algorithms R352, R385, R392)	
2237	Schuegraf, E.;	BANDSOLVE (Algorithm R195)	
2238	Schuegraf, E.;	Least Squares Surface Fit (Algorithm R176)	
2239	Hallet, P.;Mund, E.;	Squank (Algorithm C379)	
2240	Sullins, W. L.;	Pseudo-Random Numbers [G5] (Algorithm C266)	
2241	Boland, W. R.;	Product Type Three-point Gauss-Legendre-Simpson'sIntegration [D1] (Algorithm A439)	
2242	Boland, W. R.;	Product Type Two-Point Gauss-Legendre-Simpson'sIntegration [D1] (Algorithm A438)	
2243	Boland, W. R.;	Product Type Simpson's Integration [D1] (Algorithm A437)	
2244	Boland, W. R.;	Product Type Trapezoidal Integration (Algorithm A436)	
2245	Sherman, S.;Baskett III, F.;Browne, J. C.;	Trace-Driven Modeling and Analysis ofCPU Scheduling in Multiprogramming System	Microscopic level job stream data obtained ina production environment by an event-driven softwareprobe is used to drive a model of a multiprogrammingcomputer system.  The CPU scheduling algorithm ofthe model is systematically varied.  This technique,called trace-driven modeling, provides an accuratereplica of a production environment for the testing of variationsin the system.  At the same time alterationsin scheduling methods can be easily carried out in acontrolled way with cause and effects relationshipsbeing isolated.  The scheduling methods tested includedthe best possible and worst possible methods,the traditional methods of multiprogramming theory, round-robin,first-come-first-served, etc., and dynamicpredictors.  The relative and absolute performances ofthese scheduling methods are given.  It is concludedthat a successful CPU scheduling method must be preemptiveand must prevent a given job from holdingthe CPU for too long a period.
2246	Brown, P. J.;	Levels of Language for Portable Software	An increasing amount of software is beingimplemented in a portable form.  A popular way ofaccomplishing this is to encode the software in a speciallydesigned machine-independent language andthen to map this language, often using a macro processor,into the assembly language of each desiredobject machine.  The design of the machine-independentlanguage is the key factor in this operation.This paper discusses the relative merits of pitchingthis language at a high level or a low level, andpresents some comparative results.
2247	Parnas, D. L.;	On the Criteria To Be Used in Decomposing Systems into Modules	This paper discusses modularization as a mechanismfor improving the flexibility ad comprehensibilityof a system while allowing the shortening of its developmenttime.  The effectiveness of a "modularization"is dependent upon the criteria used in dividing thesystem into modules.  A system design problem ispresented and both a conventional and unconventionaldecomposition are described.  It is shown that theunconventional decompositions have distinct advantagesfor the goals outlined.  The criteria used inarriving at the decompositions are discussed.  Theunconventional decomposition, if implemented withthe conventional assumption that a module consists ofone or more subroutines, will be less efficientin most cases.  An alternative approach to implementationwhich does not have this effect is sketched.
2248	Moore, J.;Robinson, P.;	A New Method for the Solution of theCauchy Problem for Parabolic Equations	An integral equation representation is givenfor parabolic partial differential equations.When the equations are defined in unbounded domains, asin the initial value (Cauchy) problem, the solutionof the integral equation by the method of successiveapproximation has inherent advantages over othermethods.  Error bounds for the methods are of order h^(3/2)and h^(7/2) (his the increment size) dependingon the finite difference approximations involved.
2249	Barr, D. R.;Sezak, N. L.;	A Comparison of Multivariate Normal Generators	Three methods for generating outcomes on multivariatenormal random vectors with a specifiedvariance-covariance matrix are presented.  A comparisonis made to determine which method requires theleast computer execution time and memory space when utilizingthe IBM 360/67.  All methods use as a basisa standard Gaussian random number generator.  Resultsof the comparison indicate that the method basedon triangular factorization of the covariance matrixgenerally requires less memory space and computertime than the other two methods.
2250	Ahrens, J. H.;Dieter, U.;	Computer Methods for Sampling from the Exponentialand Normal Distributions (Corrigendum)	
2251	Luccio, F.;	Weighted Increment Linear Search for Scatter Tables	A new linear search for hash tables whose incrementstep is a function of the key being addressedis presented.  Comparisons with known methods are given,in terms of efficiency and computation complexity.In particular, the new method applies to tables ofsize n = 2^r.  It allows full table searching, andpractically eliminates primary clustering at a very low cost.
2252	Earley, J.;Caizergues, P.;	A Method for Incrementally CompilingLanguages with Nested Statement Structure	A method of incremental compilation is presentedwhich applies especially to programming languagesin which statements can be nested (such as Algol andPL/I).  The method permits editing of the sourcelanguage using a general purpose text editor, and incrementalprocessing of changes without frequentrecompilation of entire routines.  The essential pointsof the method are: (1) the syntax of the languageis restricted insof ar as which constructs may occuron lines; (2) an internal data structure (calledthe skeleton) is maintained to represent the statementstructure; (3) the recompilation is partiallybatched in the sense that recompilation of modified linesdoes not occur until the last of a set of editingcommands has been received; and (4) the parsing andcompilation are factored into two parts, that doneon individual lines and that done globally tohandle the relationships between the lines.
2253	Bayer, R.;Witzgall, C.;	Index Ranges for Matrix Calculi	The paper describes a scheme for symbolicmanipulation of index expressions which arise asa by-product of the symbolic manipulation of expressionsin the matrix calculi described by the authorsin a previous paper.  This scheme attempts program optimizationby transforming the original algorithmrather than the machine code.  The goal is to automaticallygenerate code for handling the tedious addresscalculations necessitated by complicated data structures.The paper is therefore preoccupied with "indexingby position."  The relationship of "indexing byname" and "indexing by position" is discussed.
2254	Phillips, J. R.;Adams, H. C.;	Dynamic Partitioning for Array Languages	The classical process of partitioning an arrayinto subarrays is extended to a more usefularray language operation.  Various modes of partitioningare defined for different types of arrays, sothat subarrays may vary over the original array ina nearly arbitrary manner.  These definitions aremotivated with several realistic examples to illustratethe value of partitioning for array languages.Of general interest is the data structure for partitioning.This consists of dynamic tree structureswhich are used to derive and maintain the array controlinformation.  These are described in sufficientdetail to be of value in the design of other array languages.The description presented in this paperis implemented in a new array language, OL/2, currentlyunder development at the University of Illinois.
2255	Smoliar, S. W.;	Comments on Moorer's Music and Computer Composition	
2256	Eisenberg, M. A.;McGuire, M. R.;	Further Comments on Dijkstra's Concurrent Programming Control Problem	
2257	Kennedy, S.;	A Note on Optimal Doubly-Chained Trees	
2258	Lum, V. Y.;Yuen, P. S. T.;	Additional Results on Key-to-Address TransformTechniques: A Fundamental Performance Study onLarge Existing Formatted Files	
2259	Fullerton, W.;	Modified Incomplete Gamma Function [S14] (Algorithm A435)	
2260	March, D. L.;	Exact Probabilities for R x C Contingency Tables [G2] (Algorithm A434)	
2261	Ramberg, J. S.;Schmeiser, B. W.;	An Approximate Method for Generating Symmetric Random Variables	A method for generating values of continuoussymmetric random variables that is relativelyfast, requires essentially no computer memory, and iseasy to use is developed.  The method, which usesa uniform zero-one random number source, is based onthe inverse function of the lambda distributionof Turkey.  Since it approximates many of the continuoustheoretical distributions and empirical distributionsfrequently used in simulations, the method shouldbe useful to simulation practitioners.
2262	Baecker, H. D.;	Garbage Collection for Virtual Memory Computer Systems	In list processing there is typically a growingdemand for space during program execution.This paper examines the practical implications of thisgrowth within a virtual memory computer system,proposes two new garbage collection techniques for virtualmemory systems, and compares them with traditionalmethods by discussion and by simulation.
2263	Verhelst, M.;	The Conversion of Limited-Entry Decision Tablesto Optimal and Near-Optimal Flowcharts: Two NewAlgorithms	Two new algorithms for deriving optimal andnear-optimal flowcharts from limited entry decisiontables are presented.  Both take into account rule frequenciesand the time needed to test conditions.One of the algorithms, called the optimum-finding algorithm,leads to a flowchart which truly minimizesexecution time for a decision table in which simple rulesare already contracted to complex rules.  Theother one, called the optimum-approaching algorithm, requiresmany fewer calculations but does not necessarilyproduce the optimum flowchart.  The algorithms are firstderived for treating decision tables not containingan ELSE-rule, but the optimum-approaching algorithmis shown to be equally valid for tables includingsuch a rule.  Both algorithms are compared with existingones and are applied to a somewhat large decisiontable derived from a real case.  From this comparison twoconclusions are drawn.  (1) The optimum-approachingalgorithm will usually lead to better results than comparableexisting ones and will not require more,but usually less, computation time.(2) In general, thegreater computation effort needed for applyingthe optimum-finding algorithm will not be justifiedby the small reduction in execution time obtained.
2264	Henderson, P.;	Derived Semantics for Some Programming Language Constructs	The constructs of a simple programming languageare introduced and described informally interms of values and side-effects.  A translator is definedwhich translates the language into flowchartsfor a simple machine.  The action of the machine in executinga flowchart is defined.  A proof is constructedthat the effect of translating and executing any programcan be expressed solely in terms of the valueand side-effect of the program.  During the course ofconstructing the proof, formal definitions of theconcepts of value and side-effect are derived in orderto make the proof rigorous.  Correctness of theimplementation involves checking that the definitions derivedin the step above are an acceptable formalizationof the informal description given in the first step.
2265	Ledgard, H. F.;	A Model for Type Checking	Most current programming languages treat computationover different classes of objects (e.g.numbers, strings, labels and functions).  For correctcompilation and execution, the following questionthen arises: is a program properly constructed so thatits operations and operands are compatible?  Theactivity of answering this question is usually calledtype checking.  This paper attempts to isolatethe notion of type checking and presents a partialsolution to the type checking problem based on thenotions of abstraction and application of functions.In particular, a program is mapped into an expressionwithin a decidable subset of the Lambda calculus, whichcharacterizes the type relations within the programand eliminates all other information.  The determinationof the type-wise correctness or incorrectnessof the program is resolved by reducing its correspondingLambda calculus expression to one of two normalforms, the constant "correct" for a type-wise correctprogram or the constant "error".  An applicationto type checking in Algol 60 is made, and the attendantproblems faced for any notion of type checkingare discussed.
2266	Patrick, M. L.;	A Highly Parallel Algorithm for ApproximatingAll Zeros of a Polynomial with Only Real Zeros	An algorithm is described based on Newton'smethod which simultaneously approximates all zerosof a polynomial with only real zeros.  The algorithm, whichis conceptually suitable for parallel computation,determines its own starting values so that convergenceto the zeros is guaranteed.  Multiple zeros andtheir multiplicity are readily determined.  At nopoint in the method is polynomial deflation used.
2267	Malcolm, M. A.;	Algorithms To Reveal Properties of Floating-Point Arithmetic	Two algorithms are presented in the form ofFortran subroutines.  Each subroutine computesthe radix and number of digits of the floating-pointnumbers and whether rounding or chopping is doneby the machine on which it is run.  The methods areshown to work on any "reasonable" floating-pointcomputer.
2268	Fox, P.;	A Comparative Study of Computer Programsfor Integrating Differential Equations	A study comparing the performance of several computerprograms for integrating systems of ordinarydifferential equations is reported.  The integration methods representedinclude multistep methods (predictor-correctors),single-step methods (Runge-Kutta) and extrapolation methods(both polynomial and rational).  The testingprocedure is described together with the evaluationcriteria applied.  A set of test problems on whichthe programs were tested is included in an appendix.For the particular problems and criteria used inthe investigation it was found that a program based onrational extrapolation showed the best performance.
2269	Robertson, J. D.;	Tableless Date Conversion (Algorithm R398)	
2270	Akima, H.;	Interpolation and Smooth Curve Fitting Basedon Local Procedures [E2] (Algorithm A433)	
2271	Ershov,A. P.;	Aesthetics and the Human Factor in Programming (Corrigendum)	
2272	Frazer, W. D.;Wong, C. K.;	Sorting by Natural Selection	A family of sorting algorithms is proposed,the members of which make fuller use of the memoryspace and thus yield longer sorted strings.  Extensivesimulation results are presented, and variousimplications and further applications are discussed.
2273	Dathe, G.;	Conversion of Decision Tables By Rule Mask Method Without Rule Mask	Two algorithms for generating computer programsfrom decision tables are described.  The algorithmsallow handling limited entry, extended entry, and mixedentry tables.  The algorithms are based on therule mask method but need not have the masks at executiontime.  They perform the logical operationsimmediately rather than at the end of the interpretingprocess.  Execution time can be considerably reducedby instantly marking rules which are not applicable (Algorithms1 and 2) or conditions which are alreadytested (Algorithm 2).  The new algorithms combine to acertain degree the advantages of mask methods withthose of tree methods.
2274	Simmons, R.;Slocum, J.;	Generating English Discourse from Semantic Networks	A system is described for generating Englishsentences from a form of semantic nets in whichthe nodes are word-sense meanings and the paths areprimarily deep case relations.  The grammar usedby the system is in the form of a network that imposesan ordering on a set of syntactic transformationsthat are expressed as LISP functions.  The generationalgorithm uses the information in the semanticnetwork to select appropriate generation paths throughthe grammar.  The system is designed for use asa computational tool that allows a linguist to developand study methods for generating surface stringsfrom an underlying semantic structure.  Initial findingwith regard to form determiners such as voice,form, tense, and mood, some rules for embedding sentences,and some attention to pronominal substitutionare reported.  The system is programmed in LISP1.5 and is available from the authors.
2275	Hanson, R. J.;	Integral Equations of Immunology	The inversion of a particular integral equationof the first (Fredholm) kind is the basic problemconsidered.  The strategy which yielded success consistedof three essential points: (1) fit the knownexperimental data by a curve with properties which derivefrom properties of the (as yet unknown) function;(2) stabilize the computation for the unknown functionby using singular value decomposition; (3) constrainthe unknown function approximation (since it representsa probability distribution) to be nonnegative.A number of test cases are presented. One set of actualexperimental data is analyzed with the procedurespresented.
2276	Ahrens, J. H.;Dieter, U.;	Computer Methods for Sampling fromthe Exponential and Normal Distributions	Various methods are known for transforming uniformlydistributed random numbers into exponentiallyand normally distributed quantities.  The most efficientones are compared, in terms of memory requirementsand speed, with some new algorithms.  A number of proceduresconvert Taylor series expansions directlyinto sampling steps, an approach which may be used forsampling from any continuous distribution.  Forthe exponential distribution a definite recommendationcan be made, whereas in the case of the normaldistribution there remains a choice between slower andshorter algorithms and faster but space consumingmethods.
2277	Morris, J. B.;	Demand Paging Through Utilization of Working Sets on the MANIAC II	A hardware implementation on the Maniac II computerof the working set model for demand paging,as introduced by Denning, is discussed.  Characteristicsof the Maniac II are given, along with a descriptionof the basic demand paging scheme and the associate memorywhich has been added to the Maniac II hardware.Finally, a description of the hardware design for implementationof the working set model is discussedand a specification of the actions taken under variousconditions which may arise during the operationof the full working set model, demand paging system is given.
2278	Tan, K. C.;	On Foster's Information Storage and Retrieval Using AVL Trees	
2279	Rubinstein, R.;Feldman, J.;	A Controller for a Braille Terminal	
2280	Parnas, D. L.;Habermann, A. N.;	Comment on Deadlock Prevention Method	
2281	Khalil, H. M.;	The Eigen problem of Block Tridiagonal Matrices	
2282	Gregory, J.;	A Comparison of Floating Point Summation Methods	
2283	Deutsch, E. S.;	Thinning Algorithms on Rectangular, Hexagonal, and Triangular Arrays	In this report three thinning algorithms aredeveloped: one each for use with rectangular,hexagonal, and triangular arrays.  The approach to thedevelopment of each algorithm is the same.  Pictorialresults produced by each of the algorithms are presentedand the relative performances of the algorithmsare compared.  It is found that the algorithm operatingwith the triangular array is the most sensitiveto image irregularities and noise, yet it will yielda thinned image with an overall reduced number ofpoints.  It is concluded that the algorithm operating inconjunction with the hexagonal array has featureswhich strike a balance between those of the other two arrays.
2284	Bartels, R. H.;Stewart, G. W.;	Solution of the Matrix Equation AX+XB=C [F4] (Algorithm A432)	
2285	Ravindran, A.;	Computer Routine for Quadratic and LinearProgramming Problems [H] (Algorithm A431)	A computer program based on Lemke's complementarypivot algorithm is presented.  This can beused to solve linear and quadratic programming problems.The program has been extensively tested ona wide range of problems and the results have been extremely satisfactory.
2286	Richman, P. L.;	Automatic Error Analysis for Determining Precision	The problem considered is that of evaluating arational expression to within any desired toleranceon a computer which performs variable-precision floating-pointarithmetic operations.    An automaticerror analysis technique is given for determining, directlyfrom the results of a trial low-precisioninterval arithmetic calculation, just how much precisionand data accuracy are required to achieve adesired final accuracy.  The technique given generalizeeasily to the evaluation of many nonrationalexpressions.
2287	Mor, M.;Lamdan, T.;	A New Approach to Automatic Scanning of Contour Maps	The problem of automatic digitizing of contourmaps is discussed.  The structure of a generalcontour map is analyzed, and its topological propertiesare utilized in developing a new scanning algorithm.The problem of detection and recognition of contourlines is solved by a two color labeling method.It is shown that for maps containing normal contour linesonly, it suffices to distinguish between so-called"even" and "odd" lines.  The "tangency problem" involvedin practical scanning is discussed, and a solutionbased on minimizing computer memory space andsimplifying control program is suggested.
2288	Ghosh, S. P.;	File Organization: The Consecutive Retrieval Property	The consecutive retrieval property is an importantrelation between a query set and recordset.  Its existence enables the design of an informationretrieval system with a minimal search timeand no redundant storage.  Some important theorems onthe consecutive retrieval property are proved inthis paper.  Conditions under which the consecutive retrievalproperty exists and remain invariant havebeen established.  An outline for designing an informationretrieval system based on the consecutiveretrieval property is also discussed.
2289	Levitt, K. N.;Kautz, W. H.;	Cellular Arrays for the Solution of Graph Problems	A cellular array is a two-dimensional, checkerboardtype interconnection of identical modules(or cells), where each cell contains a few bits ofmemory and a small amount of combinational logic,and communicates mainly with its immediate neighborsin the array.  The chief computational advantageoffered by cellular arrays is the improvement in speedachieved by virtue of the possibilities for parallelprocessing.  In this paper it is shown that cellulararrays are inherently well suited for the solutionof many graph problems.  For example, the adjacencymatrix of a graph is easily mapped onto an array;each matrix element is stored in one cell of the array,and typical row and column operations are readilyimplemented by simple cell logic.  A major challengein the effective use of cellular arrays for thesolution of graph problems is the determination of algorithmsthat exploit the possibilities for parallelism,especially for problems whose solutions appear to be inherentlyserial.  In particular, several parallelizedalgorithms are presented for the solution of certainspanning tree, distance, and path problems, withdirect applications to wire routing, PERT chart analysis,and the analysis of many types of networks.These algorithms exhibit a computation time that inmany cases grows at a rate not exceeding log2 n,where n is the number of nodes in the graph.  Straightforwardcellular implementations of the well-knownserial algorithms for these problems require about nsteps, and noncellular implementations require fromn^2 to n^3 steps.
2290	Purdom Jr., P. W.;Moore, E. F.;	Immediate Predominators in a Directed Graph [H] (Algorithm A430)	
2291	Squire, W.;	Localization of the Roots of a Polynomial [C2] (Algorithm A429)	
2292	Read, R. C.;	A Note on the Generation of Rosary Permutations	
2293	Jones, P. R.;	Comment on Average Binary Search Length	
2294	Morris Jr., J. H.;	A Bonus from van Wijngaarden's Device	
2295	van der Poel, W. L.;	Comment on the Composition of Semantics in Algol 68	
2296	Bernstein, H. J.;	Compiling Fixed-Point Multiplications	
2297	Oden, P. H.;Shedler, G. S.;	A Model of Memory Contention in a Paging Machine	This paper is concerned with certain aspects of contentionfor main memory resources in a multiprogrammedcomputer system operating under demand paging.  Inthe model presented, the number of page-frames ofmain memory allocated to a problem program varies intime.  These changes in memory configuration arerepresented explicitly in the model, CPU requirements andpage exception characteristics of program materialbeing described statistically.  Expressions for the distributionof the number of page-frames allocatedto an executing program, the long run expected fractionof a program's execution time in a given numberof page-frames, and the average execution interval of themultiprogrammed load are obtained.  It is pointedout heuristically and demonstrated numerically thatan increase is obtain able in the average executioninterval of the multiprogrammed load over that resultingfrom equal fixed partitioning of main memory.
2298	Rosin, R. F.;Frieder, G.;Eckhouse Jr., R. H.;	An Environment for Research in Microprogramming and Emulation	The development of the research project inmicroprogramming and emulation at State Universityof New York at Buffalo consisted of three phases: theevaluation of various possible machines to supportthis research; the decision to purchase one such machine,which appears to be superior to the othersconsidered; and the organization and definition of goalsfor each group in the project.  Each of thesephases is reported, with emphasis placed on theearly results achieved in this research.
2299	Benjamin, A. J.;	An Extensible Editor for a Small Machine with Disk Storage	A design philosophy for developing a sophisticatedutility program is illustrated by the actualdesign and implementation of a text editor.  A versatiledata structure is employed so that only a smallnumber of programmed subroutines are necessary for alltypes of data manipulation.  Such a data structureis described, and its merits are illustrated by the easewith which powerful extensions can be implementedin terms of a few basic editing function.
2300	Helbig, R. E.;Orr, P. K.;Roediger, R. R.;	Political Redistricting by Computer	The problems of political redistricting areconsidered and a computer method for redistrictingis presented.  Criteria for acceptable redistricting arediscussed, including population equality, compactness,contiguity, and preservation of natural and/or politicalboundaries.  Only nonpartisan criteria are considered.Using 1970 Bureau of Census population data, specificresults are given for the ten Congressional Districtsin the state of Missouri and for the seven St. LouisCounty Council seats.  Results from the use of thealgorithm indicate the feasibility of politicalredistricting with the aid of a computer.
2301	Crowe, D.;	Generating Parsers for Affix Grammars	Affix grammars are two-level grammars whichare similar to van Wijngaarden's two-level grammarsused in the definition of Algol 68.  Affix grammars are shownby Koster to be equal in power to van Wijngaardengrammars.  They are much more suited to parsing thanare the latter, however.  Koster, the inventor ofaffix based on recursive procedures.  This paper presentsa bottom-up scheme for parsing them, basedon an extension of Floyd Production Language (FPL).  Includedis an algorithm, similar to that of DeRemer's,for converting a large class of affix grammars into FPL.The paper concludes by discussing briefly theapplicabilities of the conversion algorithm and affixgrammars in general, and some possible extensionsto Koster's definition of affix grammars.
2302	Borodin, A.;Gotlieb, C. C.;	Computers and Employment	The relationship of computers and automationto employment is part of the more general relationof technological change to employment.  The most obviouseffect is that increase in productivity dueto technology can eliminate jobs.  Technology affectsthe individual worker, in the nature and amountof his work, and in his attitudes toward that work.  Technologicalchange affects the occupational structureof the entire labor force.  Because of the central importanceof these effects, the impact of technologyhas been the subject of extensive study by economists, sociologists,political scientists, and psychologists.Even within a single discipline, studies are often contradictory,and conclusions are colored by politicalovertones.  We wish to delineate some of the issues,and present arguments given to support differentviewpoints.
2303	Alt, F. L.;	Archaeology of Computers - Reminiscences, 1945-1947	The period preceding the founding of ACM wasdominated by the first large computer ENIAC.Its characteristics, described here, foreshadow later developments.
2304	Sprague, R. E.;	A Western View of Computer History	Many U.S. histories of the digital computerfield have tended to be impersonal, with heavyemphasis on eastern universities and commercial developments.This article records the events of theearly years in a personal way.  The people, organizations,technologies, and computers of the 1945-55period in the western part of the United Statesare described as they happened.
2305	Bauer, F. L.;Wossner, H.;	The "Plankalkul" of Konrad Zuse: A Forerunnerof Today's Programming Languages	Plankalkul was an attempt by Korrad Zuse inthe 1940's to devise a notational and conceptualsystem for writing what today is termed a program.  Althoughthis early approach to a programming languagedid not lead to practical use, the plan is describedhere because it contains features that are standardin today's programming languages.  The investigationis of historical interest; also, it may provideinsights that would lead to advancements in the stateof the art.  Using modern programming terminology,the Plankalkul is presented to the extent it has possibleto reconstruct it from the published literature.
2306	Knuth, D. E.;	Ancient Babylonian Algorithms	The early origins of mathematics are discussed,emphasizing those aspects which seem to beof greatest interest from the standpoint of computerscience.  A number of old Babylonian tablets, manyof which have never before been translated into English, are quoted.
2307	Salton, G.;	Dynamic Document Processing	The current role of computers in automaticdocument processing is briefly outlined, and somereasons are given why the early promise of library automationand of the mechanization of documentationprocesses has not been fulfilled.  A new dynamic documentenvironment is then outlined in which clusteredfiles are searched and information is retrieved followingan interactive user-controlled search process.Methods are described for an automatic query modificationbased on user needs, and for a continuousreorganization of the stored information as a function ofearlier file processing and of normal collectiongrowth.  The proposed procedures provide powerful toolsfor information retrieval and for the controlof dynamic library collections in which new itemsare continually added and old ones are retired.
2308	Sturman, G. M.;	Computers and Urban Society	This brief survey of the use of computers inurban society covers the broad range of activitiesfound in any city.  The future scope of applications islimited only by the imagination and inventivenessof future system designers, programmers, analysts, anddecision makers.  The computer can be, if properlyused, with respect for human dignity and civil liberty,a significant factor in improving the efficiencyof the urban process.  It is expected that the benefitsof such computer usage will outweigh the costsand that we may look forward to an expansion of such usage.
2309	Zinn, K. L.;	Computers in the Instructional Process:Directions for Research and Development	A survey is given of computer applicationsto the instructional process which suggests howthe computer professional can contribute to effective educational systems.
2310	Sedelow, S. Y.;	Language Analysis in the Humanities	The use of the computer in the language-orientedhumanities for exhaustive listing of detail(as in indices and concordances) is widespread and acceptedas desirable.  The implications of the computerfor a "science" of the humanities-a science entailinggathering data for the construction and testingof models-are neither widely recognized nor accepted.This paper argues that the computer's  major roleas to language analysis in the humanities will be theestablishing of such a science.Thus, for thoseareas of the humanities for which rigor and precisionare necessary (e.g. analyzing literature or teachinga student to write a composition) the computercan be a critically important facilitator.
2311	Benjamin, R. I.;	A Generational Perspective of Information System Development	System development is categorized from a generationalpoint of view that parallels the commonlydescribed computing system generations.  For each generation,the scope of development projects and thetechnological world view of the system developer are examined.
2312	Rice, J. R.;	On the Present and Future of Scientific Computation	A pessimistic forecast is given of what can beexpected to happen in the application of computersto the physical sciences.
2313	Bachman, C. W.;	The Evolution of Storage Structures	Data base management systems have grown rapidlyin their power and complexity over the 15-yearhistory of data processing on commercially availablecomputers.  The original concepts have split, andnew terms have been adopted to name and refer to theseconcepts.  The Data Structure Diagram graphictechnique is used to illustrate the splitting of theconcepts and the structural relations which existbetween these concepts at each point in the evolution.
2314	Bobrow, D. G.;	Requirements for Advanced Programming Systems for List Processing	List processing systems should be designed tofacilitate production of large programs to manipulatelarge complex symbolic data stores.  This paper presentsan overview of a number of system features whichthe author feels are important to improve the productivityof programmers working in such domains.  Asystem view it taken, rather than focusing just on languagefeatures, since algorithms must be not onlycoded in a language form, but debugged, modified, madeefficient, and run on data.  Because of this generalframework,the requirements specified are applicableto the design of advanced programming systems fora wide range of applications.  Three aspects of programmingsystems are highlighted: good interactivefacilities, programmable control structures, and sophisticateddata communication mechanisms.  Interactivefeatures are described to facilitate program composition,entry, testing, debugging, editing, optimization,and packaging.  Implementation of a generalized environmentstructure model specified would allow programmingof various control regimes including multiprocesses,coroutines and backtracking.  Alternative methodsof procedure invocation required include invocationby pattern and by monitoring condition.  The  needfor extended data forms, storage management, and extensibilityare stressed, as is the duality of dataretrieval and function evaluation.  Syntax directedinput and output of data would facilitate use ofcomplex data stores.
2315	Fosdick, L. D.;	The Production of Better Mathematical Software	Some observations are made on steps to betaken toward the creation of better mathematicalsoftware.  These steps suggest the need for a coordinatedeffort and the creation of a center to focusactivities in this area.
2316	Sammet, J. E.;	Programming Languages: History and Future	This paper discusses both the history and futureof programming languages (= higher level languages).Some of the difficulties in writing such a historyare indicated.  A key part of the paper is a treeshowing the chronological development of languages and theirinterrelationships.  Reasons for the proliferationof languages are given.  The major languages are listedwith the reasons for their importance.  A sectionon chronology indicates the happenings of the significantprevious time periods and the major topicsof 1972.  Key concepts other than specific languages are discussed.
2317	Rosen, S.;	Programming Systems and Languages 1965-1975	In spite of impressive gains by PL/I, Fortranand Cobol remain the languages in which mostof the world's production programs are written and willremain so into the foreseeable future.  Thereis a great deal of theoretical interest in Algol 68and in extensible languages, but so far at leastthey have had little practical impact.  Problem-orientedlanguages may very well become the most importantlanguage development area in the next five to ten years.In the operating system area all major computermanufacturers set out to produce very ambitious multiprogrammingsystems, and they all ran into similarproblems.  A number of university projects,though notdirectly comparable to those of the manufacturers,have contributed greatly to a better understandingof operating system principles.  Important trendsinclude the increased interest in the development ofsystem measurement and evaluation techniques,andincreased use of microprogramming for some programming system functions.
2318	Kimbleton, S. R.;	The Role of Computer System Models in Performance Evaluation	Models constitute a useful means of investigatingcomputer system performance.  This paperexamines the interrelationships between models and othermethods for evaluating the performance of computersystems and establishes circumstances underwhich the use of a model is appropriate.
2319	Lynch, W. C.;	Operating System Performance	An overview of the current and future positionswith respect to operating system performanceis given.  While a great deal of information and a largenumber of models for subsystems have been developed,gaps still exist in out knowledge.  Because of thesevere interactions between the various subsystemsof an operating system, an overall model of the totalsystem must be developed to be able to analyzeand design the performance aspects of an operating systemalthough such total system designs are exceptionaltoday, it is projected that they will become increasinglymore common and necessary in the near future.Such a design philosophy will clearly have a severe impacton the way we go about modularizing operatingand computer systems.
2320	Hansen, P. B.;	Structured Multiprogramming	This paper presents a proposal for structuredrepresentation of multiprogramming in a highlevel language.  The notation used explicitly associatesa data structure shared by concurrent processeswith operations defined on it.  This clarifies the meaningof programs and permits a large class of time-dependenterrors to be caught at compile time.  A combination ofcritical regions and event variables enables theprogrammer to control scheduling of resources amongcompeting processes to any degree desired.  Theseconcepts are sufficiently safe to use not only withinoperating systems but also within user programs.
2321	Fraser, A. G.;	On the Interface Between Computers and Data Communications Systems	Future systems that combine computers, digitalterminals, and communications equipment presentdesign optimization problems that require reconsiderationof the traditional functional responsibilitiesof the respective subsystems.  Several "standard" interfaces,by means of which computers and digitalterminals connect to the communications systems willbe required.  When specifying these interfaces,consideration must be given to problems of coordination,synchronization, error control, signaling, streammultiplexing, and switch control, in addition to minimizingthe technological interdependence of specificsubsystem designs.  A focus on some of the problems isobtained in a discussion of a detailed specificationfor a particular computer-communications system interface.
2322	Foster, C. C.;	A View of computer Architecture	An attempt is made to predict the developmentsof the next 25 years in the field of computerarchitecture.  Standardized, inexpensive microcomputerson a single chip are predicted.  These will beused extensively to provide logical functions for noncomputationaldevices and incidentally for the designof superscale computers.
2323	Moses, J.;	Toward a General Theory of Special Functions	A list of a number of natural developmentsfor the field of algebraic manipulation is given.Then the prospects for a general theory of functionsdefined by ordinary differential equations arediscussed.  The claim is made that recent developmentsin mathematics indicate that it should be possibleto algorithmically generate many properties of solutionsto differential equations.  Such a theory ispreferable to a less general effort to make algebraicmanipulation systems knowledgeable about the usualspecial functions (e.g. exponential, hypergeometric).
2324	Shanno, D. F.;Weil, R. L.;	Management Science: A View from Nonlinear Programming	A brief history of integer and continuousnonlinear programming is presented as well as thecurrent obstacles to practical use of these mathematicalprogramming techniques.  It is forecast thatthe useful contributions to nonlinear programming actuallymade in the next few years are more likelyto be consolidations than theoretical breakthroughs.  Thesecontributions are likely to be the documentationof standard test problems, construction of user orientedsoftware, and comparisons of currently knownalgorithms to demonstrate which techniques are best for specific problems.
2325	Traub, J. F.;	Numerical Mathematics and Computer Science	Numerical mathematics is viewed as the analysisof continuous algorithms.  Four of the componentsof numerical mathematics are discussed.  These are: foundations(finite precision number systems, computationalcomplexity), synthesis and analysis of algorithms,analysis of error, programs and program libraries.
2326	Manna, Z.;Vuillemin, J.;	Fix point Approach to the Theory of Computation	Following the fix point theory of Scott, thesemantics of computer programs are defined in termsof the least fix points of recursive programs.  Thisallows not only the justification of all existingverification techniques, but also their extension to thehandling, in a uniform manner of various propertiesof computer programs, including correctness, termination, and equivalence.
2327	Arbib, M. A.;	Toward an Automata Theory of Brains	A source of ideas for automata theory-the studyof the brain-has been pushed aside in mathematicaldevelopment of the theory.  This paper suggests the waysin which automata theory might evolve over thenext 25 years if it is to contribute to an understandingof how the brain processes information.
2328	Koffman, E. B.;	Individualizing Instruction in a Generative CAI Tutor	
2329	Kandel, A.;	Computer Science-A Vicious Circle	
2330	Einarsson, B.;	Calculation of Fourier Integrals (Algorithm R418)	
2331	Johnson, S. C.;Kernighan, B. W.;	An Integer Programming Problem (Algorithm R397)	
2332	Sale, A. H. J.;	Special Series Summation with Arbitrary Precision (Algorithm R393)	
2333	Schrack, G. F.;	Random Vectors Uniform is Solid Angle (Algorithm R381)	
2334	Proll, L. G.;	General Random Number Generator (Algorithm R370)	
2335	Niessner, H.;	Eigenvalues and Eigenvectors of a Real General matrix (Algorithm R343)	
2336	Kolbig, K. S.;	Complex Error Function (Algorithm C363)	
2337	Pohl, I.;	A Sorting Problem and Its Complexity	A technique for proving min-max norms of sortingalgorithms is given.  One new algorithm forfinding the minimum and maximum elements of a set withfewest comparisons is proved optimal with thistechnique.
2338	Iguchi, K.;	A Starting Method for Solving Nonlinear VolterraIntegral Equations of the Second Kind	A fourth-order starting method is given forVolterra integral equations of the second kindand numerical examples are presented.
2339	O'Reagan, R. T.;	Computer-Assigned Codes from Verbal Responses	It is often desirable to convert verbal responsesto multidigit codes. This conversion is generallyaccomplished by clerk-coders.  A study was conducted to testthe feasibility of translating verbal descriptionsto numerical codes in a computer program.  Primary emphasiswas placed on computerized construction ofa reference file of verbal descriptions for use by theprogram.  The results of the study clearly showthat such procedures are feasible.
2340	Martin, D. F.;	A Boolean Matrix Method for the Computationof Linear Precedence Functions	A modified version of Bell's Boolean matrixmethod for the computation of linear precedencefunctions associated with a conflict-free matrix ofprecedence relations is given.  This algorithm notonly detects when the precedence functions do not  exist,but also provides an indication of why theydo not exist, so that corrective action can be takenif possible.  Necessary and sufficient conditionsfor the existence of precedence functions are given.The use of Boolean matrices to prove the existenceof precedence functions associated with classes of conflict-freegrammars is illustrated through an example.
2341	Gimpel, J. F.;	Blocks-A New Data type for SNOBOL4	A new data type, called a block, has been implementedfor SNOBOL4.  A block is a three-dimensionalaggregate of characters in the form of a right parallelepiped,best thought of as a three-dimensionalextension to a string.  (The third dimension is used foroverstriking.)  Blocks may be printed, concatenatedin any of three dimensions, and merged on the basisof program-defined connection points.  Some blocksadapt in size and shape to their environment.  Blocksand their operations are mainly used for composingprintable output.  A variety of graphical problems (includingflowcharting, bargraphs, logic diagrams,mathematical-equation formation, and text justificationand preparation) have been programmed on a printerin what appears to be an easy and natural way.  In additionto these somewhat specialized applications,blocks appear to be a good general purpose device-independentoutput formation mechanism especially suitablefor nonnumerical work.  The concept of a block is largelylanguage independent.That is, blocks requirelittle in the way of specialized syntax and could readilybe absorbed into the external structure ofmost programming languages.
2342	Gilbert, P.;Chandler, W. J.;	Interference Between Communicating Parallel Processes	Various kinds of interference between communicatingparallel processes have been examined byDijkstra, Knuth, and others.  Solutions have been givenfor the mutual exclusion problem and associatedsubproblems, in the form of parallel programs, and informalproofs of correctness have been given forthese solutions.  In this paper a system of parallelprocesses is regarded as a machine which proceedsfrom one state S (i.e. a collection of pertinent datavalues and process configurations) to a next stateS' in accordance with a transition rule S --> S'.  Aset of such rules yields sequences of states, whichdictate the system's behavior.  The mutual exclusion problemand the associated subproblems are formulatedas questions of inclusion between sets of states, orof the existence of certain sequences.  A mechanicalproof procedure is shown, which will either verify (provethe correctness of ) or discredit (prove theincorrectness of) an attempted solution, with respectto any of the interference properties.  It is shownhow to calculate transition rules from the "partialrules" by which the individual processes operate.The formation of partial rules and the calculation oftransition rules are both applicable to hardwareprocesses as well as to software processes, andsymmetry between processes is not required.
2343	Spacek, T. R.;	A Proposal To Establish a Pseudo Virtual Memory via Writable Overlays	Many computer systems solve executable storagesize problems for large programs by using overlays.However, it appears that no one overlay scheme containsa well-balanced combination of the most usefulcapabilities which are found in various existing techniques.A proposal is presented which utilizesseveral of the best capabilities from existing schemesand is complemented by several additional features,e.g. writable overlays.  The writable overlay capabilityprovides a virtual memory effect, although theprogrammer may still be required to design the overlayconfiguration.  Since overlay structuring is acomplex task, several tools (including a graphic display)are included in the proposal in order to aidthe programmer in the design.  The content of overlaysis briefly discussed, and it is noted that manyof the details of the final overlay configuration may be decided after the fact.
2344	Blatny, J.;Clark, S. R.;Rourke, T. A.;	On the Optimization of Performance of Time-Sharing Systems by Simulation	A simulation model of a time-sharing systemwith a finite noncontiguous store and an infiniteauxiliary store is used to study the variation of systemparameters such as store size, number of jobsallowed to execute simultaneously, job-scheduling algorithm,etc.  The effects of these variations ona measure of system performance is used to ascertain whichof the parameters controllable by the job-schedulingalgorithm, including the scheduling itself, require optimization,and which of the parameters not normallycontrollable by the scheduling algorithm have a markedeffect on system performance.  System performanceis based upon the mean cost of delay to all jobs processed.It is shown that significant improvementsin the measure of system performance can be obtained byusing variable time-slice techniques and by selectingthe optimum round-robin cycle time.  It appears that thesefeatures would benefit from optimization whereasother parameters controllable by the scheduling algorithmaffect system performance in a predictablemanner and would not benefit from optimization.  Featuresnot normally under the control of the schedulingalgorithm can also have a marked effect on the measureof performance; in particular, supervisor overheads,the size of the store, and the speed of the CPU.  A comparisonis made between the results of the simulationmodel and two analytical equations for quantum-orientednonpreemptive time-sharing systems.  The comparisonis found to be very favorable.
2345	Ashenhurst, R. L.;	Curriculum Recommendations for GraduateProfessional Programs in Information Systems	The need for education related to informationsystems in organizations is discussed, and acurriculum is proposed for graduate professional programsin universities, at the Master's level.  Materialnecessary for such programs is identified, and coursesincorporating it are specified.  Detailed coursedescriptions are presented, program organization discussed,and implementation questions considered.
2346	Yohe, J. M.;	Hu-Tucker Minimum Redundancy AlphabeticCoding Method [Z] (Algorithm A428)	
2347	Linz, P.;	Fourier Cosine Integral [D1] (Algorithm A427)	
2348	Bron, C.;	Merge Sort Algorithm [M1] (Algorithm A426)	
2349	Hurst, R. L.;Knop, R. E.;	Generation of Random Correlated Normal Variables [G5] (Algorithm A425)	
2350	Gentleman, W.M.;	Clenshaw-Curtis Quadrature [D1] (Algorithm A424)	
2351	Harter, R.;	The Optimality of Winograd's Formula	
2352	Dunham, C. B.;	Minimax Nonlinear Approximation by Approximation on Subsets	
2353	Greenspan, D.;Schultz, D.;	Fast Finite-Difference Solution of Biharmonic Problems	Setting the Reynolds number equal to zero, ina method for solving the Navier-Strokes equationsnumerically, results in a fast numerical method forbiharmonic problems.  The equation is treated asa system of two second order equations and a simplesmoothing process is essential for convergence.An application is made to a crack-type problem.
2354	Gentleman, W. M.;	Implementing Clenshaw-Curtis Quadrature,II Computing the Cosine Transformation	In a companion paper to this, "I Methodologyand Experiences," the automatic Clenshaw-Curtisquadrature scheme was described and how each quadratureformula used in the scheme requires a cosinetransformation of the integrand values was shown.The high cost of these cosine transformations hasbeen a serious drawback in using Clenshaw-Curtis quadrature.Two other problems related to the cosinetransformation have also been trouble some.  First, theconventional computation of the cosine transformationby recurrence relation is numerically unstable, particularlyat the low frequencies which have the largesteffect upon the integral.  Second, in case the automaticscheme should require refinement of the sampling,storage is required to save the integrand values afterthe cosine transformation is computed.  This secondpart of the paper shows how the cosine transformation canbe computed by a modification of the fast Fouriertransform and all three problems overcome.  The modificationis also applicable in other circumstancesrequiring cosine or sine transformations, such as polynomialinterpolation through the Chebyshev points.
2355	Gentleman, W. M.;	Implementing Clenshaw-Curtis quadrature, I Methodology and Experience	Clenshaw-Curtis quadrature is a particularlyimportant automatic quadrature scheme for a varietyof reasons, especially the high accuracy obtained fromrelatively few integrand values.  However, ithas received little use because it requires the computationof a cosine transformation and the arithmeticcost of this has been prohibitive.  This paper is intwo parts; a companion paper, "II Computing theCosine Transformation," shows that this objection canbe overcome by computing the cosine transformationby a modification of the fast Fourier transform algorithm.This first part discusses the strategy andvarious error estimates, and summarizes experiencewith a particular implementation of the scheme.
2356	Parnas, D. L.;	A Technique for Software Module Specification with Examples	This paper presents an approach to writingspecifications for parts of software systems.  Themain goal is to provide specifications sufficientlyprecise and complete that other pieces of softwarecan be written to interact with the piece specified withoutadditional information.  The secondary goalis to include in the specification no more informationthan necessary to meet the first goal.  The techniqueis illustrated by means of a variety of examples from a tutorial system.
2357	Christman, R. D.;	MUX, a Simple Approach to On-Line Computing	An on-line system operating as part of a normalbatch system for the CDC 6600 computer is described.The system, which required one man-year for initialsoftware implementation, although basically simple,provides the necessary elements to input and modify files,submit them for batch execution, and provideresults at the user's terminal.  A multiplexer designedand developed as part of the project cost oneman-year for design and checkout, and $16,000 for partsand fabrication.  All aspects of the system aredescribed, including design criteria, implementation,cost, overhead, and user reactions.
2358	Bensoussan, A.;Clingen, C. T.;Daley, R. C.;	The Multics Virtual Memory: Concepts and Design	As experience with use of on-line operatingsystems has grown, the need to share informationamong system users has become increasingly apparent.Many contemporary systems permit some degree ofsharing.  Usually, sharing is accomplished by allowingseveral users to share data via input and outputof information stored in files kept in secondary storage.Through the use of segmentation, however,Multics provides direct hardware addressing by user andsystem programs of all information, independentof its physical storage location.  Information is storedin segments each of which is potentially sharableand carries its own independent attributes of size and accessprivilege.  Here, the design and implementationconsiderations of segmentation and sharing in Multicsare first discussed under the assumption that allinformation resides in large, segmented main memory.Since the size of main memory on contemporary systemsis rather limited, it is then shown how the Multicssoftware achieves the effect of a large segmentedmain memory through the use of the Honeywell645 segmentation and paging hardware.
2359	Mullin, J. K.;	An Improved Index Sequential Access Method Using Hashed Overflow	The Index Sequential Access Method (ISAM) isone of the most important file management systemsused with moveable head disk devices.  This study investigatesthe use of an unconventional method oftreating overflow records.  The method is to use hashingtechniques to allocate space for such records.If certain conditions are satisfied, this is superiorto the conventional ISAM method of chaining theoverflow records via linked list techniques.  These conditions are:long overflow chains with significantoverflow; lack of tight disk space constraints; recordkeys which are small compared to the total recordsize; and significant use of the file in the index as opposedto the sequential mode.  Using hashed overflow,the time to locate a record is dependent not on the totalvolume of overflow records as in conventionalISAM, but on the percentage use of space dedicated to overflow records.
2360	Hu, T. C.;	A Comment on the Double-Chained Tree	
2361	Walden, D. C.;	A Note on Cheney's Nonrecursive List-Compacting Algorithm	
2362	Moler, C. B.;	Linear Equation Solver [F4] (Algorithm A423)	
2363	Whitney, V. K. M.;	Minimal Spanning Tree [H] (Algorithm A422)	
2364	Kuki, H.;	Complex Gamma Function with Error Control [S14] (Algorithm A421)	
2365	Moler, C. B.;	Matrix Computations with Fortran and Paging	The efficiency of conventional Fortran programsfor matrix computations can often be improvedby reversing the order of nested loops.  Such modificationsproduce modest savings in many common situationsand very significant savings for large problems rununder an operating system which uses paging.
2366	Kuki, H.;	Complex Gamma Function with Error Control	An algorithm to compute the gamma function andlog gamma function of a complex variable is presented.The standard algorithm is modified in several respectsto insure the continuity of the function valueand to reduce accumulation of round-off errors.  Inaddition to computation of function values, thisalgorithm includes an object-time estimation of round-offerrors.  Experimental data with regard to theeffectiveness of this error control are presented.A Fortran program for the algorithm appears in thealgorithms section of this issue.
2367	Horowitz, E.;Morgan, H. L.;Shaw, A. C.;	Computers and Society: A Proposed Course for Computer Scientists	The purpose of this paper is to describe a courseconcerned with both the effects of computerson society and the responsibilities of computer scientiststo society.  The impact of computers is dividedinto five components: political, economic, cultural, social,and moral; the main part of the paper defineseach component and presents examples of the relevantissues.  In the remaining portions the possibleformats for such a course are discussed, a topic by topicoutline is given, and a selected set of referencesis listed.  It is hoped that the proposal will makeit easier to initiate courses on this subject.
2368	Chase, S. M.;	An Implemented Graph Algorithm for Winning Shannon Switching games	In this tutorial paper a computer programwhich wins Shannon Switching Games is described.Since these games are played on graphs, the programis a good example of the implementation of graphalgorithms.  The two players in a Shannon Switching Game,CONNECT and CUT, have nonsimilar goals.  EitherCONNECT, CUT, or the player moving first is guaranteedthe existence of a winning strategy.  The simplestrategy explained in this paper is valid in all threecases.  In fact, the major routines never needto know whether the computer is CONNECT or CUT.
2369	Matsushita, Y.;	Hidden Lines Elimination for a Rotating Object	A method is presented of determining whichparts of three-dimensional objects are visible andwhich are invisible when the objects are rotated aboutsome axis.  This paper describes a polygon comparisonscheme in which the relationships of two polygons canbe classified into tree types, and also discusseshow the relationship is changed for each pair of polygonsunder rotation about some axis.  A rotationtable is defined for each pair of polygons, which remainsfixed as long as rotation is about one axisand provides a means of rapidly determining the visibleand hidden line relationship between two polygons.Additional work must be done to extend this approachto simultaneous rotation about several axes.
2370	Herbst, N. M.;Will, P. M.;	An Experimental Laboratory for Pattern Recognition and Signal Processing	An interactive computer-controlled scanningand display system has been in operation at theIBM Thomas J. Watson Research Center for three years.The system includes two flying-spot scanners anda TV camera specially interfaced to a process controldigital computer, dot-mode and vector displays,analog input and output facilities, and a variety ofother experimental equipment.  The system designand programming support are described and typical applicationsin scanner control, optical characterrecognition,and image processing are presented.
2371	Walden, D. C.;	A System for Interprocess Communicationin a Resource Sharing Computer Network	A system of communication between processes in atime-sharing system is described and the communicationsystem is extended so that it may be used between processesdistributed throughout a computer network.The hypothetical application of the system to an existing network is discussed.
2372	Conway, R. W.;Maxwell, W. L.;Morgan, H. L.;	On the Implementation of Security Measures in Information Systems	The security of an information system may berepresented by a model matrix whose elements aredecision rules and whose row and column indices areusers and data items respectively.  A set of fourfunctions is used to access this matrix at translationand execution time.  Distinguishing between datadependent and data independent decision rules enablesone to perform much of the checking of securityonly once at translation time rather than repeatedlyat execution time.  The model is used to explainsecurity features of several existing systems, and servesas a framework for a proposal for general securitysystem implementation within today's languages and operating systems.
2373	Denning, P. J.;Schwartz, S. C.;	Properties of the Working-Set Model	A program's working set W(t,T) at time t isthe set of distinct pages among the T most recentlyreferenced pages.  Relations between the average working-set size,the missing-page rate, and the interreference-intervaldistribution may be derived both from time-average definitionsand from ensemble-average (statistical)definitions. An efficient algorithm for estimating thesequantities is given.  The relation to LRU (leastrecently used) paging is characterized.  The independent-referencemodel, in which page references arestatistically independent, is used to assess the effectsto interpage dependencies on working-set sizeobservations. Under general assumptions, working-setsize is shown to be normally distributed.
2374	Coffman Jr., E. G.;Ryan Jr., T. A.;	A Study of Storage Partitioning Using a Mathematical Model of Locality	Both fixed and dynamic storage partitioningprocedures are examined for use in multiprogrammingsystems.  The storage requirement of programs is modeledas a stationary Gaussian process.  Experimentsjustifying this model are described.  By means of thismodel dynamic storage partitioning is shown toprovide substantial increases in storage utilizationand operating efficiency over fixed partitioning.
2375	Teorey, T. J.;Pinkerton, T. B.;	A Comparative Analysis of Disk Scheduling Policies	Five well-known scheduling policies for movablehead disks are compared using the performancecriteria of expected seek time (system oriented)and expectedwaiting time (individual I/O request oriented).Both analytical and simulation results are obtained.The variance of waiting time is introduced asanother meaningful measure of performance, showing possiblediscrimination against individual requests.Then the choice of a utility function to measure totalperformance including system oriented and individualrequest oriented measures is described.  Such a functionallows one to differentiate among the schedulingpolicies over a wide range of input loading conditions.The selection and implementation of a maximumperformance two-policy algorithm are discussed.
2376	Habermann, A. N.;	Synchronization of Communicating Processes	Formalization of a well-defined synchronizationmechanism can be used to prove that concurrentlyrunning processes of a system communicate correctly.This is demonstrated for a system consisting ofmany sending processes which deposit messages in a bufferand many receiving processes which remove messagesfrom that buffer.  The formal description of the synchronizationmechanism makes it very easy to provethat the buffer will neither overflow nor underflow,that senders and receivers will never operate onthe same message frame in the buffer nor will they run into a deadlock.
2377	Schroeder, M. D.;Saltzer, J. H.;	A Hardware Architecture for Implementing Protection Rings	Protection of computations and informationis an important aspect of a computer utility.  Ina system which uses segmentation as a memory addressingscheme, protection can be achieved in part byassociating concentric rings of decreasing access privilegewith a computation.  This paper describeshardware processor mechanisms for implementing these ringsof protection.  The mechanisms for implementingthese rings of protection. The mechanisms allow cross-ringcalls and subsequent returns to occur withouttrapping to the supervisor.  Automatic hardware validationof references across ring boundaries is alsoperformed.  Thus, a call by a user procedure to a protectedsubsystem (including the supervisor) is identicalto a call to a companion user procedure.  The mechanismsof passing and referencing arguments are thesame in both cases as well.
2378	Gaines, R. S.;	An Operating System Based on the Concept of a Supervisory Computer	An operating system which is organized as asmall supervisor and a set of independent processesare described.  The supervisor handles I/O with externaldevices-the file and directory system-schedulesactive processes and manages memory, handle errors, andprovides a small set of primitive functions whichit will execute for a process.  A process is able tospecify a request for a complicated action on thepart of the supervisor (usually a wait on the occurrenceof a compound event in the system) by combiningthese primitives into a "supervisory computer program."The part of the supervisor which executes theseprograms may be viewed as a software implemented "supervisorycomputer."  The paper develops these conceptsin detail, outlines the remainder of the supervisor, anddiscusses some of the advantages of this approach.
2379	Liskov, B. H.;	The Design of the Venus Operating System	The Venus Operating System is an experimentalmultiprogramming system which supports five orsix concurrent users on a small computer.  The system wasproduced to test the effect of machine architectureon complexity of software.  The system is defined bya combination of microprograms and software.  Themicroprogram defines a machine with some unusual architecturalfeature; the software exploits these featuresto define the operating system as simply as possible.In this paper the development of the system isdescribed, with particular emphasis on the principles which guided the design.
2380	Bobrow, D. G.;Burchfiel, J. D.;Murphy, D. L.;Tomlinson, R. S.;Beranek, B.;	TENEX, a Paged Time Sharing System for the PDP-10	TENEX is a new time sharing system implementedon DEC PDP-10 augmented by special paging hardwaredeveloped at BBN.  This report specifies a set of goalswhich are important for any time sharing system.It describes how the TENEX design and implementationachieve these goals.  These include specificationsfor a powerful multiprocess large memory virtual machine,intimate terminal interaction, comprehensiveuniform file and I/O capabilities, and clean flexiblesystem structure.  Although the implementationdescribed here required some compromise to achieve asystem operational within six months of hardwarecheckout, TENEX has met its major goals and providedreliable service at several sites and through theARPA network.
2381	Flores, I.;Madpis, G.;	Average Binary Search Length for Dense Ordered Lists (Corrigendum)	
2382	Gordon, R.;Herman, G. T.;	Reconstruction of Pictures from Their Projections (Corrigendum)	
2383	Moorer, J. A.;	Music and Computer Composition	The problem discussed is that of simulating humancomposition of Western popular music by computerand some relevant theories of music and harmony are given.Problems with this kind of program and severalschemes that are known not to work are discussed.  Severalprevious computer compositions are discussed,including the ILLIAC Suite.  A program to generate shortmelody fragments was written to simulate someof the aspects of human composition.  Five samples ofits output are presented and discussed.  It wasdiscovered that although the fragments show many ofthe characteristics of popular melodies, they havea strangely alien sound.  It is theorized that thisis because the relevant probabilities which woulddiscriminate against unfamiliar sequences were not used.
2384	Williamson, H.;	Hidden-Line Plotting Program [J6] (Algorithm A420)	
2385	Jenkins, M. A.;Traub, J. F.;	Zeros of a Complex Polynomial [C2] (Algorithm A419)	
2386	Tucker, A. B.;	Dynamic Microprogramming: Processor Organizationand Programming (Corrigendum)	
2387	Oldehoeft, A. E.;Halstead, M. H.;	Maximum Computing Power and Cost Factors in the Centralization Problem	A simple analysis of some computer-economic factorsinvolved in comparing multimachine installationsversus large single machine installations is given, anda mathematical model is derived to assist policydecisions.
2388	Martin, W. A.;Ness, D. N.;	Optimizing Binary Trees Grown With a Sorting Algorithm	Items can be retrieved from binary trees grownwith a form of the Algorithm Quicksort in anaverage time proportional to log n, where n is the numberof items in the tree.  The binary trees grownby this algorithm sometimes have some branches longerthan others; therefore, it is possible to reducethe average retrieval time by restructuring the tree tomake the branches as uniform in length as possible.An algorithm to do this is presented.  The use of thisalgorithm is discussed, and it is compared withanother which restructures the tree after each new item is added.
2389	Eastman, C. M.;	Preliminary Report on a System for General Space Planning	A computer language and a set of programs withinthat language are described which allow theformulating and solving of a class of space planningproblems.  The language is an extension of Algoland includes means to represent spaces and objects, to manipulatethem, and to test the resulting arrangementsaccording to a variety of constraints.  The algorithmsused to solve problems expressed in this languagerely on heuristic programming.  Both the languageand the search algorithms are detailed.
2390	Pager, D.;	A Proposal for a Computer-Based Interactive Scientific Community	Because of the problems created by the explosionof papers in the mathematical sciences andthe drawbacks that this places on research, it is suggestedthat a tree of all mathematical results andterminology be maintained in a multiterminal computer system.Users of the system can store in the computeran updated file of their current knowledge, and on selectinga paper to read, they can obtain from thecomputer the minimum subtree of theorems required to bringthem from what they already know to the backgroundknowledge which the paper assumes.  Under certain conditions,means are also provided for the contributionof useful comments by the readers of a work and for interactionbetween commentators and with the author.This paper describes how the system can be organizedand the role required of readers, writers, andcommentators.
2391	Schrack, G. F.;	Unitary Symmetric Polynomials [Z] (Algorithm R391)	
2392	Macleod, I. D. G.;	In-Situ Transposition of a Rectangular Matrix [F1] (Algorithm C380)	
2393	Einarsson, B.;	Calculation of Fourier Integrals [D1] (Algorithm A418)	
2394	Salzer, H. E.;	Ordering +-f(+-f(+-f(...+-f(x)..))) When f(x) Is Positive Monotonic	
2395	Shrager, R. I.;	Quadratic Programming for Nonlinear Regression	A quadratic programming algorithm is describedfor use with the magnified diagonal method ofnonlinear regression with linear constraints.  Theregression method is published in JACM, July 1970.
2396	McCalla, G. I.;Sampson, J. R.;	MUSE: A Model To Understand Simple English	MUSE is a computer model for natural languageprocessing, based on a semantic memory networklike that of Quillian's TLC.  MUSE, from a Model to UnderstandSimple English, processes English sentencesof unrestricted content but somewhat restricted format.The model first applies syntactic analysis toeliminate some interpretations and then employs a simplifiedsemantic intersection procedure to finda valid interpretation of the input.  While the semanticprocessing is similar to TLC's, the syntacticcomponent includes the early use of parse trees and specialpurpose rules.  The "relational triple" notationused during interpretation of input is compatible with MUSE'smemory structures, allowing direct verificationof familiar concepts and the addition of new ones.MUSE also has a repertoire of actions, which rangefrom editing and reporting the contents of its ownmemory to an indirect form of question answering.Examples are presented to demonstrate how the model interpretstext, resolves ambiguities, adds informationto memory, generalizes from examples and performs various actions.
2397	Shell, D. L.;	Optimizing the Polyphase Sort (Corrigendum)	
2398	Dwyer, T. A.;	Teacher/Student Authored CAI Using the NEWBASIC System	The pedagogical advantages of a general purposeinteractive system called NEWBASIC/CATALYSTare discussed.  NEWBASIC/CATALYSTincorporates an advancedimplementation of BASIC, system-level interactivefeatures, and a general capability for extension throughuser oriented function attachment,  Applicationof this last feature to provide a flexible CAI scan capabilityis illustrated.  An example of interactionat the system level shows how students can mix the advantagesof independent or "solo" mode computingwith those of guided or "dual" mode interaction.  Preliminaryexperience with the system in an urbansecondary school setting is discussed.
2399	Irons, E. T.;Djorup, F. M.;	A CRT Editing System	A test-editing and manipulation program is described.The program operates from low-cost cathode-raytube entry and display stations with keyboard and 13function buttons. Applications, potential economyof operation, and some aspects of implementation are discussed.
2400	Duda, R. O.;Hart, P. E.;	Use of the Hough Transformation ToDetect Lines and Curves in Pictures	Hough has proposed an interesting and computationallyefficient procedure for detecting linesin pictures.  This paper points out that the use of angle-radiusrather than slope-intercept parameterssimplifies the computation further.  It also showshow the method can be used for more general curvefitting, and gives alternative interpretationsthat explain the source of its efficiency.
2401	Levialdi, S.;	On Shrinking Binary Picture Patterns	A parallel processing algorithm for shrinkingbinary patterns to obtain single isolated elements,one for each pattern, is presented.  This proceduremay be used for counting patterns on a matrix, anda hardware implementation of the algorithm using largescale integrated technology is envisioned.  Theprincipal features of this method are the very smallwindow employed (two-by-two elements), the parallelnature of the process, and the possibility of shrinkingany pattern, regardless of the complexity ofits configuration.  Problems regarding merging and disconnectionof patterns during the process as wellas the determination of the maximum number of stepsnecessary to obtain a single isolated element froma pattern, are reviewed and discussed.  An analogy with aneural network description, in terms of McCulloch-Pitts"neurons" is presented.
2402	Lesk, A. M.;	Pictorial Pattern Recognition and thePhase Problem of X-ray Crystallography	The availability of interactive, three-dimensional,computer graphics systems coupled to powerfuldigital computers encourages the development of algorithmsadapted to this environment.  Pictorial patternrecognition techniques make possible a number of approachesto X-ray structure determination based onmolecular model building, i.e. the use of chemical informationto frame "structural hypotheses" whichcan computationally be tested and refined by referenceto the experimental data.  Application of standardpattern recognition algorithms is hindered by the factthat the cross-correlation between a model andthe correct structure cannot be computed because ofa fundamental incompleteness in the measured data.However, it is possible to compute an upper bound to sucha cross-correlation.  A simple example demonstratesthat this information can be the basis of a techniquefor structure determination that can make effectiveuse of an interactive graphics system. Model buildingby cross-correlations has intrinsic advantagesover usual crystallographic techniques based on theautocorrelation or Patterson function, especiallyfor large structures.  This is significant, for crystallographyof biological macromolecules hasbeenand will continue to be a field of intense interest.
2403	Herriot, J. G.;	Procedures for Natural Spline Interpolation [E1] (Algorithm A472)	
2404	Gautschi, W.;	Exponential Integrals [S13] (Algorithm A471)	
2405	Kubicek, M.;	Linear Systems with Almost Tridiagonal Matrix [F4] (Algorithm A470)	
2406	Sibley, E. H.;Taylor, R. W.;	A Data Definition and Mapping Language	A data definition language i sa declarativecomputer language for specifying data structures.Most data definition languages concentrate on the declarationof logical data structures with littleconcern for how these structures are physically realizedon a computer system.  However, the need fordata definition languages which describe both the logicaland physical aspects of data is increasinglyapparent.  Such languages will be a key systems, as wellas in advanced data management systems and distributeddata bases.  This paper reviews past work in the datadefinition language for describing both logicaland physical aspects of data.  Applications of these"generalized" data definition languages are alsodiscussed.
2407	Couger, J. D.;	Curriculum Recommendations for UndergraduatePrograms in Information Systems	The need for education related to informationsystems in organizations is discussed, and acurriculum is proposed for an undergraduate program.Material necessary for such programs is identified,and courses incorporating it are specified.Detailed coursedescriptions are presented.  Program organizationand a problems of implementation are discussed.
2408	Ehrlich, L. W.;	Solving the Biharmonic Equation in a Square:A Direct Versus a Semidirect Method	Two methods for solving the biharmonic equationare compared.  One method is direct, usingeigenvalue-eigenvector decomposition.  The other methodis iterative, solving a Poisson equation directlyat each iteration.
2409	Stenger, F.;	An Algorithm for the Approximate Solutionof Wiener-Hopf Integral Equations	An explicit approximate solution is given foran equation.  Where it is assumed that the classicalWiener-Hopf technique may be applied.  It is furthermoreassumed that Fourier transforms are known explicitly.The approximate solution depends on two positive parameters.
2410	Salzer, H. E.;	A Recurrence Scheme for Converting fromOne Orthogonal Expansion into Another	A generalization of a scheme of Hamming forconverting a polynomial Pn(x) into a Chebyshevseries is combined with a recurrence scheme of Clenshawfor summing any finite series whose terms satisfya three-term recurrence formula.
2411	Wegner, E.;	Tree-Structured Programs	
2412	Feldman, J. A.;Low, J. R.;	Comment on Brent's Scatter Storage Algorithm	
2413	Denning, P. J.;Graham, G. S.;	A Note on Subexpression Ordering inthe Execution of Arithmetic Expressions	A counterexample to the supposed optimalityof an algorithm for generating schedules for treesof tasks with unequal execution times is presented.A comparison with the "critical path" heuristicis discussed.
2414	Lam, C.;McKay, J.;	Arithmetic Overa Finite Field [A1] (Algorithm A469)	
2415	Patterson, T. N. L.;	Algorithm for Automatic Numerical IntegrationOver a Finite Interval [D1] (Algorithm A468)	
2416	Brenner, N.;	Matrix Transposition in Place [F1] (Algorithm A467)	
2417	Ehrlich, G.;	Four Combinatorial Algorithms [G6] (Algorithm A466)	
2418	Hill, G. W.;	Student's t Frequency [S14] (Algorithm A465)	
2419	Reinsch, C. H.;	Eigenvalues of a Real, Symmetric, TridiagonalMatrix [F2] (Algorithm A464)	
2420	Slagle, J. R.;Norton, L. M.;	Experiments with an Automatic Theorem-ProverHavingPartial Ordering Inference Rules	Automatic theorem-provers need to be made muchmore efficient.  With this in mind, Slagle hasshown how the axioms for partial ordering can be replacedby built-in inference rules when using a particulartheorem-proving algorithm based upon hyper-resolution andparamodulation.  The new rules embody the transitivityof partial orderings and the close relationship betweenpredicates.  A program has been developed usinga modified version of these rules.  This new theorem-proverhas been found to be very powerful for solvingproblems involving partial orderings.  This paper presentsa detailed description of the program anda comprehensive account of the experiments that have been performed with it.
2421	Jordan, B. W. Jr.;Barrett, R. C.;	A Scan Conversion Algorithm with Reduced Storage Requirements	Most graphics systems using a raster scan outputdevice (CRT or hardcopy) maintain a displayfile in the XY or random scan format.  Scan converters,hardware or software, must be provided to translatethe picture description from the XY format to the rasterformat.  Published scan conversion algorithmswhich are fast will reserve a buffer area large enoughto accommodate the entire screen.  On the otherhand, those which use a small buffer area are slow becausethey require multiple passes through the XYdisplay file.  The scan conversion algorithm describedhere uses a linked list data structure to processthe lines of the drawing in strips corresponding togroups of scan lines.  A relatively small primarymemory buffer area is used to accumulate the binary imagefor a group of scan lines.  When this portionof the drawing has been plotted, the buffer is reused forthe next portion.  Because of the list processingprocedures used, only a single pass through the XY displayfile is required when generating the binaryimage and only a slight increase in execution time overthe fully buffered core results.  Results slowthat storage requirements can be reduced by more than80 percent while causing less than a 10 percentincrease in execution time.
2422	James, E. B.;Partridge, D. P.;	Adaptive Correction of Program Statements (Corrigendum)	
2423	Mickunas, M. D.;Schneider, V. B.;	A Parser-Generating System for Constructing Compressed Compilers	This paper describes a parser-generating system(PGS) currently in use on the CDC-6500 computerat Purdue University.  The PGS is a Fortran-coded compiler.In the input translation grammar, each BNFsyntactic rule corresponds to a (possibly empty) "codegenerator" realizable as an assembly language,Fortran or Algol, subroutine that is called wheneverthat syntactic rule is applied in the parse of aprogram.  Typical one-pass compilers constructed by thePGS translate source programs at speeds approaching14,000 cards per minute.  For an XPL compiler, the parserprogram and its tables currently occupy 288words of 60-bit core memory of which 140 words are parsingtable entries and 82 words are links to codegenerators.
2424	Fabry, R. S.;	Dynamic Verification of Operating System Decisions	Dynamic verification of a decision impliesthat every time the decision is made there is aconsistency check performed on the decision using independenthardware and software.  The dynamic verificationof operating system decisions is used on the PRIME systembeing designed and constructed at the Universityof California, Berkeley.  PRIME is an experimental time-sharingwhich is to have the properties of continuousavailability, data privacy, and cost effectiveness.The technique of dynamic verification allows theconstruction of an operating system which does not make certaindecisions improperly even in the presenceof a single hardware or software fault.  Furthermore,multiple faults lead to unreliable operation onlyif the faults happen to reinforce each other.  On PRIME,dynamic verification is used to ensure thatone user's information cannot become available to anotheruser gratuitously even in the presence of asingle hardware or software fault.the amount of additionalhardware and software required for dynamicverification can be modest.
2425	Bachman, C. W.;	The Programmer as Navigator	
2426	Lewart, C. R.;	Algorithms SCALE1, SCALE2, and SCALE3 for Determinationof Scales on Computer Generated Plots[J6] (Algorithm A463)	
2427	Donnelly,T. G.;	Bivariate Normal Distribution [S15] (Algorithm A462)	
2428	Burkowski, F. J.;Hoskins, W. D.;	Cubic Spline Solutions to a Class of FunctionalDifferential Equations [D2] (Algorithm A461)	
2429	Saylor, P. E.;Sebastian, J. D.;	Calculation of Optimum Parameters for AlternatingDirection Implicit Procedures [D3] (AlgorithmA460)	
2430	Syslo,M. M.;	The Elementary Circuits of a Graph [H] (Algorithm A459)	
2431	Robers, P. D.;Robers, S. S.;	Discrete Linear L1 Approximation by intervalLinear Programming [E2] (Algorithm A458)	
2432	Mifsud, C. J.;Bohlen, M. J.;	Addendum to a Multiple-Precision Division Algorithm	
2433	Millstein, R. E.;	Control Structures in Illiac IV Fortran	As part of an effort to design and implementa Fortran compiler on the ILLIAC IV, an extendedFortran, called IVTRAN, has been developed.  This languageprovides a means of expressing data and controlstructures suitable for exploiting ILLIAC IV parallelism.This paper reviews the hardware characteristicsof the ILLIAC and singles out unconventional featureswhich could be expected to influence language (andcompiler) design.  The implications of these features fordata layout and algorithm structure are discussed,and the conclusion is drawn that data allocation rather thancode structuring is the crucial ILLIAC optimizationproblem.  A satisfactory method of data allocation isthen presented.  Language structures to utilizethis storage method and express parallel algorithms are described.
2434	Prieve, B. G.;	Using Page Residency To Select the Working Set Parameter	Denning's method for selecting the working setparameter, which uses interreference intervals,is examined.  Several omissions in his model are noted,and new assumptions are introduced to overcomethese omissions.  Using this modified model, Dening's resultson page residency are rederived and reconsideredfor selecting the working set parameter.
2435	Hirschberg, D. S.;	A Class of Dynamic Memory Allocation Algorithms	Anew dynamic memory allocation algorithm, theFibonacci system, is introduced.  This algorithmis similar to, but seems to have certain advantages over,the "buddy" system.  A generalization is mentionedwhich includes both of these systems as special cases.
2436	Lampson, B. W.;	A Note on the Confinement Problem	This note explores the problem of confininga program during its execution so that it cannottransmit information to any other program except itscaller.  A set of examples attempts to stake outthe boundaries of the problem.  Necessary conditionsfor a solution are stated and informally justified.
2437	Lum, V. Y.;	General Performance Analysis of Key-to-AddressTransformation Methods Using an Abstract FileConcept	This paper presents a new approach to the analysisof performance of the various key-to-addresstransformation methods.  In this approach the keys ina file are assumed to have been selected from thekey space according to a certain probabilistic selectionalgorithm.  All files with the same number ofkeys selected from this key space will be suitably weightedin accordance with the algorithm, and theaverage performance of the transformation methods onthese files will be used as the potential of thesemethods.  Using this analysis, methods with the same overallperformance can be classified and key distributionspartial to certain transformations can be identified.All this can be done analytically.  The approachis applied to a group of transformation methodsusing files whose keys are selected randomly.
2438	Bobrow, D. G.;Wegbreit, B.;	A Model and Stack Implementation of Multiple Environments	Many control and access environment structuresrequire that storage for a procedure activationexist at times when control is not nested within theprocedure activated.  This is straightforward toimplement by dynamic storage allocation with linkedblocks for each activation, but rather expensivein both time and space.  This paper presents an implementationtechnique using a single stack to holdprocedure activation storage which allows retentionof that storage for durations not necessarily tiedto control flow.  The technique has the property that,in the simple case,it runs identically to theusual automatic stack allocation and deallocation procedure.Applications of this technique to multitasking,coroutines, backtracking, label-valued variables, andfunctional arguments are discussed.  In the initialmodel, a single real processor is assumed, and the implementationassumes multiple-processes coordinateby passing control explicitly to one another.  A multiprocessorimplementation requires only a few changesto the basic technique, as described.
2439	McGeachie, J. S.;	Multiple Terminals Under User ProgramControl in a Time-Sharing Environment	User-written programs on the Dartmouth Time-Sharingsystem can communicate with many remoteterminals simultaneously and can control the interactionsbetween these terminals.  Such programs canbe written using standard input and output instructionsin any language available on the system.  Thispaper describes how this multiple-terminal facilitywas implemented without requiring any changes inthe system executive or in any of the system's compilers or interpreters.
2440	Driessen, H. B.;Hunt, E. W. LeM.;	Localization of the Roots of a Polynomial (Algorithm R429)	
2441	Williamson, H.;	Hidden-Line Plotting Program (Algorithm R420)	
2442	Lawrence, E. E.;	A Sparse Matrix Package (Algorithm R408)	
2443	Roy, M. K.;	Generation of Permutations in Lexicographic Order (Algorithm R323)	
2444	Bron, C.;Kerbosch, J.;	Finding All Cliques of an Undirected Graph (Algorithm A457)	
2445	Fencl, Z.;	Routing Problem (Algorithm A456)	
2446	Hunter, D. B.;Williams, J. M.;	Analysis of Skew Representations of the Symmetric Group (Algorithm A455)	
2447	Barnhill, R. E.;Pilcher, D. T.;	Sard Kernels for Certain Bivariate Cubatures	An error analysis for some bivariate cubaturesis given.  The remainders are obtained by theuse of Sard kernels.  Numerical results and computergraphs are given for some of the kernel functions.
2448	Zelkowitz, M. V.;	Reversible Execution	
2449	Gates, G. W.;Poplawski, D. A.;	A Simple Technique for Structured Variable Lookup	A simple technique for the symbol-table lookupof structured variables based on simple automatatheory is presented. The technique offers a deterministicsolution to a problem which is currently handledin a nondeterministic manner in PL/I and COBOL compilers.
2450	Rodriguez-Rosell, J.;	Empirical Working Set Behavior	The working set model for program behaviorhas been proposed in recent years as a basis forthe design of scheduling and paging algorithms.  Althoughthe words "working set" are now commonly encounteredin the literature dealing with resource allocation, thereis a dearth of published data on program measurements,in the hope that workers in the field might find experimentalevidence upon which to substantiate andbase theoretical work.
2451	Casey, R. G.;	Design of Tree Structures for Efficient Querying	A standard information retrieval operation isto determine which records in a data collectionsatisfy a given query expressed in terms of data values.The process of locating the desired responsescan be represented by a tree search model.  This paperposes an optimization problem in the design ofsuch trees to serve a well-specified application. Theproblem is academic in the sense that ordinarilythe optimal tree cannot be implemented by means of practicaltechniques.  On the other hand, it is potentiallyuseful for the comparison it affords between observedperformance and that of an intuitively attractiveideal search procedure.  As a practical applicationof such a model this paper considers the design ofa novel tree search scheme based on a bit vector representationof data and shows that essentially thesame algorithm can be used to design either an idealsearch tree or a bit-vector tree.  An experimentalstudy of a small formatted file illustrates the concepts.
2452	Cardenas, A. F.;	Evaluation and Selection of File Organization-A Model and System	This work first discusses the factors thataffect file (data base) organization performance,an elusive subject, and then presents a methodology, amodel and a programmed system to estimate primarilytotal storage costs and average access time of severalfile organizations, given a specific data base,query characterization and device-related specifications.Based on these estimates, an appropriate filestructure may be selected for the specific situation.The system is a convenient tool to study filestructures and to facilitate as much as possible the processof data base structure design and evaluation.
2453	Ganapathy, S.;Rajaraman, V.;	Information Theory Applied to the Conversionof Decision Tables to Computer Programs	Using ideas from information theory, this paperdevelops a heuristic algorithm that convertsa limited entry decision table to a tree structured computerprogram with near minimum average processingtime.  The method is applicable to any limited entrydecision table and does not require that actionshave single rules or that the cost of testing conditionsbe equal.  It is thus more general than thepreviously published heuristic algorithms.  Comparedto the optimal algorithm of Reinwald and Soland,this algorithm is easy to code and takes a much smallertranslation time; it is thus felt that it ismore useful in practice.  The algorithm is well suited formanual conversion of decision tables to flowcharts.
2454	Buzen, J. P.;	Computational Algorithms for Closed QueueingNetworks with Exponential Servers	Methods are presented for computing the equilibriumdistribution of customers in closed queueingnetworks with exponential servers.  Expressions forvarious marginal distributions are also derived.The computational algorithms are based on two-dimensionaliterative techniques which are highly efficientand quite simple to implement.  Implementation considerationssuch as storage allocation strategies andorder of evaluation are examined in some detail.
2455	Foster, C. C.;	A Generalization of AVL Trees	A generalization of AVL trees is proposed inwhich imbalances up to (triangle shape) is a smallinteger.  An experiment is performed to compare thesetrees with standard AVL trees and with balancedtrees on the basis of mean retrieval time, of amountof restructuring expected, and on the worst caseof retrieval time.  It is shown that, by permittingimbalances of up to five units, the retrieval timeis increased a small amount while the amount of restructuringrequired is decreased by a factor of ten.A few theoretical results are derived, including the correctionof an earlier paper, and are duly comparedwith the experimental data.  Reasonably good correspondence is found.
2456	Peterson, W. W.;Kasami, T.;Tokura, N.;	On the Capabilities of While, Repeat, and Exit Statements	A well-formed program is defined as a programin which loops and if statements are properlynested and can be entered only at their beginning.  Acorresponding definition is given for a well-formedflowchart.  It is shown that a program is well formed ifand only if it can be written with if, repeat,and multi-level exit statements for sequence control.It is also shown that if,while, and repeat statementswith single-level exit do not suffice.  It is also shownthat any flowcharts can be converted to a well-formedflowchart by node splitting.  Practical implications are discussed.
2457	Manna, Z.;Nes, S.;Vuillemin, J.;	Inductive Methodsfor Proving Properties of Programs	There are two main purposes in this paper:first, clarification and extension of known resultsabout computation of recursive programs, with emphasison the difference between the theoretical andpractical approaches; second, presentation and examinationof various known methods for proving propertiesof recursive programs.  Discussed in detail are twopowerful inductive methods computational inductionand structural induction, including examples of their applications.
2458	Williams, E. J.;	Localization of the Roots of a Polynomial (Algorithm R429)	
2459	Byrne, J. G.;	Hu-Tucker Minimum Redundancy Alphabetic Coding Method (Algorithm R428)	
2460	Good, A. J.;	Clenshaw-Curtis Quadrature (Algorithm R424)	
2461	Watkins, R. P.;	Graph Plotter (Algorithm R412)	
2462	DeMorgan, R. M.;	An Efficient Prime Number Generator (Algorithm R357)	
2463	Andrejkova, G.;Vinar, J.;	Complex Gamma Function (Algorithm R404,C404)	
2464	Richardson, J. A.;Kuester, J. L.;	The Complex Method for Constrained Optimization [E4] (Algorithm A454)	
2465	Piessens, R.;	Gaussian Quadrature formulas for Bromwich'sIntegral [D1] (Algorithm A453)	
2466	Liu, C. N;Tang, D. T.;	Enumerating Combinations of m Out of n Objects [G6] (Algorithm A452)	
2467	Goldstein, R. B.;	Chi-Square quantiles [G1] (Algorithm A451)	
2468	Machura, M.;Mulawa, A.;	Rosenbrock Function Minimization [E4] (Algorithm A450)	
2469	Misunas, D.;	Petri Nets and Speed Independent design	Petri nets are investigated as one method ofmodeling speed independent asynchronous circuits.A study of circuit realizations of Petri nets leadsto a demonstration of their usefulness in modelingspeed independent operation.  This usefulness is emphasizedby the design of a speed independent processorfrom modules developed in the investigation of Petri net implementation.
2470	MacLennan, B. J.;	Fen-An Axiomatic Basis for Program Semantics	A formal system is presented which abstractsthe notions of data item, function, and relation.It is argued that the system is more suitable than settheory (or its derivatives) for the concise andaccurate description of program semantics.  It is shownhow the system can be used to build compositedata types out of simper ones with the operations of rowing,structuring, and uniting.  It is also demonstratedthat completely new primitive types can be introducedinto languages through the mechanism of singletondata types.  Both deterministic and nondeterministicfunctions are shown to be definable in the system.It is described how the local environment can be modeledas a data item and how imperative statementscan be considered functions on the environment.  Thenature of recursive functions is briefly discussed,and a technique is presented by which they can be introducedinto the system.  The technique is contrastedwith the use of the paradoxical combinator, Y.  Thequestions of local and global environments and ofvarious modes of function calling and parameter passingare touched upon. The theory is applied to theproof of several elementary theorems concerning the semanticsof the assignment, conditional, and iterativestatements.  An appendix is included which presents indetail the formal system governing webs and fen,the abstractions used informally in the body of the paper.
2471	Smith, M. H.;	A Learning Program Which Plays Partnership Dominoes	A learning program has been written is BASICto play four-player partnership dominoes.  Becausedominoes is a game of incomplete information, the programuses somewhat different principles of artificialintelligence from those used in programs for gamesof complete information, such as checkers, chess,and go.  The program was constructed to use a "strategysignature table" which classifies board situationsthrough the interactions of game parameters. Each entryin the table contains adaptively determinedweights indicating the advi sability of various strategies.Once chosen, a strategy then employs probabilityanalysis and linear polynomial evaluation to choosea move.  Our program wins approximately two-thirdsof its games in tournament situations, and has defeated championship players.
2472	Kernighan, B. W.;	Minimal spanning Tree (Algorithm R422)	
2473	Macleod, I. D. G.;Collins, A. M.;	Hidden-Line Plotting Program (Algorithm R420)	
2474	Nikolai, P. J.;	DIFSUB for Solution of Ordinary Differential Equations (Algorithm C407)	
2475	Fiala, F.;	Solution of Linear Programming Problemsin 0-1 Variables [H1] (Algorithm A449)	
2476	Hall, P. A. V.;	Equivalence Between AND/OR Graphs and Context-Free Grammars	
2477	Bochmann, G. V.;	Multiple Exits from a Loop Without the GOTO	
2478	Kandel, A.;	Computer Science-Seminars for Undergraduates	
2479	McFarlan, F. W.;Nolan, R. L.;	Curriculum Recommendations for Graduate ProfessionalPrograms in Information Systems: RecommendedAddendum on Information Systems Administration	An addendum to the Report of the ACM CurriculumCommittee on Computer Education for Managementis proposed. The proposed addendum is to include in the curriculuma course on Information Systems administration.It is important for two reasons: (1) the systems designermust understand the administrative frameworkin which he must operate to work effectively, and (2) animportant objective of the curriculum recommendationsis to prepare the future manager of the computer activity.It is felt that the importance of these tworeasons justifies the addition of the recommended course.The course is outlined in the format of theoriginal report.
2480	Rosin, R. F.;	Teaching "About Programming"	This paper presents the goals and organizationof a course about programming designed to provideentering students in a graduate program with a culturalenrichment in their professional lives.  Thestudents are expected to have taken at least two programmingcourses prior to this one and, therefore,to be familiar with at least two programming languages,both as students and users.  Teaching someonehow to program is similar to teaching him to play a musicalinstrument: neither skill can be taught-theymust be learned.  However, the teacher still servesseveral vital purposes: to present a set of rulesfor producing well-formed utterances; to offer numerousdemonstrations of his own skill; and to functionas an involved critic.  Finally, the teacher is thesource of information about the process in whichthe student is involved.
2481	Gelenbe, E.;	The Distribution of a Program in Primary and Fast Buffer Storage	A virtual memory computer system with a fastbuffer (cache) memory between primary memory andthe central processing unit is considered.  The optimaldistribution of a program between the bufferand primary memory is studied using the program's lifetimefunction.  Expressions for the distributionof a program which maximizes the useful fraction ofthe cost-time integral of primary and fast bufferstorage are obtained for swapping and nonswapping buffer management policies.
2482	Howard, J. H. Jr.;	Mixed Solutions for the Deadlock Problem	Mixtures of detection, avoidance, and preventionprovide more effective and practical solutionsto the deadlock problem than any one of these alone.  Theindividual techniques can be tailored for subproblemsof resource allocation and still operate together toprevent deadlocks.  This paper presents a method,based on the concept of the hierarchical operatingsystem, for constructing appropriate mixtures andsuggests appropriate subsystems for the most frequentlyoccurring resource allocation problems
2483	Kozdrowicki, E. W.;Cooper, D. W.;	COKO III: The Cooper-Koz Chess Program	COKO III is a chess player written entirelyin Fortran.  On the IBM 360-65, COKO III playsa minimal chess game at the rate of .2 sec cpu timeper move, with a level close to lower chess clubplay.  A selective tree searching procedure controlledby tactical chess logistics allows a deploymentof multiple minimal game calculations to achieve some optimalmove selection.  The tree searching algorithmsare the heart of COKO's effectiveness, yet they areconceptually simple.  In addition, an interestingphenomenon called a tree searching catastrophe has plaguedCOKO's entire development just as it troublesa human player.  Standard exponential growth is curbedto a large extent by the definition and trimmingof the Fischer set.  A clear distinction between treepruning and selective tree searching is also made.Representation of the chess environment is describedalong with a strategical preanalysis procedurethat maps the Lasker regions.  Specific chess algorithmsare described which could be used as a commandstructure by anyone desiring to do some chess programexperimentation.  A comparison is made of somemysterious actions of human players and COKO III.
2484	Huang, J. C.;	A Note on Information Organization and Storage	Since the logical structure of a data basecan be represented by a tree or graph, it is quitenatural for us to view the process of designing a database as that of constructing a tree or a graph.A general method for constructing such a tree or a graphis provided.  There are three important elementsin this general construction method; namely, a set ofbinary relations, an algorithm for constructingsubsets of a set, and an algorithm for selecting anelement from the given set of objects.  The use ofdifferent relations and algorithms results in differentinformation structures, as list, tree, ring,etc.  Thus the problem of information organization andstorage is reduced to that of defining relationsand formulating algorithms under a given set of constraints.The results presented may be valuable todesigners as useful design concepts, and may serve asa basis for developing a formal theory on the subject.
2485	Nolan, R. L.;	Managing the Computer Resource: A Stage Hypothesis	Based on the study of expenditures for data processing,a descriptive stage hypothesis is presented.It is suggested that the planning, organizing, and controllingactivities associated with managing thecomputer resource will change in character over a periodof time, and will evolve in patterns roughlycorrelated to four stages of the computer budget: StageI (computer acquisition), Stage II (intense systemdevelopment), Stage III (proliferation of controls), andStage IV (user/service orientation).  Each stageis described and related to individual tasks for managing the computer resource.
2486	Alt, F. L.;Yuni Kirk, J.;	Computer Photocomposition of Technical Text	In computer assisted typesetting by means ofphotocomposition, special problems arise in highlytechnical material such as mathematical formulas.  Newsolutions to several of these problems have beendevised in the information system of the American Instituteof Physics.  They include: the representationof special characters (foreign alphabets, mathematicalsymbols, etc.) not available on input keyboardsor on the photocomposer; the generation of such symbols,e.g. by overprinting; the precise positioningof accent marks (floating diacritics); line breaks,i.e. words or formulas placed partly at the end ofone line and partly at the beginning of the next;and certain aspects of error correction.
2487	Hoskins, W. D.;	Cubic Spline solutions to Fourth-order Boundary Value Problems	The cubic spline approximation to the fourth-orderdifferential equation y''''+p(x)y''+q(x)y'+r(x)y=t(x)is shown to reduce to the solution of a five-term recurrencerelationship.  For some special cases theapproximation is shown to be simply related to a finitedifference representation with a local truncationerror of order (y/720)delta^8.
2488	Ferguson, J.;Staley, P. A.;	Least Squares Piecewise Cubic Curve Fitting	The matrices involved in a linear least squaresformulation are determined for the problemof fitting piecewise cubic functions, those possessinga continuous derivative, to arrays of planar data.
2489	Beyer, T.;Swinehart, D. F.;	Number of Multiply-Restricted Partitions [A1] (Algorithm A448)	
2490	Hopcroft, J.;Tarjan, R.;	Efficient Algorithms for Graph Manipulation [H] (Algorithm A447)	Efficient algorithms are presented for partitioninga graph into connected components, biconnectedcomponents and simple paths.  The algorithm for partitioningof a graph into simple paths is iterativeand each iteration produces a new path between twovertices already on paths.  (The start vertex canbe specified dynamically.)  If V is the number of verticesand E is the number of edges, each algorithmrequires time and space proportional to max (V,E)when executed on a random access computer.
2491	Bell, J. R.;	Threaded Code	The concept of "threaded code" is presented asan alternative to machine language code.  Hardwareand software realizations of it are given.  In softwareit is realized as interpretive code not needingan interpreter.  Extensions and optimizations are mentioned.
2492	Strunz, H.;	The Development of Decision Tables viaParsing of Complex Decision Situations	A new parsing technique is proposed which allowsparsing based only on syntactical characteristicsof the decision problem.  It requires a descriptionof the problem in decision grid chart format andallows the development of decision tables within definedlimits by avoiding, or at least minimizing,repetition of conditions and actions in the resulting tables.
2493	Shneiderman, B.;	Optimum Data Base Reorganization Points	In certain data base organization schemes thecost per access may increase due to structuralinefficiencies caused by updates.  By reorganizingthe data base the cost per access may be reduced.However, the high cost of a reorganization prohibitsfrequent reorganizations.  This paper examinesstrategies for selecting the optimum reorganization points.
2494	Ling, R. F.;	A Computer Generated Aid for Cluster Analysis	A computer generated graphic method, whichcan be used in conjunction with any hierarchicalscheme of cluster analysis, is described and illustrated.The graphic principle used is the representationof the elements of a data matrix of similarities or dissimilaritiesby computer printed symbols (of characteroverstrikes) of various shades of darkness, where adark symbol corresponds to a small dissimilarity.The plots, applied to a data matrix before clusteringand to the rearranged matrix after clustering,show at a glance whether clustering brought forth anydistinctive clusters.  A well-known set of dataconsisting of the correlations of 24 psychological testsis used to illustrate the comparison of groupingsby four methods of factor analysis and two methods of cluster analysis.
2495	Stockhausen, P. F.;	Adapting Optimal Code Generation for ArithmeticExpressions to the Instruction Sets Availableon Present-Day Computers	
2496	Stone, H. S.;Fuller, S.  H.;	On the Near-Optimality of the Shortest-Latency-Time-FirstDrum Scheduling Discipline	For computer systems in which it is practicalto determine the instantaneous drum position,a popular discipline for determining the sequence in whichthe records are to be accessed is the so-calledshortest-latency-time-first, SLTF, discipline.  Whena collection of varying-length records is to beaccessed from specified drum positions, it is known thatthe SLTF discipline does not necessarily minimizethe drum latency time.  However, we show that the totaltime to access the entire collection for anySLTF schedule is never as much as a drum revolutionlonger than a minimum latency schedule.
2497	Hill, J. C.;	Synchronizing Processors with Memory-Content-Generated Interrupts	Implementations of the "Lock-Unlock" methodof synchronizing processors in a multiprocessorsystem usually require uninterruptable, memory-pause type instructions.An interlock scheme called read-interlock,which does not require memory-pause instructions, hasbeen developed for a dual DEC PDP-10 system withreal-time requirements.  The read-interlock method doesrequire a special"read-interlock" instructionin the repertoire of the processors and a special "read-interlock"cycle in the repertoire of the memorymodules.  When a processor examines a "lock" (a memorylocation) with a read-interlock instruction, itwill be interrupted if the lock was already set; examininga lock immediately sets it if it was not alreadyset (this event sequence is a read-interlock cycle).Writing into a lock clears it.  Having the processorinterrupted upon encountering a set lock instead ofbranching is advantageous if the branch would haveresulted in an effective interrupt.
2498	Gelenbe, E.;	Minimizing Wasted Space in Partitioned Segmentation	A paged virtual memory system using a finitenumber of page sizes is considered.  Two algorithmsfor assigning pages to segments are discussed.  Bothof these algorithm are simple to implement.  Theproblem of choosing the page sizes to minimize the expectedvalue of total wasted space in internal fragmentationand in a page table, per segment, is then solved for aprobability density function of segment size whichmay be expressed as a convex combination of Erlang densities.
2499	Hamlet, R. G.;	Efficient Multiprogramming Resource Allocation and Accounting	Although sometimes thought of as only a componentof time-sharing operation, multiprogrammingcan involve broader questions of resource allocation,since fairness is not required to meet a responsecriterion.  In a multiprogrammed system, it may servemaximal resource use to be unfair, for exampleby holding an input/output channel idle for a programwhile it completes a small amount of processorusage, enabling further use of the channel.  Severalapplications of this principle are given, and itis suggested that a multiprogramming executive mightdynamically adjust its allocation algorithms togain efficiency.  Allocation of resources is closely connectedto accounting for those resources, raisingthe problems of repeatability, minimal uncharged overhead,and relative weighting of charges for dependentresources.  Since weightings may depend on allocationalgorithms, these are not arbitrary accountingparameters.  Often the only repeatable accounting isone which omits an extensive overhead will be paid,and should multiprogramming prove efficient, overchargeswill result.  Multiprogramming turns on allocationof the memory resource essential to control of otherresources.  The general suggestions for allocationand accounting are applied to this question, and somedetails provided for the case of a monitor whichcontrols a virtual-memory machine.
2500	Frailey, D. J.;	A Practical Approach to Managing Resources and Avoiding Deadlocks	Resource scheduling and allocation can be expensivewith regard to time and space in multiprogrammingor time-sharing environments involving large numbers oftasks and resources with conflicting requirements.Detection and/or prevention of deadlocks can requiremassive amounts of additional overhead if efficientusage of resources is to be maintained.  A resourcemanagement program is described which uses linkedlists along with other techniques to overcome a largeportion of this overhead.  The program, which iscurrently running as part of a large scale general purposeoperating system, keeps resources relativelyactive but does not detect or prevent all deadlocksin its implemented state.  Certain changes, whichwould permit more comprehensive levels of deadlockprevention/detection at additional cost, have notbeen incorporated in the running system dueto the infrequency of deadlock situations.
2501	Fajman, R.;Borgelt, J.;	WYLBUR: An Interactive Text Editing and Remote Job Entry System	WYLBUR is a comprehensive system for manipulatingall kinds of text, such as computer programs,letters, and manuscripts, using typewriter terminalsconnected to a computer.  It has facilities forremote job entry and retrieval as well as facilitiesfor text alignment and justification.  A powerfulmethod for addressing text by content is provided.  Thispaper describes the external appearance of WYLBURas well as its internal structure.  A short descriptionof the major features of ORVYL, a general purposetime-sharing system which operates in conjunction with WYLBUR, is also included.
2502	Estell, R. G.;	A Comment on the Practical Aspects of Computer Science Education	
2503	Wexelblat, R. L.;	Another Comment on Computer Music	
2504	McMorrow, C. H.;	Concerning Music and Computer Composition in Computational Linguistics	
2505	Roy, M. K.;	Reflection-Free Permutations, Rosary Permutations,and Adjacent Transposition Algorithms	
2506	Sale, R. H. J.;	A Sparse Matrix Package (Algorithm R408)	
2507	Howell, J.;	Exact Solution of Linear Equations UsingResidue Arithmetic (Algorithm R406)	
2508	Wheeler, R. E.;	Increasing the Efficiency of Quicksort (Algorithm R402)	
2509	Obradovic, D.;	Minit Algorithm for Linear Programming (Algorithm R333)	
2510	Holmgren, B.;Obradovic, D.;Kolm, A.;	Minit Algorithm for Linear Programming (Algorithm R333)	
2511	Bayer, G.;	Maxflow (Algorithm R324)	
2512	Vos, H.;	Coulomb Wave Functions (Algorithm R300)	
2513	Reingold, E. M.;	A Nonrecursive List Moving Algorithm	An efficient, nonrecursive algorithm is givenfor moving any LISP-type list.  In particular,the algorithm requires no storage other than the newnodes into which the list is to be moved, and noadditional bits per node for marking; the algorithmruns in time proportional to the number of nodesin the list.  The original list structure is destroyed as it is moved.
2514	Mercer, A.;Rosenfeld, A.;	An Array Grammar Programming System	A package of Fortran programs has been developedthat permits a user to interactively designand test array grammars.  The user can control the ruleselection procedure in a derivation or parse,using weighted programming matrices; he also has a choiceof instance selection schemes (raster,random,parallel).  Examples are given involving array languagesconsisting of simple geometrical patterns, aswell as a language of "neuron pictures."
2515	Corneil, D. G.;Gotlieb, C. C.;Lee, Y. M.;	Minimal Event-Node Network of Project Precedence Relations	A procedure for constructing a minimal event-nodenetwork to represent a set of precedencerelations without parallel activities is presented.  Aminimal event-node network is an event-node networkin which both the number of nodes and the number of arcsare the minima to preserve the given precedencerelations Counterexamples are given to show that thealgorithm presented by A. C. Fisher, J. S. Liebman,and G. L. Nemhauser (1968) produces event-node networkswhich are not minimal.  Since our procedure includesthe set-covering problem, the time required may growexponentially with the number of given activities.
2516	Salasin, J.;	Hierarchical Storage in Information Retrieval	A probabilistic analysis is employed to determinethe effect of hierarchical storage organizationson information retrieval operations.  The data storagehardware is assumed to consist on n-levels oflinearly connected memory hardware with increasing dataaccess times and increasing data storage capabilities.A system might, for example, consist of fast semiconductormemory, computer core memory, extended corestorage, disk memory, and data cells.  Equations are derivedto predict the effect of such a system ondata access times using sequential files, random access files,and structured files employing multiple-hierarchicallinked lists.
2517	King, P. J. H.;Johnson, R. G.;	Some Comments on the Use of Ambiguous DecisionTables and Their Conversion to Computer Programs	This paper comments upon recently publishedwork on decision table translation using methodssimilar to the rule-mask technique.  The applicabilityof these methods under various possible conventionson overall table meaning is discussed, and it is arguedthat there is a place both for the multi-ruleand the single-rule (or action set) convention in decision tale usage.
2518	Low, D. W.;	Programming by Questionnaire: An Effective Way To Use Decision Tables	Programming by questionnaire combines aspectsof decision table programming and general purposeprogramming by using decision tables to construct an applicationprogram through the selection of certainsource statements from a predefined file.  It is proposedthat programming by questionnairies a usefulcompromise between general and special purpose programmingfor a significant class of large scale problems.The elements of the approach are discussedan existing application is described.
2519	Pager, D.;	On the Problem of Communicating Complex Information	The nature of the difficulty involved in communicatingmathematical results between scientistsusing a computer based information retrieval systemis examined.  The problem is analyzed in terms ofpsychological and information-processing processes, andwhat turns out to be a vicious circle of effectsis described.  These include ways of augmenting writtennatural language by various notational and linguisticdevices, the exhibition of the structure inherent in theinformation we are communicating, and a sophisticatedinteractive system controlled by computer.
2520	Ragland, L. C.;Good, D. I.;	Greatest Common Divisor of n Integers and Multipliers (Algorithm C386)	
2521	Broucke, R.;	Ten Subroutines for the Manipulationof Chebyshev Series [C1] (Algorithm A446)	
2522	Rodriguez-Rosell, J.;Dupuy, J. P.;	The Design, Implementation, and Evaluation of a Working Set Dispatcher	The behavior of a computer system is largelydependent upon the algorithms employed to allocatethe system resources to the processes competing for them.Recent research in time-sharing paging systemshas developed the working set model for program behavior,and are source allocation strategy based onthis model has been proposed.  Two implementationsalong these principles have been reported, but itseems that in neither case have further results beenannounced.  This report discusses the design andimplementation of a dispatcher based on the working setprinciple, presents data to permit analysis ofits behavior, and indicates future directions of researchon methods of controlling a computer system.
2523	Strong III, J. P.;Rosenfeld, A.;	A Region Coloring Technique for Scene Analysis	A method of converting a picture into a "cartoon"or "map" whose regions correspond to differentlytextured regions is described.  Texture edges in thepicture are detected, and solid regions surroundedby these (usually broken) edges are "colored in" usinga propagation process.  The resulting map is cleanedby comparing the region colors with the textures ofthe corresponding regions in the picture, and alsoby merging some regions with others according to criteriabased on topology and size.  The method hasbeen applied to the construction of cloud cover mapsfrom cloud cover pictures obtained by satellites.
2524	Burkhard, W. A.;Keller, R. M.;	Some Approaches to Best-Match File Searching	The problem of searching the set of keys ina file to find a key which is closest to a givenquery key is discussed.  After "closest," in terms ofa metric on the the key space, is suitably defined,three file structures are presented together with theircorresponding search algorithms, which are intendedto reduce the number of comparisons required to achievethe desired result. These methods are derivedusing certain inequalities satisfied by metrics and bygraph-theoretic concepts.  Some empirical resultsare presented which compare the efficiency of the methods.
2525	Kuki, H.;Cody, W. J.;	A Statistical Study of the Accuracy of Floating Point Number Systems	This paper presents the statistical resultsof tests of the accuracy of certain arithmeticsystems in evaluating sums, products and inner products,and analytic error estimates for some of thecomputations.  The arithmetic systems studied are 6-digithexadecimal and 22-digit binary floating pointnumber representations combined with the usual chopand round modes of arithmetic with various numbersof guard digits, and with a modified round mode with guarddigits.  In a certain sense, arithmetic systemsdiffering only in their use of binary or hexadecimal numberrepresentations are shown to be approximatelystatistically equivalent inaccuracy.  Further, theusual round mode with guard digits is shown to bestatistically superior in accuracy to the usual chopmode in all cases save one.  The modified roundmode is found to be superior to the chop mode in all cases.
2526	Williams, J.G.;	Asymmetric Memory Hierarchies	A study is presented of some of the systemimplications of memory hierarchies in which thebacking or secondary store has a very small read time,relative of both the time required for writingand to the read time of conventional backing storagedevices. Several analytic models are introduced,and it is shown that such hierarchies may operate inways which differ from those of more conventionalhierarchies.  In particular, it is shown that it may notbe necessary to multiprogram in such a situation.In the past, backing storage devices have been roughlysymmetric with respect to their read and writetimes.  This situation may not continue, as severaldevices are currently under development which mayhave a very small read-time/write-time ratio.  This studyplaces particular emphasis on one such system-theRCA read/write holographic optical memory.
2527	Hassitt, A.;Lageschulte, J. W.;Lyon, L. E.;	Implementation of High Level Language Machine	Computing machines which directly executethe statements of a high level language have beenproposed in the past.  This report describes the actualimplementation of such a machine: it is a computerwhose "machine language" is APL.  The machine is fullyoperational and correctly executes almost allof the APL operations on scalars, vectors, and arrays.The machine automatically allocates memory, executesstatements, calls functions, converts numbers from onetype to another, checks subscripts, and automaticallydetects many types of programmer errors.
2528	Lau, J.;	Binary Pattern Reconstruction from Projections [Z] (Algorithm R445)	
2529	Chang, S.;	Binary Pattern Reconstruction from Projections [Z] (Algorithm A445)	
2530	Wagner, R. A.;	An Algorithm for Extracting Phrases ina Space-Optimal Fashion [Z] (Algorithm A444)	
2531	Payne, W. H.;	Graduate Education: The Ph.D. Glut	
2532	Bookstein, A.;	On Harrison's Substring Testing Technique	
2533	Salzer, H. E.;	Gray Code and the +- Sign Sequence when+-f (+-f(+-f(...+-f(x)...))) Is Ordered	
2534	Conway, R. W.;Wilcox, T. R.;	Design and Implementation of a Diagnostic Compiler for PL/I	PL/C is a compiler for a dialect for PL/I.  Thedesign objective was to provide a maximum degreeof diagnostic assistance in a batch processing environment.For the most part this assistance is implicitand is provided automatically by the compiler. The most remarkablecharacteristic of PL/C is its perseverance-itcompletes translation of every program submitted andcontinues execution until a user-established errorlimit is reached. This requires that the compiler repairerrors encountered during both translationand execution, and the design of PL/C is dominated bythis consideration.  PL/C also introduces severalexplicit user-controlled facilities for program testing.To accommodate these extensions to PL/I withoutabandoning compatibility with IBM compiler PL/C permits"pseudo comments"-constructions whose contentscan optionally be considered either source test or comment.In spite of the diagnostic effort PL/C isa fast and efficient processor.  It effectively demonstratesthat compilers can provide better diagnosticassistance than is customarily offered, even when a sophisticatedsource language is employed, and thatthis assistance need not be prohibitively costly.
2535	Pack, C. D.;	The Effects of Multiplexing on a Computer-Communications System	A study is made of the way in which asynchronoustime division multiplexing changes the stochasticnature of the arrival process from a user to the computerand, consequently, affects the performanceof a time-shared computer-communications system.  It isconcluded that while, for certain values of systemparameters, there is noticeable improvement in theperformance of the computer (model), in the sensethat time-shared scheduling delays are reduced, theseimprovements are offset by the transmission delaysimposed by multiplexing so that there may be little orno change in the computer-communications systemperformance.  Analytical and simulation results arebased on the model of the computer-communicationssystem being an M/D/1 queue (the multiplexor) in tandemwith a single exponential server (the computer).Analytical results include a general description of theoutput process of an M/D/1 queue and the conditionsunder which this output process is approximately Poisson.
2536	Feinroth, Y.;Franceschini, E.;Goldstein, M.;	Telecommunications Using a Front-End Minicomputer	The use of a front-end minicomputer to providevaried remote terminal access to a large scalecomputer is considered.  The problems of embeddingtelecommunications I/O within an operating systemare discussed, and it is shown how the decentralizationof intelligence acquired by front-end processingvastly simplifies the problem.  A specific implementation isdiscussed with emphasis on the main processor-minicomputerlink, the hardware-software implementation, the effectof the main processor operating system, and anassessment of the advantages over a hard wired line controller.
2537	Wagner, R. A.;	Common Phrases and Minimum-Space Text Storage	A method for saving storage space for textstrings, such as compiler diagnostic messages, isdescribed.  The method relies on hand selection of aset of text strings which are common to one or moremessages.  These phrases are then stored only once.The storage technique gives rise to a mathematicaloptimization problem: determine how each message shoulduse the available phrases to minimize its storagerequirement.  This problem is nontrivial when phraseswhich overlap exist.  However, a dynamic programmingalgorithm is presented which solves the problem in timewhich grows linearly with the number of charactersin the text.  Algorithm 444 applies to this paper.
2538	Austing, R. H.;Engel, G. L.;	A Computer Science Course Program for Small Colleges	The ACM Subcommittee on Small College Programsof the Committee on Curriculum in Computer Science(CCCS) was appointed in 1969 to consider the uniqueproblems of small colleges and universities, andto make recommendations regarding computer science programsat such schools.  This report, authorizedby both the subcommittee and (CCCS), supplies a set ofrecommendations for courses and necessary resources.Implementation problems are discussed, specificallywithin the constraints of limited faculty and forthe purposes of satisfying a wide variety of objectives.Detailed description of four courses are given;suggestions are made for more advanced work;and an extensive library list is included.
2539	Fritsch, F. N.;Shafer, R. E.;Crowley,W. P.;	Solution of the Transcendental Equation w*exp(w)=x [C5] (Algorithm A443)	
2540	Denning, P. J.;Schwartz, S. C.;	Properties of the Working Set Model (Corrigendum)	
2541	Balzer, R. M.;	An Overview of the ISPL Computer System Design	This paper explores the advantages of the concurrentdesign of the language, operating system,and machine (via microcode) to create an interactive programminglaboratory.  It describes the synergisticeffect that the freedom to move and alter features fromone of these domains to another has had on thedesign of this system (which has not been implemented).This freedom simplified both incremental compilationand the system's addressing structure, and centralized thecommunication mechanisms enabling the constructionof hierarchical subsystems.  It also suggested an importantnew concept for operating systems: separationof the scheduling from the maintenance functions in resourceallocation. This separation enables incorporationof new scheduling algorithms (decision of what to do) withoutendangering the system integration (correctlyperforming the scheduling decisions).
2542	Graham, R. M.;Clancy, G. J. Jr.;DeVaney, D. B.;	A Software Design and Evaluation System	A critical failure of current software systemdesign and implementation methodology is thatthe performance of a proposed design is not evaluatedbefore it is actually implemented.  In this paperthe reasons for this failure are explored, and a new methodologywhich overcomes many of the difficultiesis proposed.  A system which integrates performance evaluationwith design and implementation is described.This system is based on a simple, high level languagewhich is used to describe the evolving systemat all stages of its development.  The source languagedescription is used as direct input to performanceanalysis and simulation routines.  Using the performanceinformation obtained from these routines asfeedback, the problems which adversely affect performanceare detected early enough so that they canbe corrected without costly major reimplementation of the proposed system.
2543	Brent, R. P.;	Reducing the Retrieval Time of Scatter Storage Techniques	A new method for entering and retrieving informationin a hash table is described.  The methodis intended to be efficient if most entries are lookedup several times.  The expected number of probesto look up an entry, predicted theoretically and verifiedby Monte Carlo experiments, is considerablyless than for other comparable methods if the tableis nearly full.  An example of a possible Fortranimplementation is given.
2544	Rokne, J.;	Automatic Error bounds for Simple Zeros of Analytic Functions	The Cauchy-Ostrowski theorem on convergenceof Newton iterates for an analytic function inone variable is extended to include computational errorsusing complex interval arithmetic. Several numericalexamples are given for polynomials with real and complexroots and one example for the Bessel functionof the first kind.
2545	Gimpel, J. F.;	A Theory of Discrete Patterns and Their Implementation in SNOBOL4	The notion of a discrete pattern is formalizedand certain properties deduced.  A pattern isshown to be a generalization of a formal language.Algorithms for implementing the kinds of patternsin SNOBOL4 are given.  The general approach is to create,in-so-far as possible, a bottom-up parse froma top-down specification.
2546	Crespi-Reghizzi, S.;Melkanoff, M. A.;Lichten, L.;	The Use of Grammatical Inference for Designing Programming Languages	Both in designing a new programming languageand in extending an existing language, the designeris faced with the problem of deriving a "natural" grammarfor the language.  We are proposing an interactiveapproach to the grammar design problem wherein the designerpresents a sample of sentences and structuresas input to a grammatical inference algorithm.  The algorithmthen constructs a grammar which is a reasonablegeneralization of the examples submitted by the designer.The implementation is presently restrictedto a subclass of operator precedence grammars, buta second algorithm is outlined which applies to alarger class of context-free grammars.
2547	Merrill, R. D.;	Representation of Contours ad Regions for Efficient Computer Search	A novel computer-searchable representationfor the three basic pictorial features, contourmaps, region coverage, and line structures, is described.The representation, which has practical storagerequirements, provides a rapid mean of searching largefiles for data associated with geometric positionas well as with attribute value.  An application of thisrepresentation to handling terrain informationillustrates its utility.  The algebraic propertiesof the data structure make it computationally easyto determine whether a point lies within a closed boundary;compute the area contained by a closed boundary;generate the closed boundary representing the union orintersection of two closed boundaries; and determinethe neighboring boundaries to a point and theminimum distances between them and the point.
2548	Hill, G. W.;Davis, A. W.;	Normal Deviate [S14] (Algorithm A442)	
2549	Knop, R. E.;	Random Deviates from the Dipole Distribution [G5] (Algorithm A441)	
2550	Gallaher, L. J.;	A Multidimensional Monte Carlo Quadrature withAdaptive Stratified Sampling [D1] (Algorithm A440)	
2551	Atkins,M. S.;	Mutual Recursion in Algol 60 Using Restricted Compilers	
2552	Bays, C.;	A Note on When To Chain Overflow Items Within a Direct-Access Table	
2553	Blount, S. E.;	The Practical Aspect of Computer Science Education-Discussion	
2554	Crawford, C. R.;	Reduction of a Band-Symmetric Generalized Eigenvalue Problem	An algorithm is described for reducing thegeneralized eigenvalue problem Ax = lambda Bx toan ordinary problem, in case A and B are symmetric bandmatrices with B positive definite.  If n is theorder of the matrix and m the bandwidth, the matricesA and B are partitioned into m-by-m blocks; andthe algorithm is described in terms of these blocks.The algorithm reduces the generalized problem toan ordinary eigenvalue problem for a symmetric bandmatrix C whose bandwidth is the same as A and B.The algorithm is similar to those of Rutishauser andSchwartz for the reduction of symmetric matricesto band form.  The calculation C requires order mn^2operation.  The round-off error in the calculationof C is of the same order as the sum of the errors ateach of the n/m steps of the algorithm, the lattererrors being largely determined by the condition of B with respect to inversion.
2555	Richman, P. L.;	Variable-Precision Exponentiation	A previous paper presented an efficient algorithm,called the Recomputation Algorithm, forevaluating a rational expression to within any desired toleranceon a computer which performs variable-precisionarithmetic operations.  The Recomputation Algorithm can beapplied to expressions involving any variable-precisionoperations having O(10^(-p) + SUM{|Ei|}) error bounds,where p denotes the operation's precision andEi denotes the error in the operation's ith argument.This paper presents an efficient variable-precisionexponential operation with an error bound of the aboveorder.  Other operations such as log, sin, andcos, which have simple series expansions, can be handled similarly.
2556	James, E. B.;Partridge, D. P.;	Adaptive Correction of Program Statements	A method of analyzing statements in a programminglanguage which can tolerate a considerableinaccuracy in their specification is proposed. This methodinvolves principles at present mainly confinedto studies in the area of artificial intelligence suchas feature extraction, approximate tree matching,and strategy improvement by feedback from the matching process.A pilot program incorporating the principlesis described and preliminary operating results are presented.A final section surveys further principleswhich are currently being investigated.
2557	Muraoka, Y.;Kuck, D. J.;	On the Time Required for a Sequence of Matrix Products	This paper discusses the multiplication of conformablesequences of row vectors, column vectors,and square matrices.  The minimum time required to evaluatesuch products on ordinary serial computersas well as parallel computers is discussed.  Algorithmsare presented which properly parse such matrixsequences subject to the constraints of the machine organization.
2558	Morris, J. H. Jr.;	Protection in Programming Languages	Linguistic mechanisms which can be used to protectone subprogram from another's malfunctioningare described.  Function-producing functions and varioustype-tagging schemes are considered.  An attemptis made to distinguish between access limitation and authentication.
2559	Bays, C.;	The Reallocation of Hash-Coded Tables	When the space allocation for a hash-coded tableis altered, the table entries must be rescatteredover the new space.  A technique for accomplishingthis rescattering is presented.  The technique isindependent of both the length of the table and the hashingfunction used, and can be utilized in conjunctionwith a linear reallocation of the table being rescattered.Moreover, it can be used to eliminate previouslyflagged deletions from any hash-coded table, or to changefrom one hashing method to another.  The efficiencyof the technique is discussed and theoretical statistics are given.
2560	Shedler, G. S.;	A Queuing Model of a MultiprogrammedComputer with a Two-Level Storage System	The results are presented of an analysis ofa probabilistic model of a multiprogrammed computersystem with a two-level storage system in which thereis sequential dependency of accesses between thedevices.  Expressions are obtained for the long-run probabilitythat both the CPU and each of the storagedevices are busy.  Some numerical results are given whichquantify the gains in CPU utilization obtainableby multiprogramming in the presence of this type of storage system.
2561	Skinner, C. W.;	A Heuristic Approach to Inductive Inference in Fact Retrieval Systems	Heuristic procedures are presented which havebeen developed to perform inferences by generalizingfrom available information.  The procedures make useof a similarity structure which is imposed on thedata base using nonnumerical clustering algorithms.  Theyare implemented in a model fact retrieval systemwhich uses a formal query language and a property-list datastructure.  A program of experiments is describedwherein the procedures are used with test data baseswhich are altered by deleting part of the data andby purposely introducing false data.  It is found thatthe system can infer the correct response undera variety of conditions involving incomplete and inconsistent data.
2562	Tesch, G.;	Routing Problem (Algorithm R456)	
2563	Bron, C.;	Merge Sort Algorithm (R426)	
2564	Ellis, T. M. R.;	Hidden-Line Plotting Program (Algorithm R420)	
2565	Brent, R. P.;	A Gaussian Pseudo-Random Number Generator (Algorithm 488)	
2566	Pomeranz, J.;	Exact Cumulative Distribution of the Kolmogorov-SmirnovStatistic for Small Samples (AlgorithmA487)	
2567	Chu, S. C.;Berman, M.;	An Exponential Method for the Solution ofSystems of Ordinary Differential Equations	An explicit, coupled, single-step method forthe numerical solution of initial value problemsfor systems of ordinary differential equations is presented.The method was designed to be general purposein nature but to be especially efficient when dealingwith stiff systems of differential equations.It is, in general, second order except for the caseof a linear system with constant coefficients andlinear forcing terms; in that case, the method is thirdorder.  It has been implemented and put to routineusage in biological applications-where stiffness frequentlyappears-with favorable results.  When comparedto a standard fourth order Runge-Kutta implementation,computation time required by this method has rangedfrom comparable for certain nonstiff problems to betterthan two orders of magnitude faster for somehighly stiff systems.
2568	Salazar, A.;Oakford, R. V.;	A Graph Formulation of a School Scheduling Algorithm	The problem classically titled "The ExaminationSchedule Problem" takes various forms in theliterature.  Most of these formulations can be presentedin the terminology of classical Network Theory.One such formulation is:  Given a nondirected network,partition its nodes into a minimal number ofsubsets such that no two members of the same subsetare connected by anarc.  An obvious lower limitto this number is the size of the largest strongly connectedsubgraph.  Kirchgassner proved that an upperlimit is this size plus one.  One logical extension ofthe previous work is the introduction of variablelength examinations where W(I) is the number of periodsfor exam I.  The object of this paper is to generalizethe definition of largest strongly connected subgraphto include the weighting of nodes, to present anapproximate algorithm which usually finds the largeststrongly connected subgraph, and to discuss theapplication of this algorithm to the solution ofschool scheduling and exam scheduling problems.
2569	Wallace, N. D.;	Computer Generation of Gamma Random Variateswith Non-integral Shape Parameters	When the shape parameter, a, is integral,generating gamma random variables with a digitalcomputer is straightforward.  There is no simple methodfor generating gamma random variates with non-integralshape parameters.  A common procedure is to approximatelygenerate such random variables by use of theso-called probability switch method.  Another procedure,which is exact, is due to Johnk.  This paperpresents a rejection method for exactly generatinggamma random variables when a is greater than 1.The efficiency of the rejection method is shown tobe better than the efficiency of Johnk's method.The paper concludes that when a is non-integral the followingmix of procedures yields the best combinationof accuracy and efficiency: (1) when a is less than1, use Johnk's method; (2) when 1 is less than aand a is less than 5, use the rejection method; (3) whena is greater than 5, use the probability switchmethod.
2570	Adam, T. L.;Chandy, K. M.;Dickson, J. R.;	A Comparison of List Schedules for Parallel Processing Systems	The problem of scheduling two or more processorsto minimize the execution time of a programwhich consists of a set of partially ordered tasksis studied.  Cases where task execution times aredeterministic and others in which execution times arerandom variables are analyzed.  It is shown thatdifferent algorithms suggested in the literature vary significantlyin execution time and that the B-scheduleof Coffman and Graham is near-optimal.  A dynamic programmingsolution for the case in which executiontimes are random variables is presented.
2571	Strauss, J. C.;	An Analytic Model of the Hasp Execution Task Monitor	The HASP Execution Task Monitor periodicallyrearranges the OS/360 dispatching chain to givetasks preemptive execution priority in inverse order tothat of their cpu utilization history.  The effectis to keep the I/O bound tasks active and to preventcpu bound tasks from locking out other tasks.  Thispaper develops a simple model of the Execution TaskMonitor and employs it to study the effectivenessof the monitor in improving system performance.  Amodified strategy monitor control is investigatedfor the case of task execution in a memory hierarchy of varying speeds.
2572	Press, L. I.;	Arguments for a Moratorium on the Constructionof a Community Information Utility	In this article the author urges a prudentand decentralized approach to the question of thedesign and desirability of computerized community informationutilities.  Before accepting the inevitabilityand desirability of this or any technology, we should:(1) be sure of the feasibility (internally andexternally) of what is proposed; (2) project and perhapswait for changes in complementary techniques;(3) evaluate current and projected supplementary techniques;(4) establish the existence of demand forwhat is proposed; (5) take steps to involve a representativegroup of ultimate users in systems design,and (6) carefully think through possible side effectson man and his world view.  Current proposals forcommunity information utilities are examined in thisframework, and the conclusion is drawn that societyis not yet in a position to justify either the constructionof an information utility in a prototypecommunity or the acceptance of a policy infavor of its widespread implementation.
2573	Knuth, D. E.;	Computer Programming as an Art	
2574	Evans, R. V.;	Multiple Exists from a Loop Using Neither GO TO nor Labels	
2575	Van Rijsbergen, C. J.;	The Best-Match Problem in Document Retrieval	
2576	Hanson, D. R.;	A Simple Technique for Representing Strings in Fortran IV	
2577	Brown, J. A.;Werner, B.;	An On-Site Data Management System Application in Field Archaeology	
2578	Dijkstra, E. W.;	Self-stabilizing Systems in Spite of Distributed Control	
2579	Freiburghouse, R. A.;	Register Allocation Via Usage Counts	This paper introduces the notion of usage counts,shows how usage counts can be developed byalgorithms that eliminate redundant computations, anddescribes how usage counts can provide the basisfor register allocation.  The paper compares registerallocation based on usage counts to other commonlyused register allocation techniques, and presents evidencewhich shows that the usage count techniqueis significantly better than these other techniques.
2580	Rader, G. M.;	A Method for Composing Simple Traditional Music by Computer	A method is described for composing musicalrounds by computer.  This method uses some musictheory plus additional heuristics.  Fundamental to themethod is a set of productions together with setsof applicability rules and weight rules which operateon the productions deciding when and to what extentthey are available for use.  Several rounds generatedby the computer implementation of the method arepresented.  Generally, the resultant music sounds mediocreto the professional although usually pleasingto the layman.  It appears that full-blown music theoryis not needed for rounds--all the hardware requiredfor structural levels is not necessary for these pieces.The author has tried to address both musiciansand computer scientists.
2581	Miller, P. L.;	A Locally-Organized Parser for Spoken Input	This paper describes LPARS, a locally-organizedparsing system, designed for use in a continuousspeech recognizer.  LPARS processes a string of phonemeswhich contains ambiguity and error. The systemis locally-organized in the sense that it builds localparse structures from reliable word candidatesrecognized anywhere in an input utterance.  These localstructures are used as "islands of reliability"to guide the search for more highly garbledwords which might complete the utterance.
2582	Ferrari, D.;	Improving Locality by Critical Working Sets	A new approach to program locality improvementvia restructuring is described.  The methodis particularly suited to those systems where primary memoryis managed according to a working set strategy.It is based on the concept of critical working set, aworking set which does not contain the next memoryreference.  The data the method operates upon are extracted froma trace of the program to be restructured.It is shown that, except in some special cases, themethod is not optimum.  However, the experimentalresults obtained by using the method to restructure aninteractive text editor and the file system moduleof an operating system have shown its substantial superiorityover the other methods proposed in theliterature.
2583	Sterling, T. D.;	Guidelines for Humanizing Computerized InformationSystems: A Report from Stanley House	
2584	Gilchrist, B.;Weber, R. E.;	Enumerating Full-Time Programmers	Data from the 1970 Census and the Departmentof Labor's Area Wage Surveys are used to deriveestimates of the number of full-time programmers employedduring the years 1969 through 1973.  The 1973figure of 180,000 is considerably less than suggested inearlier reports.  It is recommended that educationaladministrators consider whether the many courses aimedat training programmers are justified on a vocationalbasis.
2585	Krogh, F. T.;	Efficient Implementation of a Variable ProjectionAlgorithm for Nonlinear Least Squares Problems(Errata)	
2586	Stockhausen, P. F.;	Adapting Optimal Code Generation for ArithmeticExpressions to the Instruction Sets Availableon Present-Day Computers (Errata)	
2587	Sreenivarsan, K.;Kleinman, A. J.;	On the Construction of a Representative Synthetic Workload (Errata)	
2588	Klemes, J.;Klemsa, J.;	Rosenbrock Function Minimization (Algorithm R450)	
2589	Proll, L. G.;	A Computer Routine for Quadratic and LinearProgramming Problems (Algorithm R431)	
2590	Kopelaar, H.;	Hypergeometric (Algorithm C191)	
2591	Veillon, F.;	Numerical Inversion of Laplace Transform (Algorithm A486)	
2592	Charnes, A.;Raike, W. M.;Stutz, J. D.;Walters, A. S.;	On Generation of Test Problems for Linear Programming Codes	Users of linear programming computer codes haverealized the necessity of evaluating the capacity,effectiveness, and accuracy of the solutions providedby such codes.  Large scale linear programmingcodes at most installations are assumed to be generating correctsolutions without ever having been "bench-marked"by test problems with known solutions.  The reason forthis failure to adequately test the codes is thatrarely are there large problems with known solutions readilyavailable.  This paper presents a theoreticaljustification and an illustrative implementation of a methodfor generating linear programming test problemswith known solutions.  The method permits the generationof test problems that are of arbitrary sizeand have a wide range of numerical characteristics.
2593	Canaday, R. H.;Harrison, R. D.;Ivie, E. L.;Ryder, J. L.;Wehr, L. A.;	A Back-end Computer for Data Base Management	It is proposed that the data base managementfunction be placed on a dedicated back-end computerwhich accepts commands (in a relatively high level languagesuch as the CODASYL Data Base Task Group,April 1971 Report) from a host computer, accesses thedata base on secondary storage, and returns results.The advantages of such a configuration are discussed.  Anexperimental implementation, called the experimentalData Management System, XDMS, is described and certainconclusions about the back-end approach are drawnfrom this implementation.
2594	Shneiderman, B.;Scheuermann, P.;	Structured Data Structures	Programming systems which permit arbitrarylinked list structures enable the user to createcomplicated structures without sufficient protection.Deletions can result in unreachable data elements,and there is no guarantee that additions will be performedproperly.  To remedy this situation, thispaper proposes a gauge which provides for the creationof a restricted class of data structures but ensuresthe correctness of the program.  This is accomplishedby an explicit structure declaration facility,a restriction on the permissible operations, and execution-time checks.
2595	Slutz, D. R.;Traiger, I. L.;	A Note on the Calculation Working Set Size	Finite-length reference string of arbitrarystructure are considered, and an exact expressionfor average working set size in terms of "corrected"interreference interval statistics is derived.An example is discussed; upper and lower bounds are obtained;and the average working set size functionis shown to be efficiently obtained for a set of pagesizes, in a single pass of the reference string.This work follows the developments of a paper by Denningand Schwartz, who consider infinite-lengthreference strings which satisfy certain statisticalproperties and who derive an expression relatingthe asymptotic average working set size to the asymptoticmissing page rate function under working setreplacement.
2596	Shen, K. K.;Peterson, J. L.;	A Weighted Buddy Method for Dynamic Storage Allocation	An extension of the buddy method, called the weightedbuddy method, for dynamic storage allocationis presented.  The weighted buddy method allows blocksizes of 2^k and 3(2^k), whereas the original buddymethod allowed only block sizes of 2^k. This extensionis achieved at an additional cost of only twobits per block.  Simulation results are presented whichcompare this method with the buddy method.  Theseresults indicate that for a uniform request distribution,the buddy system has less total memory fragmentationthan the weighted buddy algorithm.  However, the totalfragmentation is smaller for the weighted buddymethod when the requests are for exponentially distributed block sizes.
2597	Hoare, C. A. R.;	Monitors: An Operating System Structuring Concept	This paper develops Brinch-Hansen's concept ofa monitor as a method of structuring an operatingsystem.  It introduces a form of synchronization, describesa possible method of implementation in termsof semaphores and gives a suitable proof rule.  Illustrativeexamples include a single resource scheduler,a bounded buffer, an alarm clock, a buffer pool, adisk head optimizer, and a version of the problemof readers and writers.
2598	Shwayder, K.;	Extending the Information Theory Approach to ConvertingLimited-Entry Decision Tables to ComputerPrograms	This paper modifies an earlier algorithm forconverting decision tables into flowcharts whichminimize subsequent execution time when compiled intoa computer program.  The algorithms consideredin this paper perform limited search and, accordingly,do not necessarily result in globally optimalsolutions.  However, the greater search effort neededto obtain a globally optimal solution for complexdecision tables is usually not justified by sufficientsavings in execution time.  There is an analogybetween the problem of converting decision tables intoefficient flowcharts and the well-understood problemin information theory of noiseless coding.  The resultsof the noiseless coding literature are used toexplore the limitations of algorithms used to solvethe decision table problem.  The analogy betweenthe two problems is also used to develop improvementsto the information algorithm in extending the depthof search under certain conditions and in proposingadditional conditions to be added to the decisiontable.  Finally, the information algorithm is comparedwith an algorithm proposed in a recent paper byVerhelst.
2599	Young, J. W.;	First Order Approximation to the Optimum Checkpoint Interval	
2600	Eidson, H. D.;Schumaker, L. L.;	Computation of g-Splines via a FactorizationMethod [E2] (Algorithm A485)	
2601	Burrell, K. H.;	Evaluation of the Modified Bessel Functions K0(Z)and K1(Z) for Complex Arguments [S17] (AlgorithmA484)	
2602	Watkins, S. L.;	Masked Three-Dimensional Plot Programwith Rotations [J6] (Algorithm A483)	
2603	Schkolnick, M.;	The Equivalence of Reducing TransitionLanguages and Deterministic Languages	The class of reducing transition languagesintroduced by Eickel, Paul, Bauer, and Samelsonwas shown by Morris to be a proper superclass of thesimple precedence languages.  In this paper thisresult is extended, showing that, in fact, the first classis equivalent to the class of deterministiccontext free languages.
2604	Cheung, T.;	An Interactive Graphic Display for RegionPartitioning by Linear Programming	Using linear programming, an interactive graphicdisplay system has been implemented to solvethe region design problem of partitioning a region intoN nonoverlapping subregions in such a way thattheir areas are in specified proportions and that thetotal cost of servicing them is a minimum.  Ina conversational manner, a user can easily obtain differentpartitionings by specifying and modifyingthe boundary, the service centers' locations, the areaproportions, and the cost functions.  Examplesare included.
2605	Aberth, O.;	A Precise Numerical Analysis Program	A description is given of a program for computingthe solution to a small number of standardnumerical analysis problems to any specified accuracy,up to a limit of 2000 correct decimal places.Each computed number is bounded in an interval with amultiple precision midpoint.  Arithmetic operationsinvolving these numbers are executed according to intervalarithmetic concepts, with non-significantdigits automatically discarded.  Details are suppliedof problem specification and problem computation.
2606	Willers, I. M.;	A New Integration Algorithm for Ordinary DifferentialEquations Based on Continued Fraction Approximations	A new integration algorithm is found, and animplementation is compared with other programmedalgorithms.  The new algorithm is a step-by-step procedurefor solving the initial value problem in ordinarydifferential equations.  It is designed to approximatepoles of small integer order in the solutionsof the differential equations by continued fractions obtainedby manipulating the sums of truncated Taylorseries expansions.  The new method is compared withGragg-Bulirsh-Stoer, and the Taylor series method.The Taylor series method and the new method are shownto be superior in speed and accuracy, while thenew method is shown to be most superior when the solutionis required near a singularity.  The new methodcan finally be seen to pass automatically through singularitieswhere all the other methods which arediscussed will have failed.
2607	ACM Committee;	A Problem-List of Issues Concerning Computers and Public Policy	
2608	Acton, F. S.;	Recurrence Relations for the Fresnel Integral and Similar Integrals	
2609	Lagerlof, R. O. E.;	Interpolation with Rounded Ramp Functions	A new interpolation function is introduced.It has infinitely many continuous derivativesand is a composition of ramp functions with smoothed bendscalled Rounded Ramp Functions.  How the interpolationfunction can be extended to more than one variable isshown.  An efficient Fortran program is given bywhich the interpolation function can be obtained for a given point set.
2610	Stroud, A. H.;	Gauss Harmonic Interpolation Formulas	Let R be an open, bounded, simply connectedregion in the (x,y)-plane and let (x*,y*) be apoint in R.  Assuming R is starlike with respect to(x*,y*), we discuss a method for computing Gaussharmonic interpolation formulas for R and the point (x*,y*).Such formulas approximate a harmonic functionat (x*,y*) in terms of a linear combination of itsvalues at certain selected points on the boundaryof R.  Such formulas are useful for approximatingthe solution of the Dirichlet problem for R.
2611	Shere, K. D.;	The Complex Method for Constrained Optimization (Algorithm R454)	
2612	Bultheel, A.;	Rosenbrock Function Minimization (Algorithm R450)	
2613	McKay, J.;Regener, E.;	Transitivity Sets [G7] (Algorithm A482)	
2614	Crandall, K. C.;	Arrow to Precedence Network Transformation [H] (Algorithm A481)	
2615	Lyche, T.;Schumaker, L. L.;	Procedures for computing Smoothing and InterpolatingNatural Splines [E1] (Algorithm A480)	
2616	Cavouras, J. C.;	On the Conversion of Programs to Decision Tables: Method and Objectives	The problems of converting programs to decisiontables are investigated.  Objectives of theseconversions are mainly program debugging and optimizationin practice.  Extensions to the theory of computationand computability are suggested.
2617	Denning, P. J.;Graham, G. S.;	A Note on Subexpression Ordering inthe Evaluation of Arithmetic Expressions	
2618	Lamport, L.;	A New Solution of Dijkstra's Concurrent Programming Problem	A simple solution to the mutual exclusion problemis presented which allows the system to continueto operate despite the failure of any individual component.
2619	Neufeld, G. A.;Tartar, J.;	Graph Coloring Conditions for the Existenceof Solutions to the Timetable Problem	A necessary and sufficient condition is presentedfor the existence of a solution to the Gotliebclass-teacher timetable problem.  Several relationshipsare established between the class-teacher timetableproblem and graphs with preconditions.  These preconditionsplace additional restrictions on the colorationof a graph.  The preconditions correspond to the unavailabilityconstraints and preassigned meetingsin the class-teacher timetable problem.  Using some recentresults that convert graphs with preconditionsto graphs without them, it is shown that the existenceof a coloration of a graph is the required necessaryand sufficient condition.
2620	Friedman, T. D.;offman, L. J.;	Execution Time Requirements for Encipherment Programs	Although encipherment has often been discussedas a means to protect computer data, its costsare not well established.  Five experiments were conductedto measure the cpu time on a CDC 6400 requiredby additive ciphers programmed both in assembly languageand in Fortran: a "null transformation" to measurethe time to move data without encipherment; enciphermentwith one-word key; encipherment with a 125-wordkey; double key encipherment; and encipherment usinga pseudo random key.  The results were analyzedfor consistency over 100 runs, and the effects of constantand intermittent errors were considered.Timing rates for assembly language encipherment rangedfrom 498,800 characters per second for a pseudorandom key cipher to 2,092,000 characters per secondfor a constant one-word key cipher.  The latteris almost equivalent to the rate required simply to movedata without encipherment.  Fortran tests requiredover four times as much cpu time.  This paper introducesthe idea on enciphering time coefficient theratio of enciphering time to the time taken tofetch and store data without encipherment.
2621	Purdy, G. B.;	A High Security Log-in Procedure	The protection of time sharing systems fromunauthorized users is often achieved by the useof passwords.  By using one-way ciphers to code the passwords,the risks involved with storing the passwordsin the computer can be avoided.  We discuss the selectionof a suitable one-way cipher and suggest thatfor this purpose polynomials over a prime modulus aresuperior to one-way ciphers derived from Sannoncodes.
2622	Evans, A. Jr.;Kantrowitz, W.;Weiss, E.;	A User Authentication Scheme Not Requiring Secrecy in the Computer	In many computer operating systems a user authenticateshimself by entering a secret passwordknown solely to himself and the system.  The system comparesthis password with one recorded in a PasswordTable which is available to only the authenticationprogram.  The integrity of the system depends onkeeping the table secret.  In this paper a passwordscheme is presented which does not require secrecyin the computer.    All aspects of the system, includingall relevant code and data bases, may be knownby anyone attempting to intrude.  The scheme is basedon using a function H which the would-be intruderis unable to invert.  This function is applied to theuser's password and the result compared to a tableentry, a match being interpreted as authentication ofthe user.  The intruder may know all about H andhave access to the table, but he can penetrate the systemonly if he can invert H to determine an inputthat produces a given output.  This paper discussesissues surrounding selection of a suitable H.  Twodifferent plausible arguments are given that penetrationwould be exceedingly difficult, and it is thenargued that more rigorous results are unlikely.  Finally,some human engineering problems relating tothe scheme are discussed.
2623	Hahn, B.;	A New Technique for Compression and Storage of Data	The widespread tendency toward storage oflarge programs and blocks off text has produced aneed for efficient methods of compressing and storingdata.  This paper describes techniques that can,in most cases, decrease storage size by a factor offrom two to four.  The techniques involve specialhandling of leading and trailing blanks, and the encodingof other symbols in groups of fixed size asunique fixed point numbers.  The efficiency of thesystem is considered and pertinent statistics aregiven and compared with statistics for other information coding techniques.
2624	Popek, G. J.;Goldberg, R. P.;	Formal Requirements for Virtualizable Third Generation Architectures	Virtual machine systems have been implementedon a limited number of third generation computersystems, e.g. CP-67 on the IBM 360/67.  From previousempirical studies, it is known that certain thirdgeneration computer systems, e.g. the DEC PDP-10, cannotsupport a virtual machine system.  In this paper,model of a third-generation-like computer system isdeveloped.  Formal techniques are used to deriveprecise sufficient conditions to test whether suchan architecture can support virtual machines.
2625	Fabry, R. S.;	Capability-Based Addressing	Various addressing schemes making use of segmenttables are examined.  The inadequacies ofthese schemes when dealing with shared addresses areexplained. These inadequacies are traced to thelack of an efficient absolute address for objects inthese systems.  The direct use of a capability asan address is shown to overcome these difficultiesbecause it provides the needed absolute address.Implementation of capability-based addressing is discussed.It is predicted that the use of tags toidentify capabilities will dominate.  A hardware addresstranslation scheme which never requires themodification of the representation of capabilities issuggested. The scheme uses a main memory hash tablefor obtaining a segment's location in main memory givenits unique code.  The hash table is avoided forrecently accessed segments by means of a set of associativeregisters.  A computer using capability-basedaddressing may be substantially superior to presentsystems on the basis of protection, simplicity ofprogramming conventions, and efficient implementation.
2626	Saltzer, J. H.;	Protection and the Control of Information Sharing in Multics	The design of mechanisms to control the sharingof information in the Multics system is described.Five design principles help provide insight into thetradeoffs among different possible designs.  Thekey mechanisms described include access control lists,hierarchical control of access specifications,identification and authentication of users, and primarymemory protection.  The paper ends with a discussionof several known weaknesses in the current protection mechanism design.
2627	Bruno, J.;Coffman, E. G. Jr.;Sethi, R.;	Scheduling Independent Tasks to Reduce Mean Finishing Time	Sequencing to minimize mean finishing time(or mean time in system) is not only desirable tothe user, but it also tends to minimize at each pointin time the storage required to hold incompletetasks.  In this paper a deterministic model of independenttasks is introduced and new results are derivedwhich extend and generalize the algorithms known forminimizing mean finishing time.  In addition topresenting and analyzing new algorithms it is shownthat the most general mean-finishing-time problemfor independent tasks is polynomial complete, and hence unlikelyto admit of a non-enumerative solution
2628	Fuller, S. H.;	Minimal-Total-Processing Time Drum and Disk Scheduling Disciplines	This article investigates the application ofminimal-total-processing-time (MTPT) schedulingdisciplines to rotating storage units when random arrivalof requests is allowed.  Fixed-head drum andmoving-head drum and moving-head disk storage units areconsidered, and emphasis is placed on the relativemerits of the MTPT scheduling discipline with respectto the shortest-latency-time-first (SLTF) schedulingdiscipline.  The results of the simulation studiespresented show that neither scheduling disciplineis unconditionally superior to the other.  For mostfixed-head drum applications, the SLTF disciplineis preferable to MTPT, but for intra-cylinder disk schedulingthe MTPT discipline offers a distinct advantageover the SLTF discipline.  The computational requirementsof an algorithm that implements the MTPT schedulingdiscipline are shown to be comparable to SLTF algorithms.In both cases, the sorting procedure is themost time-consuming phase of the algorithm.
2629	Ritchie, D. M.;Thompson, K.;	The UNIX Time-Sharing system	UNIX is a general-purpose, multi-user, interactiveoperating system for the Digital EquipmentCorporation PDP-11/40 and 11/45 computers.  It offersa number of features seldom found even in largeroperating systems, including: (1) a hierarchical file systemincorporating demountable volumes; (2) compatiblefile, device, and inter-process I/O; (3) the ability toinitiate asynchronous processes; (4) system commandlanguage selectable on a per-user basis; and (5) over100 subsystems including a dozen languages.Thispaper discusses the nature and implementation of thefile system and of the user command interface.
2630	Minieka, E.;	On Computing Sets of Shortest Paths in a Graph	Two algorithms are presented that constructthe k shortest paths between every pair of verticesin a directed graph.  These algorithms generalize the Floydalgorithm and the Dantzig algorithm for findingthe shortest path between every pair of vertices in a directed graph.
2631	Barton, I. J.;Creasey, S. E.;Lynch, M. F.;Snell, M. J.;	An Information-Theoretic Approach toText Searching in Direct Access Systems	Using direct access computer files of bibliographicinformation, an attempt is made to overcomeone of the problems often associated with informationretrieval, namely, the maintenance and use of largedictionaries, the greater part of which is used onlyinfrequently.  A novel method is presented, whichmaps the hyperbolic frequency distribution.  This ismore suited to implementation on storage devices.This method treats text as a string of characters ratherthan words bounded by spaces, and chooses subsetsof strings such that their frequencies of occurrence aremore even than those of word types.  The membersof this subset are then used as index keys for retrieval.The rectangular distribution of key frequenciesresults in a much simplified file organizationand promises considerable cost advantages.
2632	Wulf, W.;Cohen, E.;Corwin, W.;Jones, A.;Levin, R.;Pierson, C.;Pollack, F.;	HYDRA: The Kernel of a Multiprocessor Operating System	This paper describes the design philosophy ofHYDRA-the kernel of an operating system for C.mmp,the Carnegie-Mellon Multi-Mini-Processor.  This philosophyis realized through the introduction of ageneralized notion of "resource", both physical and virtual,called an "object".  Mechanisms are presentedfor dealing with objects, including the creation of newtypes, specification of new operations applicableto a given type, sharing, and protection of any referenceto a given object against improper applicationof any of the operations defined with respect to thattype of object.  The mechanisms provide a coherentbasis for extension of the system in two directions: theintroduction of new facilities, and the creationof highly secure systems.
2633	Adams, J.;Gary, J.;	Compact Representation of Contour Plots for Phone Line Transmission	Methods for the compact representation of contourplots are described and tested.  These areintended to reduce the cost of transmitting contour plotsover phone lines.  We feel some of these methodscould be used to transmit contour plots over voice grade phone lines.
2634	Slysz, W. D.;	An Evaluation of Statistical Software in the Social Sciences	Several hundred college and university computerinstallations now offer various types of statisticalpackages for general use.  Among those most widely availableare OSIRIS, SPSS, BMD, DATA-TEXT, and TSAR.In order to provide users with a basis for selectionand use, tests were made for each of these systems,and the results are summarized as to cost and performance.
2635	Boulton, D. M.;	Exact Probabilities for R X C Contingency Tables (Algorithm R434)	
2636	Page, R. L.;	Generation of Random Correlated Normal Variables (Algorithm R425)	
2637	Ellis, T. M. R.;	Hidden-Line Plotting Program (Algorithm R420)	
2638	Gaither, B.;	Hidden-Line Plotting Program (Algorithm R420)	
2639	Piessens, R.;	Calculation of Fourier Integrals (Algorithm R418)	
2640	Piessens, R.;	Modified Havie Integration (Algorithm R400)	
2641	Page, R. L.;	A Minimal Spanning Tree clustering Method [Z] (Algorithm A479)	
2642	Barrodale, I.;Roberts, F. D. K.;	Solution of an Overdetermined System of Equationsin the L1 Norm [F4] (Algorithm A478)	
2643	Gimpel, J. F.;	The Minimization of Spatially-Multiplexed Character Sets	The paper describes a technique for compactingcharacter sets in a digital computer while retainingfast access to individual bits.  It considers the problemof minimizing the storage needed to containsuch tables.  Reduction techniques are developed, andthe problem is shown to reduce to a covering problem.
2644	Henschen, L.;Overbeek, R.;Wos, L.;	A Theorem-Proving Language for Experimentation	Because of the large number of strategiesand inference rules presently under considerationin automated theorem proving, there is a need for developinga language especially oriented toward automatedtheorem proving.  This paper discusses some of the featuresand instructions of this language.  The useof this language permits easy extension of automatedtheorem-proving programs to include new strategiesand/or new inference rules.  Such extend ability willpermit general experimentation with the variousalternative systems.
2645	CCohen, J.;Zuckerman, C.;	Two Languages for Estimating Program Efficiency	Two languages enabling their users to estimatethe efficiency of computer programs are presented.The program whose efficiency one wishes to estimate is writtenin the first language, a go-to-less programminglanguage which includes most of the features of Algol60.  The second language consists of interactivecommands enabling its users to provide additional informationabout the program written in the firstlanguage and to output results estimating its efficiency.Processors for the two languages are alsodescribed.  The first processor is a syntax-directedtranslator which compiles a program into a symbolicformula representing the execution time for that program.The sound processor is a set of proceduresfor that program.  The second processor is a set ofprocedures for algebraic manipulation which can becalled by the user to operate on the formula producedby the first processor.  Examples of the usageof the two languages are included.  The limitations ofthe present system, its relation to Knuth's workon the analysis of algorithms, and some of the directionsfor further research are also discussed.
2646	Gold, D. E.;Kuck, D. J.;	A Model for Masking Rotational Latency by Dynamic Disk Allocation	This paper presents the background and algorithmsfor masking the rotational latency of a diskor drum.  It discusses the anticipatory input and outputof blocks of data to buffer and primary memoriesfor a mono-programmed computer system.  A basic permutationalgorithm and several variations are given.Because of the anticipatory nature of the I/O scheduling,these algorithms are restricted to classesof programs with predictable behavior.  While the methodsare not restricted to numerical computations,matrix and partial differential equation methods aretypical examples of their use.  It is shown thatlatency may be masked using a small amount of buffermemory.  The methods discussed are independent ofthe overall size of the data base being considered.
2647	Gentleman, W. M.;Marovich, S. B.;	More on Algorithms that Reveal Propertiesof Floating Point Arithmetic Units	
2648	Wunderlich, M. C.;Selfridge, J. L.;	A Design for a Number Theory Packagewith an Optimized Trial Division routine	A number theory package is described which usesdoubly linked list structures for storing multipreciseintegers.  The package has been coded in IBM's BasicAssembly Language and makes heavy use of the macrolanguage and conditional assembly.  An optimally codedtrial division routine is also described whichcan be used to determine the unique factorization of large integers.
2649	Tsao, N.;	On the Distributions of Significant Digits and Roundoff Errors	Generalized logarithmic law is derived forthe distribution of the first t significant digitsof a random digital integer.  This result is then usedto determine the distribution of the roundofferrors in floating-point operations, which is a mixtureof uniform and reciprocal distributions.
2650	Wagner, R. A.;	Order-n Correction for Regular Languages	A method is presented for calculating a stringB, belonging to a given regular language L,which is "nearest" (in number of edit operations) to agiven input string a.  B is viewed as a reasonable"correction" for the possibly erroneous string a, wherea was originally intended to be a string of L.The calculation of B by the method presented requirestime proportional to |a|, the number of charactersin a.  The method should find applications in informationretrieval, artificial intelligence, and spellingcorrection systems.
2651	Wegbreit, B.;	The Treatment of Data Types in EL1	In constructing a general purpose programminglanguage, a key issue is providing a sufficientset of data types and associated operations in a mannerthat permits both natural problem-oriented notationand efficient implementation.  The EL1 language containsa number of features specifically designed tosimultaneously satisfy both requirements.  The resultingtreatment of data types includes provision forprogrammer-defined data types data types and genericroutines, programmer control over type conversion,and very flexible data type behavior, in a context thatallows efficient compiled code and compact datarepresentation.
2652	Shaw, M.;	Reduction of Compilation Costs Through Language Contraction	Programming languages tailored to particulargroups of users can often be constructed by removingunwanted features from a general purpose language.  Thispaper describes the use of simulation techniquesto predict the savings in compilation cost achievableby such an approach.  The results suggest a functionwhich describes the effect of changes in the power ofa language on the compilation cost of an algorithmexpressed in that language: when features not actuallyused by the algorithm are removed from the language,the cost of compiling the algorithm decreases moderately,but when features that are needed are removed,the compilation cost increases sharply.
2653	Einarsson, B.;	Solution of the Transcendental Equation w*exp(x)=x (Algorithm R443)	
2654	Ehrich, G.;	Generator of Set-Partitions to Exactly R Subsets [G7] (Algorithm A477)	
2655	Cline, A. K.;	Six Subprograms for Curve Fitting UsingSplines Under Tension [E2] (Algorithm A476)	
2656	Cline, A. K.;	Scalar- and Planar- Valued Curve Fitting Using Splines Under Tension	The spline under tension was introduced bySchweikert in an attempt to imitate cubic splinesbut avoid the spurious critical points they induce.The defining equations are presented here, togetherwith an efficient method for determining the necessaryparameters and computing the resultant spline.The standard scalar-valued curve fitting problem is discussed,as well as the fitting of open and closedcurves in the plane.  The use of these curves and theimportance of the tension in the fitting of contourlines are mentioned as application.
2657	Lee, R. C. T.;Chang, C. L.;Waldinger, R. J.;	An Improved Program-Synthesizing Algorithm and Its Correctness	An improved program-synthesizing algorithmbased on the algorithm proposed by Waldinger andLee in 1969 is given.  In the old algorithm, the program-synthesizingproblem is translated into a theorem-provingproblem, and a program is obtained by analyzing a proof.For the improved algorithm, the analysis isnot necessary, and a program is obtained as soon asthe proof is completed.  This is achieved by usinga modified variable tracing mechanism invented by Greenin 1969.  The correctness of the improved algorithmis also proved; i.e. the program thus obtainedalways satisfies the specification.
2658	Balfour, A.;	An Alternative Approach to Mutual Recursionin Algol 60 Using Restricted Compilers	
2659	Abrahams, P. W.;	Some Remarks on Lookup of Structured Variables	
2660	Simmons, G. C.;	Addendum to M. L. Patrick Paper	
2661	Sterling, T. D.;Pollack, S. V.;	Ideal Teaching Machines-A Solution to the Pedagogic Language Problem	
2662	Freeman, P.;Malcolm, M. A.;Payne, W. H.;	Graduate Education: The Ph.D. Glut: Response and Rebuttal	
2663	Lucas, H. C. Jr.;Montgomery, D. B.;Larreche, J. C.;	A Study of Computer Use in a Graduate School of Business	
2664	Even, S.;	Parallelism in Tape-Sorting	Two methods for employing parallelism in tape-sortingare presented.  Method A is the naturalway to use parallelism. Method B is new.  Both approximatelyachieve the goal of reducing the processingtime by a divisor which is the number of processors.
2665	Lindstrom, G.;	Copying List Structures Using Bounded Workspace	Two new algorithms are presented for list structurecopying using bounded workspace.  The first,of primarily theoretical interest, shows that withoutcell tag bits the task can be performed in timen^2.  The second algorithm, assuming one tag bit ineach cell, delivers attractive practical speed.Any noncyclic structure is copied in linear speed, whilecyclic structures are copied in average timeless than nlogn.  No foreknowledge of cycle absenceis necessary to achieve linear speed.  A variationof the second algorithm solves an open problem concerninglist structure marking.  That result demonstratesthat marking can be done in average time nlogn withoutthe aid of supplemental tag bits or stacks.
2666	Smith, G.;Sefton, I. M.;	On Lions' Counter Example for Gotlieb's Methodfor the Construction of School Timetables	The timetable problem is an essentially discreteproblem. Although the discrete problem mayhave no feasible solution, there may exist a solutionto the equivalent continuous problem.  An exampleis given, for which the nondiscrete solution can beinterpreted as a set of timetables, differing fromweek to week, which together satisfy the long-termrequirements of the timetable problem.
2667	Boyse, J. W.;	Execution Characteristics of Programs in a Page-on-Demand System	Data are presented which show the execution characteristicsof two types of commonly used programsin a large-scale, time-shared computer system.  A softwaremonitoring facility built into the supervisorwas used for data collection during normal system operation.These data were analyzed, and results ofthis analysis are presented for a Fortran compilerand an interactive line file editor.  Probabilitydistribution functions and other data are given forsuch things as CPU intervals, I/O intervals, andthe number of such intervals during execution.  Empiricaldistributions are compared with simple theoreticaldistributions (exponential, hyperexponential, and geometric).Other data show paging characteristicsof tasks as a function of the number of pages those tasks have in core.
2668	Franklin, M. A.;Gupta, R. K.;	Computation of Page Fault Probability from Program Transition Diagram	An algorithm is given for calculating page faultprobability in a virtual memory system operatingunder demand paging with various memory sizes and replacementrules.  A first order Markov model of programbehavior is assumed, and a representation of the systembased on memory states, control states, and memorysubstates is presented.  The algorithm is general inthe sense that the page fault probabilities canbe calculated for nonpredictive replacement rules appliedto any program represented by a one-step Markovchain.  A detailed example is given to illustrate thealgorithm for Random and Least Recently Used (LRU)replacement rules.
2669	Saltzer, J. H.;	A Simple Linear Model of Demand Paging Performance	Predicting the performance of a proposed automaticallymanaged multilevel memory system requiresa model of the patterns by which programs refer to theinformation stored in the memory.  Some recentexperimental measurements on the Multics virtual memorysuggest that, for rough approximations, a remarkablysimple program reference model will suffice.  The simplemodel combines the effect of the informationreference pattern with the effect of the automatic managementalgorithm to produce a single, compositestatement: the mean number of memory references betweenpaging exceptions increases linearly with thesize of the paging memory.  The resulting model is easyto manipulate, and is applicable to such diverseproblems as choosing an optimum size for a paging memory,arranging for reproducible memory usage charges,and estimating the amount of core memory sharing.
2670	Krogh, F. T.;	Efficient Implementation of a Variable ProjectionAlgorithm for Nonlinear Least Squares Problems	Nonlinear least squares frequently arise for whichthe variables to be solved for can be separatedinto a linear and a nonlinear part.  A variable projectionalgorithm has been developed recently whichis designed to take advantage of the structure of a problemwhose variables separate in this way.  Thispaper gives a slightly more efficient and slightly moregeneral version of this algorithm than has appearedearlier.
2671	Stone, H. S.;	A Note on a Combinatorial Problem of Burnett and Coffman	
2672	Smoliar, S. W.;	Emotional Content Considered Dangerous	
2673	Ackerman, A. F.;	Quadratic Search for Hash Tables of Size p^n	
2674	Barrett, R. C.;Fordan, B. W. Jr.;	Scan Conversion Algorithms for a Cell Organized Raster Display	Raster scan computer graphics with "real time"character generators have previously been limitedto alphanumeric characters.  A display has been describedwhich extends the capabilities of this organizationto include general graphics.  Two fundamentally differentscan conversion algorithms which have beendeveloped to support this display are presented.  Oneis most suitable to non-interactive applicationsand the other to interactive applications.  The algorithmswere implemented in Fortran on the CDC 6400computer.  Results obtained from the implementations showthat the noninteractive algorithms can significantlyreduce display file storage requirements at little costin execution time over that of a conventionalraster display.  The interactive algorithm can improveresponse time and reduce storage requirements.
2675	Ravindran, A.;	A Computer Routine for Quadratic and LinearProgramming Problems (Algorithm R431)	
2676	Withers, D. H.;	Zeros of a Complex Polynomial (Algorithm R419)	
2677	Bosten, N. E.;Battiste, E. L.;	Incomplete Beta Ratio (Algorithm R179)	
2678	Wright, T.;	Visible Surface Plotting Program [J6] (Algorithm A475)	
2679	Loeser, R.;	Some Performance Tests of "quicksort" and Descendants	Detailed performance evaluations are presentedfor six ACM algorithms: quicksort (No. 64),Shellsort (No. 201), stringsort (No. 207), "TREESORT3"(No. 245), quickersort (No. 271), and qsort (No.402).  Algorithms 271 and 402 are refinements of algorithm64, and all three are discussed in some detail.The evidence given here demonstrates that qsort (No.402) requires many more comparisons than its authorclaims.  Of all these algorithms, quickersort requiresthe fewest comparisons to sort random arrays.
2680	Morgan, H. L.;	Optimal Space Allocation on Disk Storage Devices	When the amount of space required for file storageexceeds the amount which can be kept on-line,decisions must be made as to which files are to be permanentlyresident and which mountable.  These decisionswill affect the number of mount requests issued to theoperators.  This is often a bottleneck in a computingfacility, and reducing the number of mounts thus decreasesturnaround time.  An optimization model forthe assignment of files to disk packs, and packs to eitherresident or nonresident status is presented.Heuristics are suggested for those cases in whichit is inefficient to compute the actual optimum.
2681	Balkovich, E.;Chiu, W.;Presser, L.;Wood, R.;	Dynamic Memory Repacking	A probabilistic model of a multiprogramming systemis exercised in order to determine the conditionsunder which the dynamic repacking of main memory is beneficial.An expression is derived for the maximuminterference that a repacking process may introducebefore the original performance of the system isdegraded.  Alternative approaches to repacking are discussed,and the operating conditions that leadto improved system throughput through repacking are delineated.
2682	Sreenivasan, K.;Kleinman, A. J.;	On the Construction of a Representative Synthetic Workload	A general method of constructing a drive workloadrepresentative of a real workload is described.The real workload is characterized by its demands on thevarious system resources.  These characteristicsof the real workload are obtained from the system accountingdata. The characteristics of the drive workloadare determined by matching the joint probability densityof the real workload with that of the driveworkload.  The drive workload is realized by using asynthetic program in which the characteristics canbe varied by varying the appropriate parameters. Calibrationexperiments are conducted to determine expressionsrelating the synthetic program parameters with the workloadcharacteristics.  The general method is appliedto the case of two variables, cpu seconds and numberof I/O activities; and synthetic workload with 88jobs is constructed to represent a month'sworkload consisting of about 6000 jobs.
2683	Wegbreit, B.;	The Synthesis of Loop Predicates	Current methods for mechanical program verificationrequire a complete predicate specificationon each loop.  Because this is tedious and error prone,producing a program with complete, correct predicatesis reasonably difficult and would be facilitated by machineassistance.  This paper discusses techniquesfor mechanically synthesizing loop predicates.  Two classesof techniques are considered: (1) heuristicmethods which derive loop predicates from boundary conditionsand/or partially specified inductive assertions:(2) extraction methods which use input predicates andappropriate weak interpretations to obtain certainclasses of loop predicates by an evaluation on the weak interpretation.
2684	Ledgard, H. F.;	Production Systems: or Can We Do Better than BNF?	Since the development of BNF, the definitionof the syntax of programming languages has beenalmost universally associated with context-free requirements.Yet numerous interesting and difficultissues in syntax stem from the context-sensitive requirements,notably the compatibility between thedeclaration of an identifier and its uses, the correspondencebetween actual and formal parameters, andissues arising from block structure.  This paper exploresthe use of a formal notation called ProductionSystems in providing a readable and complete formal definitionof syntax.  As a practical illustration,a small but significant subset of PL/I is considered.  Amore detailed presentation, as well as the applicationto define abstract syntax and translations between languages,is given in a previous paper by the author.
2685	Lamport, L.;	The Parallel Execution of DO Loops	Methods are developed for the parallel executionof different iterations of a DO loop.  Bothasynchronous multiprocessor computers and array computersare considered.  Practical application to thedesign of compilers for such computers is discussed.
2686	Ramberg, J. S.;Schmeiser,B. W.;	An Approximate Method for Generating Asymmetric Random Variables	Tukey's lambda distribution is generalizedto provide an algorithm for generating values ofunimodal asymmetric random variables.  This algorithmhas the same advantages as the symmetric randomvariable generator previously given by the authors, exceptthat the addition of another parameter complicatesthe problem of finding the parameter values to fit a distribution.
2687	Jordan, B. W. Jr.;Barrett, R. C.;	A Cell Organized Raster Display for Line Drawings	Raster scan computer graphics displays with"real time" character generators have previouslybeen limited to alphanumeric characters.  A display isdescribed which extends the capabilities of thisorganization to include general graphics.  The feasibilityof such a display is shown by deriving theminimum number of patterns required in the read onlymemory of the character generator to synthesizean arbitrary line.  The synthesis process does not compromisepicture quality since the resulting dotpatterns are identical with those of a conventionalraster display.  Furthermore, the time constraintsof a raster display are shown to be satisfied fora typical design for very complex line drawings.
2688	Rothnie, J. B. Jr.;Lozano, T.;	Attribute Based File Organization in a Paged Memory Environment	The high cost of page accessing implies a needfor more careful data organization in a pagedmemory than is typical of most inverted file and similarapproaches to multi-key retrieval.  This articleanalyses that cost and proposes a method called multiplekey hashing which attempts to minimize it.Since this approach is not always preferable to inversion,a combined method is described.  The exactspecifications of this combination for a file with givendata and traffic characteristics is formulatedas a mathematical program.  The proposed heuristic solutionto this program can often improve on a simpleinversion technique by a factor of 2 or 3.
2689	Lucas, H. C. Jr.;	A CRT Report Generating System	
2690	Knott, G. D.;	A Numbering Systems for Combinations	
2691	King, P. J. H.;Johnson, R. G.;	Comments on the Algorithms of Verhelst for theConversion of Limited-Entry Decision Tables toFlowcharts	
2692	Sutherland, I. E.;Hodgman, G. W.;	Reentrant Polygon Clipping	A new family of clipping algorithms is described.These algorithms are able to clip polygonsagainst irregular convex plane-faced volumes in threedimensions, removing the parts of the polygon whichlie outside the volume.  In two dimensions the algorithmspermit clipping against irregular convex windows.Polygons to be clipped are represented as an orderedsequence of vertices without repetition of firstand last, in marked contrast to representation as acollection of edges as was heretofore the commonprocedure.  Output polygons have an identical format,with new vertices introduced in sequence to describeany newly-cut edge or edges.  The algorithms easily handlethe particularly difficult problem of detectingthat a new vertex may be required at a corner of theclipping window.  The algorithms described achieveconsiderable simplicity by clipping separately againsteach clipping plane or window boundary.  Codecapable of clipping the polygon against a single boundaryis reentered to clip against subsequent boundaries.Each such reentrant stage of clipping need store onlytwo vertex values and may begin its processingas soon as the first output vertex from the proceedingstage is ready.  Because the same code is reenteredfor clipping against subsequent boundaries, clippingagainst very complex window shapes is practical.For perspective applications in three dimentions, a six-planetruncated pyramid is chosen as the clippingvolume.  The two additional planes parallel to the projectionscreen serve to limit the range of depthpreserved through the projection.  A perspective projectionmethod which provides for arbitrary viewangles and depth of field in spite of simple fixed clippingplanes is described.  This method is idealfor subsequent hidden-surface computations.
2693	Akima, H.;	Bivariate Interpolation and Smooth Surface FittingBased on Local Procedures [E2] (AlgorithmA474)	
2694	Piessens, R.;	Computation of Legendre Series Coefficients [C6] (Algorithm A473)	
2695	Gibbs, N. E.;Poole, W. G. Jr.;	Tridiagonalization by Permutations	Tridiagonalizing a matrix by similarity transformationsis an important computational toolin numerical linear algebra. Consider the class of sparsematrices which can be tridiagonalized usingonly row and corresponding column permutations.  Theadvantages of using such a transformation includethe absence of round-off errors and improved computation timewhen compared with standard transformations.A graph theoretic algorithm which examines an arbitraryn x n matrix and determines whether or not itcan be permuted into tridiagonal form is given.  Thealgorithm requires no arithmetic while the numberof comparisons, the number of assignments, and the numberof increments are linear in n.  This comparesvery favorably with standard transformation methods.If the matrix is permutable into tridiagonal form,the algorithm gives the explicit tridiagonal form.Otherwise, early rejection will occur.
2696	Akima, H.;	A Method of Bivariate Interpolation and SmoothSurface Fitting Based on Local Procedures	A method is designed for interpolating valuesgiven at points of a rectangular grid in a planeby a smooth bivariate function z=z(x,Y).  The interpolatingfunction is a bicubic polynomial in eachcell of the rectangular grid.  Emphasis is an avoidingexcessive undulation between given grid points.The proposed method is an extension of the method ofunivariate interpolation developed earlier by theauthor and is likewise based on local procedures.
2697	Malcolm, M. A.;Palmer, J.;	A Fast Method for Solving a Class of Tridiagonal Linear Systems	The solution of linear systems having real, symmetric,diagonally dominant,tridiagonal coefficientmatrices with constant diagonals is considered.  It isproved that the diagonals of the LU decompositionconverges when floating-point precision.  It is alsoproved that the computed LU decomposition convergeswhen floating-point arithmetic is used and that the limitsof the LU diagonals using floating point areroughly within machine precision of the limits usingreal arithmetic.  This fact is exploited to reducethe number of floating-point operations required tosolve a linear system from 8n-7 to 5n+2k-3, wherek is much less than n, the order of the matrix.  If theelements of the subdiagonals and superdiagonalsare 1, then only 4n+2k-3 operations are needed.  Theentire LU decomposition takes k words of storage,and considerable savings in array subscripting are achieved.Upper and lower bounds on k are obtainedin terms of the ratio of the coefficient matrix diagonalconstants and parameters of the floating-pointnumber system.  Various generalizations of these results are discussed.
2698	Lyon, G.;	Syntax-Directed Least-Errors Analysis forContext-Free Languages: A Practical Approach	A least-errors recognizer is developed informallyusing the well-known recognizer of Earley,along with elements of Bellman's dynamic programming.The analyzer takes a general class of context-freegrammars as drivers, and any finite string as input.Recognition consists of a least-errors count fora corrected version of the input relative to the drivergrammar. The algorithm design emphasizes practicalaspects which help in programming it.
2699	Schwartz, J. T.;	Automatic Data Structure Choice in a Language of Very High Level	SETL is a set-theoretically oriented languageof very high level whose repertoire of semanticobjects includes finite sets, ordered n-tuples, andsets of ordered n-tuples usable as mappings.  Thispaper describes the structure of an optimizer for thislanguage.  Among other methods of interest, theoptimizer uses techniques which allow relations of inclusionand membership to be established, the domainsand ranges of (tabulated) mappings to be estimated fromabove and below, and the single-valuedness of(tabulated) mappings to be proved.  Once facts of thiskind have been established, automatic choice ofdata structures becomes possible. The methods employedare based upon, and extend, known techniques ofdata flow analysis.
2700	Lipton, R. J.;	Reduction: A Method of Proving Properties of Parallel Programs	When proving that a parallel program has agiven property it is often convenient to assumethat a statement is indivisible, i.e. that the statementcannot be interleaved with the rest of the program.Here sufficient conditions are obtained to show thatthe assumption that a statement is indivisiblecan be relaxed and still preserve properties such ashalting.  Thus correctness proofs of a parallelsystem can often be greatly simplified.
2701	Graham, S. L.;Wegman, M.;	A Fast and Usually Linear Algorithm for GlobalFlow Analysis (Abstract only--Complete paper JACM23,1 January, 1976)	A new algorithm for global flow analysis onreducible graphs is presented. The algorithm isshown to treat a very general class of function spaces.For a graph of e edges, the algorithm has aworst case time bound of O(e log e) function operations.It is also shown that in programming terms,the number of operations is proportional to e plus thenumber of exits from program loops.  Consequentlya restriction to one-entry one-exit control structureslinearity.  The algorithm can be extended to yetlarger classes of function spaces and graphs by relaxingthe time bound.  Examples are given of codeimprovement problems which can be solved using the algorithm.
2702	Hunt, H. B. III;Szymanski, T. G.;Ullman, J. D.;	On the Complexity of LR(k) Testing	The problem of determining whether an arbitrarycontext-free grammar is a member of some easilyparsed subclass of grammars such as the LR(k) grammarsis considered.  The time complexity of this problemis analyzed both when k is considered to be a fixedinteger and when k is considered to be a parameterof the test.  In the first case, it is shown that forevery k there exists an O(n(k+2)) algorithm fortesting the LR(k) property, where n is the size of thegrammar in question.  On the other hand, if bothk and the subject grammar are problem parameters, thenthe complexity of the problem depends very stronglyon the representation chosen for k.  More specifically,it is shown that this problem is NP-completewhen k is expressed in unary.  When k is expressed inbinary the problem is complete for nondeterministicexponential time.  These results carry over to manyother parameterized classes of grammars, such asthe LL(k), strong LL(k), SLR(k), LC(k), and strong LC(k) grammars.
2703	Jazayeri, M.;Ogden, W. F.;Rounds, W. C.;	The Intrinsically Exponential Complexity ofthe Circularity Problem for Attribute Grammars	Attribute grammars are an extension of context-freegrammars devised by Knuth as a mechanismfor including the semantics of a context-free languagewith the syntax of the language.  The circularityproblem for a grammar is to determine whether the semanticsfor all possible sentences (programs) infact will be well defined.  It is proved that this problemis, in general, computationally intractable.Specifically, it is shown that any deterministic algorithmwhich solves the problem must for infinitelymany cases use an exponential amount of time.An improvedversion of Knuth's circularity testing algorithmis also given, which actually solves the problem within exponential time.
2704	Goodenough, J. B.;	Exception Handling: Issues and a Proposed Notation	This paper defines exception conditions, discussesthe requirements exception handling languagefeatures must satisfy, and proposes some new languagefeatures for dealing with exceptions in an orderlyand reliable way.  The proposed language features serveto highlight exception handling issues by showinghow deficiencies in current approaches can be remedied.
2705	Naur, P.;	Programming Languages, Natural Languages, and Mathematics	Some social aspects of programming are illuminatedthrough analogies with similar aspects ofmathematics and natural languages.  The split betweenpure and applied mathematics is found similarlyin programming. The development of natural languages towardflexion less, word-order based language typesspeaks for programming language design based on general,abstract constructs.  By analogy with incidentsof the history of artificial, auxiliary languages itis suggested that Fortran and Cobol will remaindominant for a long time to come.  The most promisingavenues for further work of wide influence areseen to be high quality program literature (i.e. programs)of general utility and studies of questionsrelated to program style.
2706	Kou, L. T.;Wong, C. K.;	A Note on the Set Basis Problem Relatedto the Compaction of Character Sets	This note discusses the reduction of theset basis problem to the clique cover problem.
2707	Bitner, J. R.;Reingold, E. M.;	Backtrack Programming Techniques	The purpose of this paper is twofold.  First,a brief exposition of the general backtrack techniqueand its history is given.  Second, it is shown how the useof macros can considerably shorten the computationtime in many cases.  In particular, this technique has allowedthe solution of two previously open combinatorialproblems, the computation of new terms in a well-knownseries, and the substantial reduction in computationtime for the solution to another combinatorial problem.
2708	Graham, S. L.;Rhodes, S. P.;	Practical Syntactic Error Recovery	This paper describes a recovery scheme for syntaxerrors which provides automatically-generatedhigh quality recovery with good diagnostic informationat relatively low cost. Previous recovery techniquesare summarized and empirical comparisons are made.  Suggestionsfor further research on this topic concludethe paper.
2709	Ledgard, H. F.;Marcotty, M.;	A Genealogy of Control Structures	The issue of program control structures hashad a history of heated controversy.  To put thisissue on a solid footing, this paper reviews numerous theoreticalresults on control structures and explorestheir practical implications.  The classic result ofBohm and Jacopini on the theoretical completenessof if-then-else and while-do is discussed. Several recentideas on control structures are then explored.These include a review of various other control structures,results on time/space limitations, and theoremsrelating the relative power of control structures undernotions of equivalence.  In conclusion, the impactof theoretical results on the practicing programmer andthe importance of one-in, one-out control structuresas operational abstractions are discussed.  It is arguedfurther that there is insufficient evidenceto warrant more than if-then-else, while-do, and their variants.
2710	Boyce, R. F;Chamberlin, D. D.;King, W. F. III;	Specifying Queries as Relational Expressions:The SQUARE Data Sublanguage	This paper presents a data sublanguage calledSQUARE, intended for use in ad hoc, interactiveproblem solving by non-computer specialists. SQUAREis based on the relational model of data, and isshown to be relationally complete; however, it avoidsthe quantifiers and bound variables required bylanguages based on the relational calculus.  Facilitiesfor query, insertion, deletion, and update ontabular data bases are described.  A syntax is given,and suggestions are made for alternative syntaxes,including a syntax based on English key words forusers with limited mathematical background.
2711	Salton, G.;Wong, A.;Yang, C. S.;	A Vector Space Model for Automatic Indexing	In a document retrieval, or other pattern matchingenvironment where stored entities (documents)are compared with each other or with incoming patterns(search requests), it appears that the best indexing(property) space is one where each entity lies as far awayfrom the others as possible; in these circumstancesthe value of an indexing system may be expressibleas a function of the density of the object space;in particular, retrieval performance may correlate inverselywith space density.  An approach based onspace density computations is used to choose an optimumindexing vocabulary for a collection of documents.Typical evaluation results are shown, demonstratingthe usefulness of the model.
2712	Reiser, M.;Kobayashi, H.;	Horner's Rule for the Evaluation of General Closed Queueing Networks	The solution of separable closed queueing networksrequires the evaluation of homogeneous multinomialexpressions.  The number of terms in those expressionsgrows combinatorially with the size of the networksuch that a direct summation may become impractical.  Analgorithm is given which does not show a combinatorialoperation count.  The algorithm is based on a generalizationof Horner's rule for polynomials.  It isalso shown how mean queue size and throughput an be obtainedat negligible extra cost once the normalizationconstant is evaluated.
2713	Cotton, I.;	Remark on Stably Updating Mean andStandard Deviation of Data (Corrigendum)	
2714	Gavril, F.;	Merging with Parallel Processors	Consider two linearly ordered sets A, B, |A|=m,|B|=n, m<=n, and p, p<=m, parallel processorsworking synchronously.  The paper presents an algorithmfor merging A and B with the p parallel processors,which requires at most 2[log2 (2m+1)]+[3m/p] + [m/p][log2(n/m)] steps.  If n = (2^B)m (B an integer),the algorithm requires at most 2[log2 (m+1)] + [m/p](2+B)steps.  In the case where m and n are of thesame order of magnitude, i.e. n=km with k being a constant,the algorithm requires 2[log2 (m+1)] + [m/p](3+k)steps.  These performances compare very favorably withthe previous best parallel merging algorithm,Batcher's algorithm, which requires n/p + ((m+n)/2p)log2 msteps in the general case and km/p + ((k+1)/2)(m/p)log2m in the special case where n=km.
2715	Astrahan, M. M.;Chamberlin,D. D.;	Implementation of a Structured English Query Language	The relational model of data, the XRM RelationalMemory System, and the SEQUEL language havebeen covered in previous papers and are reviewed.SEQUEL is a relational data sublanguages intendedfor the ad hoc interactive problem solving by non-computerspecialists.  A version of SEQUEL that hasbeen implemented in a prototype interpreter is described.The interpreter is designed to minimize thedata accessing operations required to respond to an arbitraryquery.  The optimization algorithms designedfor this purpose are described.
2716	Smith, J. M.;Yen-Tang Chang, P.;	Optimizing the Performance of a Relational Algebra Database Interface	An approach for implementing a "smart" interfaceto support a relational view of data is proposed.The basic idea is to employ automatic programming techniquesso that the interface analyzes and efficientlyrefines the high level query specification supplied bythe user.  A relational algebra interface, calledSQUIRAL, which was designed using this approach, is describedin detail. SQUIRAL seeks to minimize queryresponse time and space utilization by: (1) performingglobal query optimization, (2) exploiting disjointand pipelined concurrency, (3) coordinating sort ordersin temporary relations, (4) employing directoryanalysis, and (5) maintaining locality in page references.Algorithms for implementing the operatorsof E. F. Codd's relational algebra are presented, anda methodology for composing them to optimize theperformance of a particular user query is described.
2717	Shu, N. C.;Housel, B. C.;Lum, V. Y.;	CONVERT: A High Level TranslationDefinition Language for Data Conversion	This paper describes a high level and nonproceduraltranslation definition language, CONVERT,which provides very powerful and highly flexible datarestructuring capabilities. Its design is basedon the simple underlying concept of a form which enablesthe users to visualize the translation processes,and thus makes data translation a much simpler task."CONVERT" has been chosen for conveying the purposeof the language and should not be confused with anyother language or program bearing the same name.
2718	Gerritsen, R.;	A Preliminary System for the Design of DBTG Data Structures	The functional approach to database design isintroduced.  In this approach the goal of designis to derive a data structure which is capable of supportinga set of anticipated queries rather thana structure which "models the business" in some otherway. An operational computer program is describedwhich utilizers the functional approach to design datastructures conforming to the Data Base Task Groupspecifications.  The automatic programming technologyutilized by this program, although typically usedto generate procedure, is here used to generate declaratives.
2719	Wegbreit, B.;	Mechanical Program Analysis	One means of analyzing program performanceis by deriving closed-form expressions for theirexecution behavior.  This paper discusses the mechanizationof such analysis, and describes a system,Metric, which is able to analyze simple Lisp programsand produce, for example, closed-form expressionsfor their running time expressed in terms of size of input.This paper presents the reasons for mechanizingprogram analysis, describes the operation of Metric, explainsits implementation, and discusses its limitations.
2720	Piepmeier, W. F.;	Optimal Balancing of I/O Requests to Disks	Determining a policy for efficient allocationand utilization of a set of disk drives withdiffering operational characteristics is examined usinganalytical techniques.  Using standard queueingtheory, each disk drive is characterized by a queueingmodel with service time of a disk drive representedby the probability density function of the sum of twouniform distributions. Total response time of theset of disk models is then minimized under varyingload conditions. The results indicate that fasterdevices should have higher utilization factors and thatthe number of different device types utilizedtends to decrease with decreasing load.  Specific examplesusing 2314 and 3330 combinations are examined.
2721	Claudson, R. M.;	The Digital Simulation of River Plankton Population Dynamics	This paper deals with the development of amathematical model for and the digital simulationin Fortran IV of phytoplankton and zooplankton populationdensities in a river using previously developedrate expressions.  In order to study the relationshipsbetween the ecological mechanisms involved, thesimulation parameters were varied illustrating theresponse of the ecosystem to different conditions,including those corresponding to certain types of chemicaland thermal pollution.  As an investigationof the accuracy of the simulation methods, a simulationof the actual population dynamics of Asterionellain the Columbia River was made based on approximationsof conditions in that river. Although not totallyaccurate, the simulation was found to predict the generalannual pattern of plankton growth fairly welland, specifically, revealed the importance of the annualvelocity cycle in determining such patterns.In addition, the study demonstrates the usefulness ofdigital simulations in the examinations of certainaquatic ecosystems, as well as in environmentalplanning involving such examinations.
2722	Bently, J. L.;	Multidimensional Binary Search Trees Used for Associative Searching	This paper develops the multidimensional binarysearch tree (or k-d tree, where k is the dimensionalityof the search space) as a data structure for storage ofinformation to be retrieved by associative searches.The k-d tree is defined and examples are given. Itis shown to be quite in its storage requirements.A significant advantage of this structure is that a singledata structure can handle many types of queriesvery efficiently.  Various utility algorithms are developed;their proven average running times in ann record file are: insertion, O (log n); deletion ofthe root, O (n^(k-1)/k); deletion of a random node,O (log n); and optimization (guarantees logarithmic performanceof searches), O (n log n).  Search algorithmsare given for partial match queries with t keys specified[proven maximum running time of O (n^(k-t)/k)]and for nearest neighbor queries [empirically observed averagerunning time of O (log n).]  These performancesfar surpass the best currently known algorithms forthese tasks.  An algorithm is presented to handleany general intersection query. The main focus of thispaper theoretical.  It is felt, however, thatk-d trees could be quite useful in many applications,and examples of potential uses are given.
2723	Steele, G. L. Jr.;	Multiprocessing Compactifying Garbage Collection	Algorithms for a multiprocessing compactifyinggarbage collector are presented and discussed.The simple case of two processors, one performing LISP-likelist operations and the other performinggarbage collection continuously, is thoroughly examined.The necessary capabilities of each processorare defined, as well as interprocessor communicationand interlocks. Complete procedures for garbagecollection and for standard list processing primitivesare presented and thoroughly explained.  Particularattention is given to the problems of marking and relocatinglist cells while another processor may beoperating on them.  The primary aim throughout is toallow the list processor to run unimpeded whilethe other processor reclaims list storage.  The morecomplex cases involving several list processorsand one or more garbage collection processors are also briefly discussed.
2724	Todd, J.;	The Lemniscate Constants (Corrigendum)	
2725	Vaucher, J. C.;Duval, P.;	A Comparison of Simulation Event List Algorithms (Corrigendum)	
2726	Shwayder, K.;	Combining Decision Rules in a Decision Table	The techniques for minimizing logic circuitsare applied to the simplification of decisiontables by the combining of decision rules. This methodis logically equivalent to the Quien-McCluskeymethod for finding prime implicants.  If some of thedecision rules implied in the ELSE Rule occur withlow frequency, then the ELSE Rule can be used to furthersimplify the decision table.  Several objectivesmerit consideration in optimizing a decision table:(1)reducing machine execution time; (2) reducingpreprocessing time; (3) reducing required machine memory;(4) reducing the number of decision rules.(This often improves the clarity of the decision tableto a human reader.)  It will be shown that objectives(3) and (4) can be furthered with the above methods.Objective (1) is also attained if overspecifieddecision rules are not combined.  Objective (2) must becompared against the potential benefits of objectives(1), (3), and (4) in deciding whether to use the above methods.
2727	Lamport, L.;	Multiple Byte Processing with Full-Word Instructions	A method is described which allows parallelprocessing of packed data items using only ordinaryfull-word computer instructions, even though the processingrequires operations whose execution is contingentupon the value of a datum.  It provides a useful techniquefor processing small data items such as alphanumericcharacters.
2728	Ghosh, S. P.;	Consecutive Storage of Relevant Records with Redundancy	This paper studies the properties of a newclass of file organizations (CRWR) where recordsrelevant to every query are stored in consecutive storagelocations but the organizations contain redundancy.Some theorems which provide tools for reducing redundancyin CRWR organizations have been also developed.Redundancies obtained by the application of these theoremsare compared with that of query-inverted fileorganizations.  Some CRWR organization with minimum redundancyhave also been developed for queries whichspecify sets of keys.
2729	Smith, A. J.;	Comments on a Paper by T. C. Chen and I. T. Ho	
2730	Sharo, S. C.;Kwasny, S. C.;	Interactive Consulting via Natural Language	Interactive programming systems often containhelp commands to give the programmer on-lineinstruction regarding the use of the various systemscommands.  It is argued that it would be relativelyeasy to make these help commands significantly morehelpful by having them accept requests in naturallanguage.  As a demonstration, Weizenbaum's ELIZA programhas been provided with a script that turnsit into a natural language system consultant.
2731	Cotton, I. W.;	Remark on Stably Updating Mean and Standard Deviation of Data	
2732	Dijkstra, E. W.;	Guarded Commands, Nondeterminacy and Formal Derivation of Programs	So-called "guarded commands" are introducedas a building block for alternative and repetitiveconstructs that allow nondeterministic program componentsfor which at least the activity evoked, butpossible even the final state, is not necessarily uniquelydetermined by the initial state.  For theformal derivation of programs expressed in termsof these constructs, a calculus will be shown.
2733	Aho, A. V.;Johnson, S. C.;Ullman, J. D.;	Deterministic Parsing of Ambiguous Grammars	Methods of describing the syntax of programminglanguages in ways that are more flexible andnatural than conventional BNF descriptions are considered.These methods involve the use of ambiguouscontext-free grammars together with rules to resolvesyntactic ambiguities.  It is shown how efficientLR and LL parsers can be constructed directly fromcertain classes of these specifications.
2734	Shore, J. E.;	On the External Storage Fragmentation Producedby First-Fit and Best-Fit Allocation Strategies	Published comparisons of the external fragmentationproduced by first-fit and best-fit memoryallocation have not been consistent.  Through simulation,a series of experiments were performed in orderto obtain better data on the relative performance offirst-fit and best-fit and a better understandingof the reasons underlying observed differences. Thetime-memory-product efficiencies of first-fit andbest-fit were generally within 1 to 3 percent of eachother.  Except for small populations, the sizeof the request population had little effect on allocationefficiency.  For exponential and hyperexponentialdistributions of requests, first-fit outperformed best-fit;but for normal and uniform distributions,and for exponential distributions distorted in variousways, best-fit outperformed first-fit.  It ishypothesized that when first-fit outperforms best-fit,it does so because first-fit, by preferentiallyallocating toward one end of memory, encourages large blocksto grow at the other end.  Sufficient contiguousspace is thereby more likely to be available for relativelylarge requests.  Results of simulation experimentssupported this hypothesis and showed that the relativeperformance of first-fit and best-fit dependson the frequency of request.  When the coefficient ofvariation of the request distribution is greaterthan or approximately equal to unity, first-fit outperformed best-fit.
2735	Weber, R. E.;Gilchrist, B.;	Discrimination in the Employment of Women in the Computer Industry	
2736	Bobrow, D. G.;	A Note on Hash Linking	
2737	Freeman, H.;Shapira, R.;	Determining the Minimum-Area EncasingRectangle for an Arbitrary Closed Curve	This paper describes a method for finding therectangle of minimum area in which a given arbitraryplane curve can be contained.  The method is of interestin certain packing and optimum layout problems.It consists of first determining the minimal-perimeterconvex polygon that encloses the given curveand then selecting the rectangle of minimum area capableof containing this polygon.  Three theoremsare introduced to show that one side of the minimum-arearectangle must be colinear with an edge of theenclosed polygon and that the minimum-area encasing rectanglefor the convex polygon is also the minimum-arearectangle for the curve.
2738	Parnas, D. L.;Siewiorek, D. P.;	Use of the Concept of Transparency in theDesign of Hierarchically Structured Systems	This paper deals with the design of hierarchicallystructured programming systems.  It developsa method for evaluating the cost of requiring programmersto work with an abstraction of a real machine.A number of examples from hardware and softwareare given as illustrations of the method.
2739	Sager, N.;Grishman, R.;	The Restriction Language for Computer Grammars of Natural Language	Over the past few years, a number of systemsfor the computer analysis of natural languagesentences have been based on augmented context-freegrammars: a context-free grammar which defines aset of parse trees for a sentence, plus a group of restrictionsto which a tree must conform in orderto be a valid sentence analysis.  As the coverage of thegrammar is increased, an efficient representationbecomes essential for further development.  This paperpresents a programming language designed specificallyfor the compact and perspicuous statement of restrictionsof a natural language grammar.  It is basedon ten years' experience parsing text sentences withthe comprehensive English grammar of the N.Y.U.Linguistic String Project, and embodies in its syntaxand routines the relations which were found tobe useful and adequate for computerized natural languageanalysis.  The language is used in the currentimplementation of the Linguistic String Parser.
2740	Lauesen, S.;	A Large Semaphore Based Operating System	The paper describes the internal structure ofa large operating system as a set of cooperatingsequential processes.  The processes synchronize bymeans of semaphores and extended semaphores (queuesemaphores).  The number of parallel processes is carefullyjustified, and the various semaphore constructionsare explained.  The system is proved to be free of "deadlyembrace" (deadlock).  The design principleis an alternative to Dijkstra's hierarchical structuringof operating systems.  The project managementand the performance are discussed, too.  The operatingsystem is the first large one using the RC 4000multiprogramming system.
2741	Courtois, P. J.;	Decomposability, Instabilities, andSaturation in Multiprogramming Systems	A step-by-step approach to model the dynamicbehavior and evaluate the performance of computingsystems is proposed.  It is based on a technique of variableaggregation and the concept of nearly decomposablesystem, both borrowed from Econometrics.  This approachis taken in order to identify in multiprogrammingpaging systems (i) unstable regimes of operations and (ii)critical computing loads which bring the systeminto states of saturation.  This analysis leads to amore complete definition of the circumstances inwhich "thrashing" can set in.
2742	Wyman, F. P.;	Improved Event-Scanning Mechanisms for Discrete Event Simulation	Simulation models of large, complex "real-world"applications have occasionally earned thereputation of eating up hours of computer time.  Thisproblem may be attributed in part to difficultiessuch as slow stochastic convergence.  However, an additionalproblem lies in the fact that a significantamount of bookkeeping time is required to keep future eventsin their proper sequence.  This paper presentsa method for significantly reducing the time spent scanningfuture event lists in discrete event simulations.There models are presented, all of which improve in effectivenessas the events-list scan problem becomesmore burdensome.
2743	Harper, L. H.;Payne, T. H.;Savage, J. E.;Straus, E.;	Sorting X + Y	
2744	Soule, S.;	Addition in an Arbitrary Base Without Radix Conversion	This paper presents a generalization of anold programming technique; using it,one may addand subtract numbers represented in any radix, includinga mixed radix, and stored one digit per bytein bytes of sufficient size.  Radix conversion is unnecessary,no looping is required, and numbers mayeven be stored in a display (I/O) format.  Applicationsto Cobol, MIX, and hexadecimal sums are discussed.
2745	Hirschberg, D. S.;	A Linear Space Algorithm for Computing Maximal Common Subsequences	The problem of finding a longest common subsequenceof two strings has been solved in quadratictime and space.  An algorithm is presented which willsolve this problem in quadratic time and in linearspace.
2746	Aho, A. V.;Corasick, M. J.;	Efficient String Matching: An Aid to Bibliographic Search	This paper describes a simple, efficient algorithmto locate all occurrences of any of a finitenumber of keywords in a string of text.  The algorithmconsists of constructing a finite state patternmatching machine from the keywords and then using thepattern matching machine to process the text stringin a single pass.  Construction of the pattern matchingmachine takes time proportional to the sum ofthe lengths of the keywords.  The number of state transitionsmade by the pattern matching machine inprocessing the text string is independent of the numberof keywords.  The algorithm has been used toimprove the speed of a library bibliographicsearch program by a factor of 5 to 10.
2747	Cranston, B.;Thomas, R.;	A Simplified Recombination Scheme for the Fibonacci Buddy System	A simplified recombination scheme for the Fibonaccibuddy system which requires neither tablesnor repetitive calculations and uses only twoadditional bits per buffer is presented.
2748	Dewar, R. B. K.;	Indirect Threaded Code	An efficient arrangement for interpretive codeis described.  It is related to Bell's notionof threaded code but requires less space and is moreamenable to machine independent implementations.
2749	Babich, A. F.;Grason, J.;Parnas, D. L.;	Significant Event Simulation	This paper compares a new method of simulationorganization, called the significant event method,with an old one, called the clock pulse method, usingas examples two automobile traffic models.  Thesignificant event method is found to be more efficientthan the clock pulse method at low levels of systeminteraction and less efficient at high levels.  A simplemathematical model for the trade-off in therelative running time of the two methods is developed.The model aids in choosing between the two simulationmethods for a particular experiment.  It is concludedthat the significant event method can be of valuein the simulation of some systems when computationalefficiency is of sufficient importance.
2750	Lum, V. Y.;Senko, M. E;Wang, C. P.;Ling, H.;	A Cost Oriented Algorithm for Data Set Allocation in Storage Hierarchies	Data set allocation in today's multilevelstorage systems is usually based on qualitative,ad hoc decisions.  While it would be desirable to obtainan optimal solution to this allocation problem,it is clear that the number of parameters involved makesit intractable to straight-forward solution.In such a situation, we must find a set of assumptionswhich simplify the problem greatly, but whichstill provide a basis for considering all significantcost elements. This paper presents such a first,quantitative allocation step.  It considers many of thesignificant detailed costs of system utilization,data storage, data staging, and data migration.  Althoughmany avenues of further improvement are available,the present algorithm seems to be usefully accurate.As such, it can aid in quantifying the problemsof data set allocation, storage system configuration, and new device designs.
2751	Phong, B. T.;	Illumination for Computer Generated Pictures	The quality of computer generated images ofthree-dimensional scenes depends on the shadingtechnique used to paint the objects on the cathode-raytube screen.  The shading algorithm itself dependsin part on the method for modeling the object, whichalso determines the hidden surface algorithm.  Thevarious methods of object modeling, shading, and hiddensurface removal are thus strongly interconnected.Several shading techniques corresponding to differentmethods of object modeling and the related hiddensurface algorithms are presented here.  Human visualperception and the fundamental laws of optics areconsidered in the development of a shading rule thatprovides better quality and increased realism ingenerated images.
2752	Gibbs, N. E.;	Generation of All the Cycles of a Graph froma Set of Basic Cycles [H] (Algorithm 492)	
2753	Pfefferkorn, C. E.;	A Heuristic Problem Solving Design Systemfor Equipment or Furniture Layouts	The Designer Problem Solver (DPS) demonstratesthat the computer can perform simple designtasks.  In particular, it designs furniture and equipmentlayouts.  This task was chosen because it issimple, well defined, and characteristic of many designtasks in architecture, engineering, urban planning,and natural resource management.  These space planningtasks usually involve manipulating two-dimensionalrepresentations of objects to create feasible or optimalsolutions for problems involving topologicaland metric spatial constraints.  The paper describesextensive tests performed on the program.  DPS isa heuristic problem solver with a planning phase prefixedto it.  It uses the planning process to giveit a sense of direction, diagnostic procedures to locatedifficulties, and remedial actions to recoverfrom difficulties.  It uses a convex polygon representationto accurately describe the objects and thelayout.  This representation allows topological andmetric constraints to be tested and the design tobe easily updated.  DPS has been applied to 50 problems.While it is slow and limited in scope, theideas behind it are general.  It demonstrates the needfor selectivity in controlling search and themethods used to achieve it: task-specific information,planning, diagnostic procedures, remedial actions,and selective alternative generators.
2754	Horowitz, S. L.;	A Syntactic Algorithm for Peak Detectionin Waveforms with Applications to Cardiography	Peaks in a digitized waveform are detected by analgorithm incorporating piecewise linear approximationand tabular parsing techniques.  Several parameters serveto identify the waveform context enabling accuratemeasurement of peak amplitude, duration, and shape.  Thealgorithm is of sufficient speed to allow on-linereal-time processing.  An example of its applicationis demonstrated on an electrocardiogram.
2755	Mills, H. D.;	The New Math of Computer Programming (Corrigendum)	
2756	Wasserman, A. I.;	A Problem-List of Public Policy IssuesConcerning Computers and Health Care	
2757	Fox, B.L.;	More on kth Shortest Paths	
2758	Evans, D. J.;Hatzopoulos, M.;	A Note on the LU Factorization of a Symmetric Matrix	
2759	Fritsch, F. N.;Hindmarsh, A. C.;	Solution of an Overdetermined System ofEquations in the L1 Norm (Algorithm R478)	
2760	Doran, C. J.;	Visible Surface Plotting Program (Algorithm R475)	
2761	Mashburn, R. G.;	Visible Surface Plotting Program (Algorithm R475)	
2762	Piessens, R.;Mertens, I.;	Ten Subroutines for the Manipulationof Chebyshev Series (Algorithm R446, C446)	
2763	Gibbs, N. E.;	Basic Cycle Generation [H] (Algorithm 491)	
2764	Wilks, Y.;	An Intelligent Analyzer and Understander of English	The paper describes a working analysis and generationprogram for natural language, which handlesparagraph length input.  Its core is a system of preferentialchoice between deep semantic patterns,based on what we call "semantic density."  The systemis contrasted: (1) with syntax oriented linguisticapproaches, and (2) with theorem provingapproaches to the understanding problem.
2765	Cardenas, A. F.;	Analysis and performance of Inverted Data Base Structures	The need to envision and architecture data basesystems in a hierarchical level by level frameworkis stressed. The inverted data base (file) organizationis then analyzed, considering implementationoriented aspects.  The inverted directory is viewed realisticallyas another large data base which itselfis subjected to inversion.  Formulations are derivedto estimate average access time (read only) andstorage requirements, formalizing the interaction of database content characteristics, logical complexityof queries, and machine timing and blocking specificationsidentified as having a first-order effecton performance.  The formulations presented are necessaryto be used in conjunction with any index selectioncriteria to determine the optimum set of index keys.
2766	Fisher, D. A.;	Copying Cyclic List Structures in Linear Time Using Bounded Workspace	A bounded workspace copying algorithm for arbitrarylist structures is given.  This algorithmoperates in linear time and does not require tag bits.The best previous bounded workspace copying algorithmsachieved n^2 time without tag bits and n log n time withone tag.  The only restriction on the algorithmgiven here is that the copy must be placed into a contiguoussection of memory.  The method is applicableto fixed or variable size nodes.
2767	Vaucher, J. G.;Duval, P.;	A Comparison of Simulation Event List Algorithms	Four algorithms are considered which can be usedto schedule events in a general purpose discretesimulation system.  Two of the algorithms are new, oneis based on an end-order tree structure for eventnotices, and another uses an indexed linear list. The algorithmsare tested with a set of typical stochasticscheduling distributions especially chosen to showthe advantages and limitations of the algorithms.The end-order tree algorithm is shown to be an advantageous,immediate replacement for the algorithmin use with current simulation languages.  The mostpromising algorithm uses the indexed list concept.It will require an adaptive routine before it canbe employed in general purpose simulators,but itsperformance is such that further study would be fruitful.
2768	Hinds, J. A.;	An Algorithm for Locating Adjacent Storage Blocks in the Buddy System	A simple scheme for the determination of thelocation of a block of storage relative to otherblocks is described.  This scheme is applicableto the buddy type storage allocation systems.
2769	Warren, H. S. Jr.;	A Modification of Warshall's Algorithm forthe Transitive Closure of Binary Relations	An algorithm is given for computing the transitiveclosure of a binary relation that is representedby a Boolean matrix. The algorithm is similar to Warshall'salthough it executes faster for sparse matriceson most computers, particularly in a paging environment.
2770	Batagelj, V.;	The Quadratic Hash Method When the Table Size Is Not a Prime Number	Previous work on quadratic hash methods islimited mainly to the case where the table sizeis a prime number.  Here, certain results are derived forcomposite numbers.  It is shown that all compositenumbers containing at least the square of one of the componentprimes have full-period integer-coefficientquadratic hash functions.
2771	Braid, I. C.;	The Synthesis of Solids Bounded by Many Faces	A technique is presented which allows a classof solid objects to be synthesized and storedusing a computer.  Synthesis begins with primitive solidslike a cube, wedge, or cylinder.  Any solidcan be moved, scaled, or rotated.  Solids may also beadded together or subtracted.  Two algorithms toperform addition are described.  For practical designers,the technique has the advantage that operationsare concise, readily composed, and are given in termsof easily imagined solids.Quite short sequencesof operations suffice to build up complex solids bounded by many faces.
2772	Smith, G.;	On Maintenance of the Opportunity Listfor Class-Teacher Timetable Problems	One of the principal components of proceduresfor the solution of class-teacher timetable problemsis that for maintenance of the opportunity list.  Opportunitylist maintenance methods are based on necessaryconditions for the existence of a solution. A generalframework for necessary conditions, together withfour specific sets of necessary conditions, is given.
2773	Shen, K. K.;Peterson, J. L.;	A Weighted Buddy Method for Dynamic Storage Allocation (Corrigendum)	
2774	Frederick, L. W.;	Remark on Algorithm 475	
2775	Ginsberg, E. S.;Zaborowski, D.;	The Dilogarithm Function of a Real Argument [S22] (Algorithm 490)	
2776	Chambers, J. A.;Poore, R. V.;	Computer Networks in Higher Education: Socio-Economic-Political Factors	This study presents the results of a nationwidesurvey of computer networks in higher educationconducted during 1971-73.  Five major and 18 minor networkswere identified.  The five major networksincluded: the ARPA Net, the California State College network,the University of Iowa/Iowa State Universitynetwork, the Michigan Educational Research Information Triad,Inc., and the Triangle Universities ComputationCenter network in North Carolina. In-depth studies wereconducted of the latter two nets.  Based on theexperiences of these operating networks, a number of factorsare identified for consideration in developingnetworks.  Finally, recommendations are advanced regardingthe development of networks in higher educationin the future.
2777	Parnas, D. L.;	On a Solution to the Cigarette Smoker'sProblem (Without Conditional Statements)	This report discusses a problem first introducedby Patil, who has claimed that the cigarettesmoker's problem cannot be solved using the P and V operationsintroduced by Dijkstra unless conditionalstatements are used.  An examination of Patil's proofshows that he has established this claim only understrong restrictions on the use of P and V.  These restrictionseliminate programming techniques usedby Dijkstra and others since the first introductionof the semaphore concept.  This paper contains asolution to the problem.  It also discusses the needfor the generalized operators suggested by Patil.
2778	Sluis, A.;	Perturbations of Eigenvalues of Non-normal Matrices (Corrigendum)	
2779	Shampine, L. F.;	Discrete Least Squares Polynomial Fits	The recurrence relation between orthogonal polynomialsis widely used for discrete least squaresdata fitting.  A variant of the classical algorithmwhich has better numerical properties is presentedand the reason for its improved performance is explained.
2780	Erisman, E. M.;Tinney, W. F.;	On Computing Certain Elements of the Inverse of a Sparse Matrix	A recursive algorithm for computing the inverseof a matrix from the LU factors based on relationshipsin Takahashi, et al., is examined.  The formulas for thealgorithm are given; the dependency relationshipsare derived; the computational costs are developed; and somegeneral comments on application and stabilityare made.
2781	Whitt, J. D.;Sullenberger, A. G.;	The Algorithm Sequential Access Method:An Alternative to Index Sequential	
2782	Karp, R. A.;	A Reply to Gentleman and Marovich	
2783	Floyd, R. W.;Rivest, R. L.;	The Algorithm SELECT-for Finding the ithSmallest of n Elements [M1] (Algorithm 489)	
2784	Floyd, R. W.;Rivest, R. L.;	Expected Time Bounds for Selection	A new selection algorithm is presented whichis shown to be very efficient on the average,both theoretically and practically.  The number of comparisonsused to select the ith smallest of n numbersis n+min(i,n-i)+o(n).  A lower bound within 9percent of the above formula is also derived.
2785	Lawrie, D. H.;Layman, T.;Baer, D.;Randal, J. M.;	Glypnir-A Programming Language for Illiac IV	GLYPNIR is one of the earliest existing languagesdesigned for programming the Illiac IV computer.The syntax of the language is based on ALGOL 60, but hasbeen extended to allow the programmer explicitlyto specify the parallelism of his algorithm in terms of 64-wordvectors.  This paper describes the characteristics,goals and philosophy of the language, and discusses someof the problems associated with parallel computerarchitectures.
2786	Kernighan, B. W.;Cherry, L. L.;	A System for Typesetting Mathematics	This paper describes the design and implementationof a system for typesetting mathematics.The language has been designed to be easy to learnand to use by people (for example, secretaries andmathematical typists) who know neither mathematics nortypesetting.  Experience indicates that the languagecan be learned in an hour or so, for it has few rulesand fewer exceptions.  For typical expressions,the size and font changes, positioning, line drawing, andthe like necessary to print according to mathematicalconventions are all done automatically.  For example,the input sum from i=o to infinity x sub i=pi over2 produces (formula).  The syntax of the language is specifiedby a small context-free grammar; a compiler-compileris used to make a compiler that translates this languageinto typesetting commands.  Output maybe producedon either a phototypesetter or on a terminal with forwardand reverse half-line motions.  The systeminterfaces directly with text formatting programs, somixtures of text and mathematics may be handledsimply.  This paper was typeset by the authors using the system described
2787	Johnston, H. C.;Hoare, C. A. R.;	Matrix Reduction-An Efficient Method	The paper describes an efficient method forreduction of the binary matrices which arise insome school time-tabling problems.  It is a developmentof that described by John Lions.  It has beengeneralized and adapted to fit into the complete timetablingprocess; to use a more compact data representationand more efficient processing techniques; to take fulleradvantage of possible available previous knowledgeabout the matrix.  And it is designed as a structuredprogram, which can readily be coded by the readerin the high level or low level programming languageof his choice.  Practical tests of the method haveshown it to be a good basis for a realistic timetabling algorithm.
2788	Kimme, C.;Balard, D.;Sklansky, J.;	Finding Circles by an Array of Accumulators	
2789	Magnuski, H. S.;	A Minimal Spanning Tree Clustering Method (Algorithm R479)	
2790	Syslo, M. M.;	The Elementary Circuits of a Graph (Algorithm R459)	
2791	Hancock, T. W.;	Exact Probabilities for R x C Contingency Tables (Algorithm R434)	
2792	Skovgaard, O.;	Jacobi Polynomials (Algorithm R332)	
2793	Knight,W.;	Chi-Square Quantiles (Algorithm C451)	
2794	VanderBrug, G. J.;Minker, J.;	State-Space, Problem-Reduction, and Theorem Proving-Some Relationships	This paper suggests a bidirectional relationshipbetween state-space and problem-reductionrepresentations. It presents a formalism based on multiple-inputand multiple-output operators whichprovides a basis for viewing the two types of representationsin this manner.  A representation of thelanguage recognition problem which is based on the Cockeparsing algorithm is used as an illustration.A method for representing problems in first-order logicin such a way that the inference system employedby a resolution-based theorem prover determines whetherthe set of clauses is interpreted in the state-spacermode or in the problem-reduction mode is presented.The analogous concepts in problem-reduction andtheorem proving, and the terminology used to refer to them,are noted.  The relationship between problem-reduction,input resolution, and linear resolution is discussed.
2795	Goldman, N. M.;	Sentence Paraphrasing from a Conceptual Base	A model of natural language based on an underlyinglanguage-free representation of meaningis described.  A program based on this model is ableto produce sentence paraphrases which demonstrateunderstanding with respect to a given context.  Thisgenerator operates in conjunction with a naturallanguage analyzer and a combined memory and inference model.In generating sentences from meaning structures,the program employs both the information retrieval anddeduction capabilities of the memory model.  Themodel encompasses several diverse classes of linguisticknowledge, which include: (1) executable testsof conceptual properties stored in discrimination nets;(2) information relating conceptual to syntacticroles, stored in a word-sense dictionary, and (3) surfacegrammatical knowledge, stored in a formal grammar.
2796	Hoare, C. A. R.;	Monitors: An Operating System Structuring Concept (Corrigendum)	
2797	Young, J. W.;	A First Order Approximation to the OptimalCheckpoint Interval (Corrigendum)	
2798	Burnett, G. J.;Coffman, E. G. Jr.;	Analysis of Interleaved Memory Systems Using Blockage Buffers	A model of interleaved memory systems is presented,and the analysis of the model by MonteCarlo simulation is discussed.  The simulations investigatethe performance of various system structures,i.e. schemes for sending instruction and data requeststo the memory system.  Performance is measuredby determining the distribution of the number of memorymodules in operation during a memory cycle.An important observation from these investigations is thatseparately grouping instruction and data requestsfor memory can substantially increase the average numberof memory modules in operation during a memorycycle.  Results of the simulations and an analyticalstudy are displayed for various system structures.
2799	Hanson, R. J.;	Stably Updating Mean and Standard Deviation of Data	By considering the (sample) mean of a set ofdata as a fit to this data by a constant function,a computational method is given based on a matrix formulationand Givens transformations. The (sample)mean and standard deviation can be updated as dataaccumulates.  The procedure is numerically stableand does not require storage of the data.  Methods fordealing with weighted data and data removal arepresented.  When updating the mean and square of thestandard deviation, the process requires no squareroots.
2800	Liniger, W.;	Connections Between Accuracy and StabilityProperties of Linear Multistep Formulas	This paper is concerned with stability and accuracyof families of linear k-step formulas dependingon parameters, with particular emphasis on the numericalsolution of stiff ordinary differential equations.An upper bound, p=k, is derived for the order of accuracyof A(inf)-stable formulas.  Three criteriaare given for A(0)-stability.  It is shown that (1) forp=k, k arbitrary, A(inf)-stability implies certainnecessary conditions for A(0)-stability and for strictstability (meaning that the extraneous roots ofp(psi) satisfy |psi|<1); (2) for p=k=2,3,4,and 5, A(inf)-stability(for k=5 together with another constraint)implies strict stability; and (3) for certain one-parameterclasses of formulas with p=k=3,4,and/or 5,A(inf)-stability implies A(0)-stability.
2801	Chi Chen, T.;Ho, I. T.;	Storage-Efficient Representation of Decimal Data	Usually n decimal digits are represented by4n bits in computers.  Actually, two BCD digitscan be compressed optimally and reversibly into 7 bits,and three digits into 10 bits, by a very simplealgorithm based on the fixed-length combination of twovariable field-length encodings.  In over halfof the cases the compressed code results from the conventionalBCD code by simple removal of redundant0 bits.  A long decimal message can be subdivided intothree-digit blocks, and separately compressed;the result differs from the asymptotic minimum lengthby only 0.34 percent.  The hardware requirementis small, and the mappings can be done manually.
2802	Mills, H. D.;	The New Math of Computer Programming	Structured programming has proved to be an importantmethodology for systematic program designand development.  Structured programs are identifiedas compound function expressions in the algebraof functions. The algebraic properties of these functionexpressions permit the reformulation (expansionas well as reduction) of a nested subexpression independentlyof its environment, thus modeling whatis known as stepwise program refinement as well as programexecution.  Finally, structured programmingis characterized in terms of the selection and solutionof certain elementary equations defined in thealgebra of functions.  These solutions can be given ingeneral formulas, each involving a single parameter,which display the entire freedom availablein creating correct structured programs.
2803	Hestenes, M. R.;	Pseudoinverses and Conjugate Gradients	This paper is devoted to the study of connectionsbetween pseudoinverses of matrices and conjugategradients and conjugate direction routines.
2804	Marcus, M.;Robinson, H.;	Elementary Divisors of Tensor Products	The elementary divisors of a tensor productof linear transformations have been known for 40years.  This paper provides a short, easily accessibleproof of these results, and points out an interestingcombinatorial consequence of the proof.
2805	van der Sluis, A.;	Perturbations of Eigenvalues of Non-normal Matrices	The problem considered is to give bounds for finiteperturbations of simple and multiple eigenvaluesof nonnormal matrices, where these bounds are in termsof the eigenvalues, the departure from normality,and the Frobenius norm of the perturbation matrix, butnot in terms of the eigen system.  The bounds whichare derived are shown to be almost attainable for any set of matrices.
2806	Birkhoff, G.;	Two Hadamard Numbers for Matrices	A discussion is given of two functions of the entriesof a square matrix, both related to Hadamard'sdeterminant theorem, which have some merits as alternativesto norm-bound "condition numbers."  One (forlinear systems) is known; the other (for eigen systems) seems to be new.
2807	Peters, G.;Wilkinson, J. H.;	On the Stability of Gauss-Jordan Elimination with Pivoting	The stability of the Gauss-Jordan algorithmwith partial pivoting for the solution of generalsystems of linear equations is commonly regarded as suspect.It is shown that in many respects suspicionsare unfounded, and in general the absolute error in the solutionis strictly comparable with that correspondingto Gaussian elimination with partial pivoting plus backsubstitution.  However, when A is ill conditioned,the residual corresponding to the Gauss-Jordan solutionwill often be much greater than that correspondingto the Gaussian elimination solution.
2808	Todd, J.;	The Lemniscate Constants	The lemniscate constants, and indeed someof the methods used for actually computing them,have played an enormous part in the development ofmathematics.  An account is given here of some ofthe methods used-most of the derivations can be madeby elementary methods.  This material can be usedfor teaching purposes, and there is much relevant andinteresting historical material.  The accelerationmethods developed for the purpose of evaluatingthese constants are useful in other problems.
2809	Bauer, F. L.;	Positivity and Norms	Following some lines of joint work with A.S. Householder, the character and use of algebraicmethods in the theory of norms is demonstrated.  New resultsconcerning norms with values in an Archimedianvector lattice (not necessarily being totally ordered)are given, in particular for the generalizationof order unit norms, L-norms and M-norms.  An exampleof application to operator norms is given concerningcontraction properties of positive operators.
2810	Finerman, A.;	Professionalism in the Computing Field	The term professional means different thingsto different people; nevertheless, there are certaingeneral technical and social standards normally associatedwith a professional.  Further, the term ismore generally applied to the practitioner rather thanto the researcher.  But within the rather broaddefinition specified, the computing practitioner is,as yet, not regarded as a professional.  Each ofthe four types of institutions-academic, industry, government,and the professional society- that educate,employ, regulate, and mold the practitioner contributesto the "nonprofessional" status of the computingpractitioner.  The roles of these institutions are examined,various shortcomings are noted, and recommendedchanges are suggested.  In the last analysis, professionalstatus is not bestowed; it is earned.  However,universities and industry, specifically, can make certainimprovements to help the computing practitionerachieve professional status.
2811	Stockman, G.;Kanal, L.;Kyle, M. C.;	Structural Pattern Recognition Of Carotid PulseWaves Using A General Waveform Parsing System	A general waveform parsing system with applicationto structural pattern recognition of carotidpulse waves is described.  The carotid arterial pulsewave is of medical importance because of variationin its structure induced by arterial aging and cardiovasculardisease.  The syntax-driven waveform analysissystem has been applied with good results to these pulsewaves to detect and measure structural variations.The waveform parsing system is modeled on a compiler-compilersystem and allows the user to enter applicationspecific information as data.  It is thus generalenough to be applicable to other waveforms.
2812	Nunamaker, J. F. Jr.;Konsynski, B. R. Jr.;Ho, T.;Singer, C.;	Computer-Aided Analysis and Design of Information Systems	This paper describes the use of computer-aidedanalysis for the design and development of anintegrated financial management system by the Navy MaterialCommand Support Activity (NMCSA).  Computer-aidedanalysis consists of a set of procedures and computerprograms specifically designed to aid in the processof applications software design, computer selectionand performance evaluation.  There are four majorcomponents: Problem Statement Language, Problem StatementAnalyzer, Generator of Alternative Designs,and Performance Evaluator. The statement of requirementswas written in ADS (Accurately Defined Systems)and analyzed by a Problem Statement Analyzer for ADS.The ADS problem definition was supplemented withadditional information in order to create a completeproblem definition.  The analyzed problem statementwas translated to the form necessary for use by theSODA (Systems Optimization and Design Algorithm)program for the generation of alternative specificationsof program modules and logical database structures.
2813	Arden, B.;	The Computer Science and Engineering Research Study (COSERS)	The Computer Science and Engineering ResearchStudy (COSERS) is briefly described.  The motivation,organization, and schedule for this NSF supported studyare given.  For possible further reference, thesubject area panel chairmen and the membersof the Steering Committee are identified.
2814	Sammet, J. E.;	Roster of Programming Languages for 1974-75	
2815	Hamlet, R. G.;	High-Level Binding with Low-Level Linkers	An easy to implement scheme is described bywhich a compiler can enforce agreement betweencomplex data types in separately compiled modules.The scheme is designed to work with any existinglink editor or linking loader, no matter how deficient.Obscure run-time errors caused by inconsistentusages are forestalled by static errors detected at linking time.
2816	Maruyama, K.;Smith, S. E.;	Optimal Reorganization of Distributed Space Disk Files	In most database organizations, the cost of accessingthe database will increase due to structuralchanges caused by updates and insertions.  By reorganizingthe database,the access costs can be reduced.A basic problem is to establish the proper tradeoff betweenperformance, storage costs, and reorganizationcosts.  This paper considers the optimum points at whichto reorganize a database.  A disk file organizationwhich allows for distributed free space is described.A cost function describing the excess costs dueto physical disorganization is defined, and this functionis minimized to obtain the optimum reorganizationpoints.  Numerical examples based on the characteristicsof existing disk storage devices are given.
2817	Eswarran, K..;Gray, J..;Lorie, R..;Traiger, I. L.;	The Notions of Consistency and Predicate Locks in a Database System	In database systems, users access shared dataunder the assumption that the data satisfiescertain consistency constraints.  This paper defines theconcepts of transaction, consistency and scheduleand shows that consistency requires that a transactioncannot request new locks after releasing a lock.Then it is argued that a transaction needs to lock a logicalrather than a physical subset of the database.These subsets may be specified by predicates.  Animplementation of predicate locks which satisfiesthe consistency condition is suggested.
2818	Baskett, F.;Smith, A. J.;	Interference in Multiprocessor ComputerSystems with Interleaved Memory (Corrigendum)	
2819	Rubin, F.;	Experiments in Text File Compression	A system for the compression of data files,viewed as strings of characters, is presented.The method is general, and applies equally well toEnglish, to PL/I, or to digital data.  The systemconsists of an encoder, an analysis program, and a decoder.Two algorithms for encoding a string differslightly from earlier proposals.  The analysis program attemptsto find an optimal set of codes for representingsubstrings of the file.  Four new algorithms for thisoperation are described and compared.  Variousparameters in the algorithms are optimized to obtaina high degree of compression for sample texts.
2820	Wilcox, T. R.;Davis, A. M.;Tindall, M. H.;	The Design and Implementation of a Table Driven,Interactive Diagnostic Programming System	CAPS is a highly interactive diagnostic compiler/interpreterthat allows beginning programmersto prepare, debug, and execute fairly simple programsat a graphics display terminal.  Complete syntaxchecking and most semantic analysis is performed asthe program is entered and as it is subsequentlyedited.  Analysis is performed character by character.The most remarkable feature of CAPS is its abilityto automatically diagnose errors both at compile timeand at run time.  Errors are not automaticallycorrected.  Instead, CAPS interacts with the student to helphim find the cause of his error.  Most componentsof CAPS are table driven, both to reduce the space neededfor implementation and to increase the flexibilityof the multilingual system.  Over 500 students have usedCAPS to learn Fortran, PL/I, or Cobolin conjunctionwith a computer assisted course on introductory computer science.
2821	Ledgard, H. F.;Cave, W. C.;	Cobol Under Control	A sample set of Cobol programming standardsis offered.  These standards constrain code tobe developed in a "structured" form for both data andcontrol structures.  They do not require syntaxbeyond the existing Cobol language and in fact utilizea typical limited subset of the 1974 ANS Cobolstandard.  These standards have proved extremely valuablein practice and have reduced the cost and timeto produce and maintain large software systems that havebeen deployed in live multiple customer environments.
2822	Ross, D. T.;	Homilies for Humble Standards	Copyright 1976, Association for ComputingMachinery, Inc. General permission to republish,but not for profit, all or part of this material is grantedprovided that ACM's copyright notice is givenand that reference is made to the publication, to itsdata of issue, and to the fact that reprintingprivileges were granted by permission ofthe Association for Computing Machinery.
2823	Montanelli, R. G. Jr.;Mamrak, S. A.;	The Status of Women and Minorities in Academic Computer Science	The results of a survey concerning women andminority students and faculty in computer scienceduring the years 1971 to 1975 are presented.  Analysisof the data indicated that effective affirmativeaction programs for recruitment into graduate degreeprograms are needed to enlarge the number of womenand minorities qualified for later employment in computerscience.  Also, possible discrimination inemployment of women and minority graduate students was revealed.
2824	Duong-Kien, C.;Hoffmann, H. J.;Muth, D.;	An Improvement to Martin's Algorithm forComputation of Linear Precedence Functions	
2825	Frane, J. W.;	The BMD and BMDP Series of Statistical Computer Programs	
2826	Burtnyk, N.;Wein, M.;	Interactive Skeleton Techniques for EnhancingMotion Dynamics in Key Frame Animation	A significant increase in the capability forcontrolling motion dynamics in key frame animationis achieved through skeleton control.  This techniqueallows an animator to develop a complex motionsequence by animating a stick figure representationof an image.  This control sequence is then usedto drive an image sequence through the same movement.The simplicity of the stick figure image encouragesa high level of interaction during the design stage.Its compatibility with the basic key frame animationtechnique permits skeleton control to be applied selectivelyto only those components of a compositeimage sequence that require enhancement.
2827	Levin, J.;	A Parametric Algorithm for Drawing Picturesof Solid Objects Composed of Quadric Surfaces	An algorithm for drawing pictures of three-dimensionalobjects, with surfaces made up of patchesof quadric surfaces, is described.  The emphasis ofthis algorithm is on calculating the intersectionsof quadric surfaces. A parameterization scheme is used.Each quadric surface intersection curve (QSIC)is represented as a set of coefficients and parameterlimits.  Each value of the parameter representsat most two points, and these may easily be distinguished.This scheme can find the coordinates of pointsof even quartic (fourth-order) intersection curves, usingequations of no more than second order.  Methodsof parameterization for each type of OSIC are discussed,as well as surface bounding and hidden surfaceremoval.
2828	Clark, J. H.;	Hierarchical Geometric Models for Visible Surface Algorithms	The geometric structure inherent in the definitionof the shapes of three-dimensional objectsand environments is used not just to define their relativemotion and placement, but also to assist insolving many other problems of systems for producingpictures by computer.  By using an extension oftraditional structure information, or a geometric hierarchy,five significant improvements to currenttechniques are possible.  First, the range of complexityof an environment is greatly increased whilethe visible complexity of any given scene is kept withina fixed upper limit.  Second, a meaningful wayis provided to vary the amount of detail presented ina scene.  Third, "clipping" becomes a very fastlogarithmic search for the resolvable parts of the environmentwithin the field of view.  Fourth, frameto frame coherence and clipping define a graphical"working set," or fraction of the total structurethat should be present in primary store for immediateaccess by the visible surface algorithm.  Finally,the geometric structure suggests a recursive descent,visible surface algorithm in which the computationtime potentially grows linearly with the visible complexity of the scene.
2829	Blinn, J. F.;Newell, M. E.;	Texture and Reflection in Computer Generated Images	In 1974 Catmull developed a new algorithmfor rendering images of bivariate surface patches.This paper describes extensions of this algorithm inthe areas of texture simulation and lighting models.The parameterization of a patch defines a coordinatesystem which is used as a key for mapping patternsonto the surface.  The intensity of the pattern at eachpicture element is computed as a weighted averageof regions of the pattern definition function. The shapeand size of this weighting function are chosenusing digital signal processing theory.  The patch renderingalgorithm allows accurate computation ofthe surface normal to the patch at each picture element,permitting the simulation of the mirror reflections.The amount of light coming from a given direction ismodeled in a similar manner to the texture mappingand then added to the intensity obtained from the texturemapping.  Several examples of images synthesizedusing these new techniques are included.
2830	Severance, D. G.;Duhne, R. A.;	A Practitioner's Guide to Addressing Algorithms (Corrigendum)	
2831	Chu, W. W.;Opderbeck, H.;	Analysis of the PFF Replacement Algorithmvia a Semi-Markov Model (Corrigendum)	
2832	Wegbreit, B.;	Faster Retrieval from Context Trees (Corrigendum)	Context trees provide a convenient way ofstoring data which is to be viewed as a hierarchyof contexts.  This note presents an algorithm which improveson previous context tree retrieval algorithms.It is based on the observation that in typical uses contextchanges are infrequent relative to retrievals,so that data can be cached to speed up retrieval.  A retrievalis started from the position of the previousretrieval and auxiliary structures are built up to makethe search rapid.  Algorithms for addition anddeletion of data and for garbage collection are outlined.
2833	Deutsch, L. P.;Bobrow, D. G.;	An Efficient, Incremental, Automatic Garbage Collector	This paper describes a new way of solvingthe storage reclamation problem for a system suchas Lisp that allocates storage automatically from aheap, and does not require the programmer to giveany indication that particular items are no longer usefulor accessible.  A reference count scheme forreclaiming non-self-referential structures, and a linearizing,compacting, copying scheme to reorganizeall storage at the users discretion are proposed.  Thealgorithms are designed to work well in systemswhich use multiple levels of storage, and large virtualaddress space.  They depend on the fact thatmost cells are referenced exactly once, and that referencecounts need only be accurate when storageis about to be reclaimed.  A transaction file stores changesto reference counts, and a multiple referencetable stores the count for items which are referenced more than once.
2834	Bitner, J. R.;Ehrlich, G.;Reingold, E. M.;	Efficient Generation of the BinaryReflected Gray Code and Its Applications	Algorithms are presented to generate the n-bitbinary reflected Gray code and codewords offixed weight in that code.  Both algorithms are efficientin that the time required to generate the nextelement from the current one is constant.  Applicationsto the generation of the combinations of n thingstaken k at a time, the compositions of integers, andthe permutations of a multiset are discussed.
2835	Walter, K. G.;	Recursion Analysis for Compiler Optimization	A relatively simple method for the detectionof recursive use of procedures is presented foruse in compiler optimization.  Implementation considerationsare discussed, and a modification of thealgorithm is given to further improve optimization.This analysis can also be used to determine whatpossible subset of values could be assumed by variableswhich can only take on a relatively small discreteset of values.  The most common are parameters of variablesassuming values of label, procedure, or Pascal'senumerated type.
2836	Loui, M. C.;	Weighted Derivation Trees	The nodes of a weighted derivation tree are associatedwith weighting functions over the vocabularyof a context-free grammar.  An algorithm is presentedfor constructing the optimal derivation tree havingthe same structure as a given weighted derivation tree.In addition, the correctness of the algorithmis established.  The method may be applied to problemsinvolving probabilistic parsing or combinatorialoptimization.
2837	Yap, C. K.;	New Upper Bounds for Selection	The worst-case minimum number of comparisonscomplexity Vi(n) of the i-th selection problemis considered.  A new upper bound for Vi(n) improves thebound given by the standard Hadian-Sobel algorithmby a generalization of the Kirkpatrick-Hadian-Sobelalgorithm, and extends Kirkpatrick's method to amuch wider range of application.  This generalizationcompares favorably with a recent algorithm by Hyafil.
2838	Wadler, P. L.;	Analysis of an Algorithm for Real Time Garbage Collection	A real time garbage collection system avoidssuspending the operations of a list processorfor the long times that garbage collection normally requiresby performing garbage collection on a secondprocessor in parallel with list processing operations,or on a single processor time-shared with them.Algorithms for recovering discarded list structures inthis manner are presented and analyzed to determinesufficient conditions under which the list processor neverneeds to wait on the collector.  These techniquesare shown to require at most twice as much processingpower as regular garbage collectors, if they areused efficiently.  The average behavior of the programis shown to be very nearly equal to the worst-caseperformance, so that the sufficient conditions are alsosuitable for measuring the typical behavior ofthe algorithm.
2839	Hirschberg, D. S.;	An Insertion Technique for One-Sided Height-Balanced Trees	A restriction on height-balanced binary treesis presented.  It is seen that this restrictionreduces the extra memory requirements by half (fromtwo extra bits per node to one) and maintains fastsearch capabilities at a cost of increasedtime requirements for inserting new nodes.
2840	Harrison, M. A.;Ruzzo, W. L.;Ullman, J. D.;	Protection in Operating Systems	A model of protection mechanisms in computingsystems is presented and its appropriatenessis argued.  The "safety" problem for protection systemsunder this model is to determine in a given situationwhether a subject can acquire a particular right toan object.   In restricted cases, it can be shownthat this problem is decidable, i.e. there is an algorithmto determine whether a system in a particularconfiguration is safe.  In general, and under surprisinglyweak assumptions, it cannot be decided ifa situation is safe. Various implications of this fact are discussed.
2841	Clark, J. H.;	Designing Surfaces in 3-D	An experimental system for computer-aideddesign of free-form surfaces in three dimensionsis described. The surfaces are represented in the systemas parametric basis splines. The principal featuresof the system are: (1) the surfaces are rendered as isoparametricline drawings on a head-mounted display,and they are designed with the aid of a three-dimensional"wand," which allows 3-D movements of the pointscontrolling the shapes of the surfaces, (2) all of theinteractions with the surfaces are in real-time,and (3) the mathematical formulations used assume noknowledge of them by the user of the system.  Alsoexamined are some of the features that should be partof a practical 3-D system for designing space-forms.
2842	Tennent, R. D.;	The Denotational Semantics of Programming Languages	This paper is a tutorial introduction to thetheory of programming language semantics developedby D. Scott and C. Strachey.  The application of the theoryto formal language specification is demonstratedand other applications are surveyed. The first languageconsidered, LOOP, is very elementary and itsdefinition merely introduces the notation and methodologyof the approach.  Then the semantic conceptsof environments, stores, and continuations are introducedto model classes of programming language featuresand the underlying mathematical theory of computationdue to Scott is motivated and outlined.  Finally,the paper presents a formal definition of the language GEDANKEN.
2843	Donovan, J. J.;	Tools and Philosophy for Software Education	This paper describes a set of tools and a philosophyfor teaching software that have been foundvery useful in course at MIT over the past seven years.The tools include programs such as simulators,graders, compilers, and monitor.  These allow the instructorto augment the basic concepts with relevant,exciting, and economical student project activities.
2844	Gonnet, G. H.;	Heaps Applied to Event Driven Mechanisms	
2845	Burton, W.;	A Buddy System Variation for Disk Storage Allocation	A generalization of the buddy system for storageallocation is described. The set of permittedblock sizes {SIZE(i)}, i=0,n, must satisfy the conditionSIZE(i)=SIZE(i-1)+SIZE(i-k(i)) where k may beany meaningful integral-valued function.  This makes itpossible to force logical storage blocks to coincidewith physical storage blocks, such as tracks and cylinders.
2846	Maly, K.;	Compressed Tries	This paper presents a new data structure,called a compressed trie or C-trie, to be used ininformation retrieval systems.  It has the same underlyingm-ary tree structure as a trie, where m isa parameter of the trie, but whereas the fields of thenodes in a trie have to be large enough to holda key or at least a pointer, the fields in a C-trie areonly one bit long.  In the analysis part of thepaper it will be shown that for a collection of n keys theretrieval time, measured in terms of bit inspectionsof one key, is of the order logm(n) and the storagerequirement of the order n*(m+log2 n) bits.  Thisimprovement in storage requirements and retrieval timeis achieved at the cost of decreasing the flexibilityof the structure, and therefore updating costs are increased.First the C-trie is analyzed as a datastructure, and then several methods of its usefor relatively static databases are discussed.
2847	Fishman, G. S.;	Sampling from the Gamma Distribution on a Computer	This paper describes a method of generatinggamma variates that appears to be less costly thanWallace's recently suggested method.  For large shape parameter(a); the cost of computation is proportionalto (a), whereas Wallace's method is proportional to (a).Experimentation by Robinson and Lewis indicatesthat for small (a) the method suggested here also dominatesmethods recently suggested by Dieter andAhrens, albeit those methods dominate for large (a).  Themethod suggested here uses the rejection technique.
2848	Cheng, C.;Rabin, J.;	Synthesis of Decision Rules	Decision tables can be used as an effectivetool during an interview to record the logic ofprocesses to be automated.  The result of such an interviewis not a structure of complete decision tablesbut rather sets of decision rules.  The purpose of thispaper is to provide a procedure for synthesizingthe decision rules and thus provide an aid in developinga structure of complete decision tables.
2849	Metcalfe, R. M.;Boggs, D. R.;	Ethernet: Distributed Packet Switching for Local Computer Networks	Ethernet is a branching broadcast communicationsystem for carrying digital data packets amonglocally distributed computing stations. The packettransport mechanism provided by Ethernet has beenused to build systems which can be viewed as either localcomputer networks or loosely coupled multiprocessors.An Ethernet's shared communication facility, its Ether,is a passive broadcast medium with no centralcontrol.  Coordination of access to the Ether for packetbroadcasts is distributed among the contendingtransmitting stations using controlled statistical arbitration.Switching of packets to their destinationson the Ether is distributed among the receiving stationsusing packet address recognition.  Design principlesand implementation are described, based on experiencewith an operating Ethernet of 100 nodes along akilometer of coaxial cable.  A model for estimating performanceunder heavy loads and a packet protocolfor error controlled communication are included for completeness.
2850	King, J. C.;	Symbolic Execution and Program Testing	This paper describes the symbolic execution ofprograms.  Instead of supplying the normal inputsto a program (e.g. numbers) one supplies symbols representingarbitrary values.  The execution proceedsas in a normal execution except that values may be symbolicformulas over the input symbols.  The difficult,yet interesting issues arise during the symbolic executionof conditional branch type statements.  Aparticular system called EFFIGY which provides symbolicexecution for program testing and debugging isalso described.  It interpretively executes programs writtenin a simple PL/I style programming language.It includes many standard debugging features, the abilityto manage and to prove things about symbolicexpressions, a simple program testing manager, and a programverifier.  A brief discussion of the relationshipbetween symbolic execution and program proving is also included.
2851	Keller, R. M.;	Formal Verification of Parallel Programs	Two formal models for parallel computationare presented: an abstract conceptual model anda parallel-program model.  The former model does notdistinguish between control and data states.  Thelatter model includes the capability for the representationof an infinite set of control states by allowingthere to be arbitrarily many instruction pointers (orprocesses) executing the program.  An inductionprinciple is presented which treats the control anddata state sets on the same ground.  Through theuse of "place variables," it is observed that certaincorrectness conditions can be expressed withoutenumeration of the set of all possible control states.Examples are presented in which the inductionprinciple is used to demonstrate proofs of mutual exclusion.It is shown that assertions-oriented proofmethods are special cases of the induction principle.A special case of the assertions method, whichis called parallel place assertions, is shown to beincomplete.  A formalization of "deadlock" is thenpresented. The concept of a "norm" is introduced, whichyields an extension, to the deadlock problem,of Floyd's technique for proving termination.  Also discussedis an extension of the program model whichallows each process to have its own local variablesand permits shared global variables.  Correctnessof certain forms of implementation is also discussed.An Appendix is included which relates this workto previous work on the satisfiability of certain logical formulas.
2852	Conte, S. D.;Halstead, M. H.;	The Technology of Computer Center Management: AProposed Course for Graduate Professional Programsin Computer Science or in Information Systems	McFarlan and Nolan have made a strong case foradding a course on information systems administrationto the 13 courses proposed by the ACM Curriculum Committeeon Computer Education for Management for GraduateProfessional Programs in Information Systems.  This paperis a report on a course entitled, "The Technologyof Computer Center Management," which has been offeredat Purdue for the past four years.  The courseis suitable either for graduate professional programsin information systems or for graduate professionalprograms in computer science.
2853	Knott, G. D.;	A Numbering System for Permutations of Combinations	
2854	Steele, G. L. Jr.;	Multiprocessing Compactifying Garbage Collection (Corrigendum)	
2855	Clark, D. W.;	An Efficient List-Moving Algorithm Using Constant Workspace	An efficient algorithm is presented for movingarbitrary list structures, using no storage(apart from program variables) other than that requiredto hold the original list and the copy.  Theoriginal list is destroyed as it is moved.  No markbits are necessary, but pointers to the copy mustbe distinguishable from pointers to the original.  Thealgorithm is superior in execution speed to previousalgorithms for the same problem.  Some variationsand extensions of the algorithm are discussed.
2856	Schumacher, H.;Sevcik, K. C.;	The Synthetic Approach to Decision Table Conversion	Previous approaches to the problem of automaticallyconverting decision tables to computerprograms have been based on decomposition.  At anystage, one condition is selected for testing, andtwo smaller problems (decision tables with one lesscondition) are created.  An optimal program (withrespect to average execution time or storage space, forexample) is located only through implicit enumerationof all possible decision trees using a technique suchas branch-and-bound.  The new approach describedin this paper uses dynamic programming to synthesizean optimal decision tree from which a program canbe created.  Using this approach, the efficiency of creatingan optimal program is increased substantially,permitting generation of optimal programs for decisiontables with as many as ten to twelve conditions.
2857	Wise, D. S.;	Referencing Lists by an Edge	An edge reference into a list structure is a pairof pointers to adjacent nodes.  Such a referenceoften requires little additional space, but its use canyield efficient algorithms. For instance, a circularlink between the ends of a list is redundant if the listis always referenced by that edge, and list traversalis easier when that link is null.  Edge references alsoallow threading of nonrecursive lists, can replacesome header cells, and enhance the famousexclusive-or-trick to double-link lists
2858	Frieder, G.;Saal, H. J.;	A Process for the Determination ofAddresses in Variable Length Addressing	An algorithm is presented for the assignmentof instruction addresses and formats under thefollowing conditions: (1) the length of the instruction variesas a function of the distance of the instructionfrom its target; (2) there exists an optimality criterionwhich implies some preferential choices subjectto the addressing constraints.  This may be, for example,achieving the smallest number of long instructions,in which case the total code length is minimized, orminimizing the assigned address of a specified pointin the program.  The algorithm is suitable for arbitraryprogram structure and a choice of optimizationcriteria.
2859	Baskett, F.;Smith, A. J.;	Interference in Multiprocessor Computer Systems with Interleaved Memory	This paper analyzes the memory interferencecaused by several processors simultaneously usingseveral memory modules.  Exect results are computed fora simple model of such a system.   The limitingvalue is derived for the relative degree of memory interferenceas the system size increases.  The modelof the limiting behavior of the system yields approximateresults for the simple model and also suggeststhat the results are valid for a much larger class of models,including those more nearly like real systemsthat the simple model are tested against some measurementsof program behavior and simulations of systemsusing memory references from real programs.  The modelresults provide a good indication of the performancethat should be expected from real system of this type.
2860	Severance, D.;Duhne, R.;	A Practitioner's Guide To Addressing Algorithms	This paper consolidates a number of popularrules of thumb which have been suggested for thedesign of record addressing algorithms, and discussesthe applicability of these rules to large commercialdatabases.  Guidelines for selecting identifier transformations,overflow techniques, loading factors,bucket sizes, and loading order and considered.  Particularattention is focused on the reasonablenessof common heuristics for determining primary or secondarybucket sizes. A mathematical model which explicitlyconsiders storage device characteristics and time/spacecost tradeoffs is used to analyze the effectof design parameters on overall system costs.  Aspecific design example is presented and solved.
2861	Taulbee, O. E.;Conte, S. D.;	Production and Employment of Ph.D.'s in Computer Science	
2862	Chu, W. W.;Opderbeck, H.;	Analysis of the PFF Replacement Algorithm via a Semi-Markov Model	An analytical model is presented to estimatethe performance of the Page Fault Frequency (PFF)replacement algorithm.  In this model, program behavioris represented by the LRU stack distance modeland the PFF replacement algorithm is represented by a semi-Markovmodel.  Using these models, such parametersas the inter-page-fault interval distribution, theprobability of the number of distinct pages beingreferenced during an inter-page-fault interval, etc. areable to be analytically determined.  Using thesemodels to evaluate these parameter values permits studyof the performance of the replacement algorithmby simulating the page fault events rather than everypage reference event.  This significantly reducesthe required computation time in estimatingthe performance of the PFF algorithm.
2863	Prieve, B. G.;Fabry, R. S.;	VMIN-An Optimal Variable-Space Page Replacement Algorithm	A criterion for comparing variable space pagereplacement algorithms is presented.  An optimumpage replacement algorithm, called VMIN, is described andshown to be optimum with respect to this criterion.The results of simulating VMIN, Denning's working set,and the page partitioning replacement algorithmson five virtual memory programs are presented to demonstratethe improvement possible over the knownrealizable variable space algorithms.
2864	Madison, A. W.;Batson, A. P.;	Characteristics of Program Localities	The term "locality" has been used to denote thatsubset of a program's segments which are referencedduring a particular phase of its execution.  A program'sbehavior can be characterized in terms of itsresidence in localities of various sizes and lifetimes,and the transitions between these localities.In this paper the concept of a locality is made more explicitthrough a formal definition of what constitutesa phase of localized reference behavior, and by a correspondingmechanism for the detection of localitiesin actual reference strings.  This definition providesfor the existence of a hierarchy of localitiesat any given time, and the reasonableness of the definitionis supported by examples taken from actualprograms.  Empirical data from a sample of productionAlgol 60 programs is used to display distributionsof locality sizes and lifetimes, and these results arediscussed in terms of their implications for themodeling of program behavior and memory management in virtual memory systems.
2865	Owicki, S.;Gries, D.;	Verifying Properties of Parallel Programs: An Axiomatic Approach	An axiomatic method for proving a numberof properties of parallel programs is presented.Hoare has given a set of axioms for partial correctness,but they are not strong enough in most cases.This paper defines a more powerful deductive system whichis in some sense complete for partial correctness.A crucial axiom provides for the use of auxiliary variables,which are added to a parallel program asan aid to proving it correct.  The information in a partialcorrectness proof can be used to prove suchproperties as mutual exclusion, freedom from deadlock,and program termination.  Techniques for verifyingthese properties are presented and illustrated byapplication to the dining philosophers problem.
2866	Howard, J.H.;	Proving Monitors	Interesting scheduling and sequential propertiesof monitors can be proved by using state variableswhich record the monitor's history and by defining extendedproof rules for their wait and signal operations.These two techniques are defined, discussed, and appliedto examples to prove properties such as freedomfrom indefinitely repeated overtaking or unnecessary waitingupper bounds on queue lengths, and historicalbehavior.
2867	Habermann,A. N.;Flon, L.;Cooprider, L.;	Modularization and Hierarchy in a Family of Operating Systems	This paper describes the design philosophyused in the construction of a family of operatingsystems. It is shown that the concepts of module andlevel do not coincide in a hierarchy of functions.Family members can share much software as a resultof the implementation of run-time modules at thelowest system level.
2868	Lampson, B. W.;Sturgis, H. E.;	Reflections on an Operating System Design	The main features of a general purpose multiaccessoperating system developed for the CDC 6400at Berkeley are presented, and its good and bad points arediscussed as they appear in retrospect.  Distinctivefeatures of the design were the use of capabilitiesfor protection, and the organization of the systeminto a sequence of layers, each building on the facilitiesprovided by earlier ones and protecting itselffrom the malfunctions of later ones. There were seriousproblems in maintaining the protection betweenlayers when levels were added to the memory hierarchy;these problems are discussed and a new solutionis described.
2869	Millen, J. K.;	Security Kernel Validation in Practice	A security kernel is a software and hardwaremechanism that enforces access controls withina computer system. The correctness of a security kernelon a PDP-11/45 is being proved.  This paper describesthe technique used to carry out the first step of theproof: validating a formal specification of theprogram with respect to a axioms for a secure system.
2870	Denning, D. E.;	A Lattice Model of Secure Information Flow	This paper investigates mechanisms that guaranteesecure information flow in a computer system.These mechanisms are examined within a mathematical frameworksuitable for formulating the requirementsof secure information flow among security classes. Thecentral component of the model is a lattice structurederived from the security classes and justified by the semanticsof information flow.  The lattice propertiespermit concise formulations of the security requirementsof different existing systems and facilitatethe construction of mechanisms that enforce security.The model provides a unifying view of all systemsthat restrict information flow, enables a classificationof them according to security objectives, andsuggests some new approaches.  It also leads to the constructionof automatic program certification mechanismsfor verifying the secure flow of information through a program.
2871	Katz, S.;Manna, Z.;	Logical Analysis of Programs	Most present systems for verification of computerprograms are incomplete in that intermediateinductive assertions must be provided manually by theuser, termination is not proven, and incorrectprograms are not treated.  As a unified solution tothese problems, this paper suggests conducting alogical analysis of programs by using invariants whichexpress what is actually occurring in the program.The first part of the paper is devoted to techniquesfor the automatic generation of invariants.  Thesecond part provides criteria for using the invariantsto check simultaneously for correctness (includingtermination) or incorrectness.  A third part examinesthe implications of the approach for the automaticdiagnosis and correction of logical errors.
2872	Fagin, R.;	A Counterintuitive Example of Computer Paging (Corrigendum)	
2873	Raymond, J.;	LG: A Language for Analytic Geometry	A conversational programming language for analyticgeometry is described, together with someaspects of its implementation.  The language allowsthe flexible definition of geometric objects andelements, computes their parameters, and displays the results.It also provides the capability of specifyinga geometric figure via a collection of parameters anddisplaying various loci corresponding to theseparameters. A third characteristic consists of the possibilityof using this language to design otheruser oriented languages.  LG has been specifically designedfor use by nonprogrammers; it is easy tolearn and very close to the natural language used in geometry.
2874	Lientz, B. P.;	A Comparative Evaluation of Versions of BASIC	From its inception, The BASIC language hasgrown in terms of its usage, scope of usage, andits features.  This article compares ten of the currentversions of BASIC with each other, with two earlierversions, and with the proposed standard for minimalBASIC. The comparison is arranged by the featuresof the versions and by computational comparisonof computation and times and processing costs.
2875	Smoot, O. R.;	Development of an International Systemfor Legal Protection of Computer Programs	
2876	Minsky, N.;	Intentional Resolution of Privacy Protection in Database Systems	Traditionally, privacy protection in databasesystems is understood to be the control overwhat information a given user can get from a database.This paper is concerned with another, independent,dimension of privacy protection, the control over whata user is allowed to do with a piece of informationsupplied to him by the database.  The ability to conditionthe supply of information on its intendeduse is called here "intentional resolution" of privacyprotection.  The practical importance of intentionalresolution is demonstrated by several examples, and its realizationis discussed.  It is shown that intentionalresolution can be achieved, but that it involves a radicalchange from the traditional approach to theprocess of user-database interaction.  In particular,it appears to be necessary for the database toimpose a certain amount of control over the internalbehavior of users' programs which interact withit.  A model for user-database interactionwhich admits such a control is developed.
2877	Allen, J. E.;Cocke, J.;	A Program Data Flow Analysis Procedure	The global data relationships in a programcan be exposed and codified by the static analysismethods described in this paper.  A procedure is givenwhich determines all the definitions which canpossibly "reach" each node of the control flow graphof the program and all the definitions that are"live" on each edge of the graph.  The procedure usesan "interval" ordered edge listing data structureand handles reducible and irreducible graphs indistinguishably.
2878	Babad, J. M.;Modiano, M. M.;	Joining Policies in a Multipriority Multiclass Batch Computer System	Consider a multipriority batch computer systemwhich users from several different classes mayjoin, its toll, service, and waiting charges.  Such asystem is formulated here as a semi-Markov decisionprocess, in which the aim of arriving users is to minimizetheir expected loss.  The optimal joiningpolicy is one of arriving users who may join the systemat some of its queues is a control limit policy,with a single control number for any possible queueand the user's class; a newly arriving user willjoin a queue that is not filled up to the control numbercorresponding to this queue and the user's class.In this paper control numbers, as well as lower and upperbounds for the control numbers and the capacitiesof the system's queues, are derived.
2879	Newell, A.;Simon, H. A.;	Computer Science as Empirical Inquiry: Symbols and Search	
2880	Artzy, E.;Hinds, J. A.;Saal, H. J.;	A Fast Division Technique for Constant Divisors	A fast algorithm for division by constant divisorsis presented.  The method has proved veryuseful implemented as microcode ona binary machine,and can be adapted directly into hardware.  Themathematical foundations of the algorithm are presentedas well as some performance measures.
2881	Fagin, R.;	A Counterintuitive Example of Computer Paging	A counterexample is exhibited to a natural conjectureconcerning the optimal way to group recordsinto pages in the independent reference model of computerpaging (an organization is said to be optimalif the "least recently used" miss ratio is minimized).
2882	Siler, K. F.;	A Stochastic Evaluation Model for DatabaseOrganization in Data Retrieval Systems	Experimental work in the valuation of largescale data retrieval systems has been scarce dueto its difficulty and prohibitive cost. This paperdiscusses a simulation model of a data retrievalsystem which has the effect of significantly reducingthe cost of experimentation and enabling researchnever attempted before.  The model is designed to estimatethe retrieval workload of alternative dataretrieval systems.  These data retrieval systems canbe organized under several database organizations,including inverted list, threaded list, and cellularlist organizations and hybrid combinations of thesesystems.  Effectiveness of the methodology is demonstratedby using the model to study the effect ofdatabase organizations in data retrieval systems.  In particular,the impact of query complexity is analyzed.
2883	Martelli, A.;	An Application of Heuristic Search Methods to Edge and Contour Detection	This paper presents a method for detecting edgesand contours in noisy pictures.  The propertiesof an edge are embedded in a figure of merit and the edgedetection problem becomes the problem of minimizingthe given figure of merit.  This problem can be representedas a shortest path problem on a graph andcan be solved using well-known graph search algorithms.The relations between this representation ofthe minimization problem and a dynamic programming approachare discussed, showing that the graph searchmethod can lead to substantial improvements in computingtime.  Moreover, if heuristic search methodsare used, the computing time will depend on the amountof noise in the picture.  Some experimental resultsare given; these show how various information about theshape of the contour of an object can be embeddedin the figure of merit, thus allowing the extractionof contours from noisy picture and the separationof touching objects.
2884	Ives, F. M.;	Permutation Enumeration: Four New Permutation Algorithms	Classical permutation enumeration algorithms encounterspecial cases requiring additional computationevery nth permutation when generating the n! permutationson n marks.  Four new algorithms have the attributethat special cases occur every n(n-1)permutations.Two of the algorithms produce the next permutationwith a single exchange of two marks.  The other two algorithmsinfrequently exchange more than two marks,but the rules for generating the next permutation arevery simple.  Performance tests which have countedexecution of assignment statements, comparisons, arithmeticoperations, and subscripted array referenceshave shown superiority of the new algorithms compared toBoothroyd's implementation of M. B. Well's algorithmand Ehrlich's implementation of the Johnson-Trotter algorithm.
2885	Rivest, R.;	On Self-Organizing Sequential Search Heuristics	This paper examines a class of heuristics formaintaining a sequential list in approximatelyoptimal order with respect to the average time requiredto search for a specified element, assuming thateach element is searched for with a fixed probabilityindependent of previous searches performed.  The"move to front" and "transposition" heuristics are shownto be optimal to within a constant factor, andthe transposition rule is shown to be the more efficientof the two. Empirical evidence suggests thattransposition is in fact optimal for any distribution of search probabilities.
2886	Bochmann, G. V.;	Semantic Evaluation from Left to Right	This paper describes attribute grammars and theiruse for the definition of programming languagesand compilers; a formal definition of attribute grammarsand a discussion of some of its important aspectsare included. The paper concentrates on the evaluationof semantic attributes in a few passes from leftto right over the derivation tree of a program.  Acondition for an attribute grammar is given whichassures that the semantics of any program can be evaluatedin a single pass over the derivation tree,and an algorithm is discussed which decides how manypasses from left to right are in general necessary,given the attribute grammar. These notions are explainedin terms of an example grammar which describesthe scope rules of Algol 60.  Practical questions, suchas the relative efficiency of different evaluationschemes, and the ease of adapting the attribute grammarof a given programming language to the left-to-rightevaluation scheme are discussed.
2887	Litecky, C. R.;Davis, G. B.;	A Study of Errors, Error-Proneness, and Error Diagnosis in Cobol	This paper provides data on Cobol error frequencyfor correction of errors in student-orientedcompilers, improvement of teaching, and changes in programminglanguage.  Cobol was studied because ofeconomic importance, widespread usage, possible error-includingdesign, and lack of research.  The typesof errors were identified in a pilot study; then, usingthe 132 error types found, 1,777 errors wereclassified in 1,4000 runs of 73 Cobol students.  Errordensity was high: 20 percent of the types contained80 percent of the total frequency, which implies highpotential effectiveness for software based correctionof Cobol.  Surprisingly, only four high-frequency errorswere error-prone, which implies minimal errorinducing design. 80 percent of Cobol misspellings were classifiablein the four error categories of previousresearchers, which implies that Cobol misspellingsare correctable by existent algorithms.  Reservedword usage was not error-prone, which implies minimalinterference with usage of reserved words.  Over80 percent of error diagnosis was found to be inaccurate.Such feedback is not optimal for users, particularlyfor the learning user of Cobol.
2888	Florentin, J. J.;	Information Reference Coding	Items in business systems have to be identifiedby reference codes, which can later be usedas data codes and file keys in an associated data processingsystem.  In business systems associatedwith large collections of integrated files (database)it is vital to assign codes in a methodical wayso as to control future extension and changes while maintainingcorrect program action. The principlesof methodical coding are discussed, and the way inwhich logical connections between data items mustbe reflected in the reference code framework is shownthrough a set-theoretic information model.
2889	Karlton, P. L.;Fuller, S. H.;Scroggs, R. E.;Kaehler, E. B.;	Performance of Height-Balanced Trees	This paper presents the results of simulationsthat investigate the performance of height-balanced(HB[k]) trees.  It is shown that the only statisticof HB[1] trees (AVL trees) that is a function ofthe size of the tree is the time to search for an itemin the tree.  For sufficiently large trees, theexecution times of all procedures for maintaining HB[1]trees are independent of the size of the tree.In particular, an average of .465 restructures are requiredper insertion, with an average of 2.78 nodesrevisited to restore the HB[1] property; an average of.214 restructures are required per deletion, withan average of 1.91 nodes revisited to restore the HB[1]property.  Moreover,the execution times of proceduresfor maintaining HB[k] trees, for k>1, are also independentof the size of the tree except for the averagenumber of nodes revisited on a delete operation inorder to restore the HB[k] property on trace back.The cost of maintaining HB[k] trees drops sharply as theallowable imbalance (k) increases.  Both analyticaland experimental results that show the cost of maintainingHB[k] trees as a function of k are discussed.
2890	Agnew, C. E.;	On Quadratic Adaptive Routing Algorithms	Two analytic models of a store-and-forward communicationsnetwork are constructed, one to findthe optimal message routing and the other to illustratethe equilibrium (stationary state) maintainedby an adaptive routing algorithm.  These models show thatadaptive routing does not satisfy the necessaryconditions for an optimal routing,  Adaptive routing tendsto overuse the direct path and underuse alternateroutes because it does not consider the impact of itscurrent routing decision on the future state ofthe network.  The form of the optimality conditions suggeststhat a modification of the adaptive algorithmwill result in optimality.  The modification requiresthe substitution of a quadratic bias term insteadof a linear one in the routing table maintained at eachnetwork node.  Simulation results are presentedwhich confirm the theoretical analysis for a simple network.
2891	Wilhelm, N. C.;	An Anomaly in Disk Scheduling: A Comparison ofFCFS and SSTF Seek Scheduling Using an EmpiricalModel for Disk Accesses	A model for disk accesses based on publishedmeasurements is developed.  The model is usedto show that under highly probable conditions, FCFSseek scheduling is superior to SSTF scheduling inthe sense of having a lower mean queue length.  A simpleexample of an arrival sequence illustrationthis anomaly is presented.
2892	Kleinrock, L.;Naylor, W. E.;Opderbeck, H.;	A Study of Line Overhead in the Arpanet	The form, extent, and effect of the communication lineoverhead in the ARPANET are considered.The source of this over head is separated into variouslevels of protocol hierarchy and the characteristicsof each level are summarized.  Then the line efficiencyfor various models of system use is studied.Some measurements of line efficiency for the ARPANET arepresented and by extrapolation these measurementsare used to anticipate overhead in a heavily loaded network.Similar results are derived for a recentlyproposed network protocol and compared with those for the current system.
2893	Danziger, J. N.;Dutton, W. H.;	Computers as an Innovation in American Local Governments	Computers and electronic data processing area major technological innovation in the operationsof American local government. This paper establishes thatthere is substantial variation among the largerlocal governments in the rate at which they adopt computertechnology, in the level of financial supportthey provide for EDP, and in the extensiveness and sophisticationof their automated applications.  Thecentral question addressed is: What might explain thedifferences between governments in the extent towhich they adopt and use computers?  Hypotheses aretested for several streams of explanatory factors,using data from more than 500 city and county governments.The findings identify certain local governmentmilieus which are particularly conducive to higher levelsof computer innovation.  Somewhat unexpectedfindings reveal the significant impact of the distributionof control over EDP decisions and the dominantpolitical values within the government. Other importantfactors include the measured need for computerapplications and the presence of external funding supportfor computing.  Finally, the paper suggestsa framework for identifying the key determinantsof other technological innovations.
2894	Adrams, M. D.;	A Methodology for Interactive Computer Service Measurement	A measurement methodology applicable to in teractivecomputer service is described.  Its primarypurpose is to enable external, user-oriented assessmentof computer performance, instead of the morefrequently used in ternal system measurement techniques.The NBS Network Measurement System is employedas the external measurement tool.  Example data havebeen collected and analyzed.  A demonstration ofthe methodology, leading to a pragmatic figure-of-meritevaluation of results, is included.
2895	Greif, I.;	A Language for Formal Problem Specification	A language for specifying the in tended behaviorof communicating parallel processes is described.The specifications are constrain ts on the order in whichevents of a computation can occur.  The languageis used to write specifications of the readers/writersproblem and the writer priority of the secondreaders/writers problem.
2896	Gries, D.;	An Exercise in Proving Parallel Programs Correct	A parallel program, Dijkstra's on-the-fly garbagecollector, is proved correct using a proofmethod developed by Owicki.  The fine degree of in terleavingin this program makes it especially difficultto understand, and complicates the proof greatly.  Difficultieswith proving such parallel programs correctare discussed.
2897	Carter, J. L.;	A Case Study of a New Code Generation Technique for Compilers	Recent developments in optimizing techniqueshave allowed a new design for compilers to emerge.Such a compiler translates the parsed source code intolower level code by a sequence of steps.  Eachstep expands higher level statements into blocks oflower level code and then performs optimizationson the result.  Each statement has only one possibleexpansion-the task of tailoring this code to takeadvantage of any special cases is done by the optimizations.This paper provides evidence that thisstrategy can indeed result in good object code.  Thetraditionally difficult PL/I concatenate statementwas investigated as a detailed example.  A set of fairlysimple optimizations was identified which allowthe compiler to produce good code. More elaborate optimizationscan further improve the object code.For most contexts of the concatenate statement, the codeproduced by a compiler using the expansion-optimizationstrategy described above compares favorably with thecode produced by a conventional PL/I optimizingcompiler.
2898	Kessels, J. L. W.;	A Conceptual Framework for a Nonprocedural Programming Language	A sequential programming language forces theprogrammer to prescribe explicitly the order inwhich the operations in his program have to be executed,even if the order is not relevant to the solutionof his problem.  The requirement to indicate irrelevantsequencing can be removed if the language providesfacilities for specifying a task in a nonproceduralmanner.  In general, a program specified in thisway will allow concurrent evaluation.  This paper describesa conceptual framework for a high level programminglanguage providing both nonprocedural and sequentialfacilities.  Within a program, nonprocedural andsequential program modules may be nested freely.
2899	Lopez, A. A.;Raymond, R.;Tardiff, R.;	A Survey of Computer Science Offerings In Small Liberal Arts Colleges.	Recent curricular development in computer sciencetogether with student in terest in pursuingtopics in computer science beyond the usual programmingcourses have encouraged small liberal arts collegesto expand their offerings.  This paper summarizes theresults of a survey taken to determine the typeof computer science programs being offered in thesecolleges.  The results indicate that over half ofthese colleges either have no computer scienceprogram or offer only programming courses.
2900	Grapa, E.;Belford, G. G.;	Some Theorems to Aid in Solving the File Allocation Problem	The file allocation problem-i.e. the problemof finding the optimal set of network sites atwhich to locate copies of a file-is known to be, in general,polynomial complete.  Heuristics and otheraids to finding optimal, or near-optimal, solutions aretherefore much needed.  In this paper we presentthree theorems which can be applied a priori to indicatethat certain sites should (or should not) beincluded in an optimal allocation.
2901	Blasgen, M. W.;Casey, R. G.;Eswaran, K. P.;	An Encoding Method for Multifield Sorting and Indexing	Sequences of character strings with an orderrelation imposed between sequences are considered.An encoding scheme is described which produces a single,order-preserving string from a sequence ofstrings.  The original sequence can be recovered fromthe encoded string, and one sequence of stringsprecedes another if and only if the encoding of the firstprecedes the encoding of the second.  The stringsmay be variable length, without a maximum length restriction,and no symbols need be reserved for controlpurposes.  Hence any symbol may occur in any string.  Thescheme is useful for multifield sorting, multifieldindexing, and other applications where orderingon more than one field is important.
2902	Nielsen, N. R.;	Dynamic Memory Allocation in Computer Simulation	This paper investigates the performance of35 dynamic memory allocation algorithms when usedto service simulation programs as represented by 18test cases.  Algorithm performance was measured interms of processing time, memory usage, and external memoryfragmentation.  Algorithms main taining separatefree space lists for each size of memory block usedtended to perform quite well compared with otheralgorithms.  Simple algorithms operating on memory orderedlists (without any free list) performed surprisinglywell.  Algorithms employing power-of-two block sizeshad favorable processing requirements but generallyunfavorable memory usage.  Algorithms employing LIFO, FIFO,or memory ordered free lists generally performedpoorly compared with others.
2903	Bird, R. S.;	Improving Programs by the Introduction of Recursion	A new technique of program transformation,called "recursion in troduction," is described andapplied to two algorithms which solve pattern matching problems.By using recursion in troduction, algorithmswhich manipulate a stack are first translated intorecursive algorithms in which no stack operationsoccur.  These algorithms are then subjected to a secondtransformation, a method of recursion eliminationcalled "tabulation," to produce programs with a veryefficient running time.  In particular, it is shownhow the fast linear pattern matching algorithm of Knuth,Morris, and Pratt can be derived in a few stepsfrom a simple nonlinear stack algorithm.
2904	Cocke, J.;	An Algorithm for Reduction of Operator Strength	A simple algorithm which uses an indexed temporarytable to perform reduction of operator strengthin strongly connected regions is presented.  Several extensions,including linear function test replacement,are discussed.  These algorithms should fit well into anintegrated package of local optimization algorithms.
2905	Sprugnoli, R.;	Perfect Hashing Functions: A SingleProbe Retrieving Method for Static Sets	A refinement of hashing which allows retrievalof an item in a static table with a single probeis considered.  Given a set I of identifiers, two methodsare presented for building, in a mechanicalway, perfect hashing functions, i.e. functions transformingthe elements of I into unique addresses.The first method, the "quotient reduction" method, isshown to be complete in the sense that for everyset I the smallest table in which the elements of Ican be stored and from which they can be retrievedby using a perfect hashing function constructed by thismethod can be found.  However, for nonuniformlydistributed sets, this method can give rather sparse tables.The second method, the "remainder reduction"method, is not complete in the above sense, but it seemsto give minimal (or almost minimal) tables forevery kind of set.  The two techniques are applicabledirectly to small sets.  Some methods to extendthese results to larger sets are also presented.  A roughcomparison with ordinary hashing is given whichshows that this method can be used convenientlyin several practical applications.
2906	Hammer, M.;owe, W. G.;Kruskal, V. J.;Wladawsky, I.;	A Very High Level Programming Language for Data Processing Applications	Application development today is too labor-in tensive.In recent years, very high-level languageshave been increasingly explored as a solution to thisproblem.  The Business Definition Language (BDL)is such a language, one aimed at business data processingproblems.  The concepts in BDL mimic thosewhich have evolved through the years in businesses usingmanual methods.  This results in three differentsublanguages or components: one for defining the businessforms, one for describing the business organization,and one for writing calculations.
2907	Manna, Z.;Shamir, A.;	The Optimal Approach to Recursive Programs	The classical fixed poin t approach toward recursiveprograms suggests choosing the "least definedfixed poin t" as the most appropriate solution to a recursiveprogram.  A new approach is described whichin troduction an " optimal fixed point," which, in contrastto the least defined fixed poin t, embodies themaximal amount of valuable information embedded in theprogram.  The practical implications of this approachare discussed and techniques for proving propertiesof optimal fixed poin t are given.  The presentationis informal, with emphasis on examples.
2908	Roy, M. K.;	A Note On Reflection-Free Permutation Enumeration	
2909	Wirth, N.;	What Can We Do about the Unnecessary Diversityof Notation for Syntactic Definitions?	
2910	Stockman, G. C.;	Equivalence of Hough Curve Detection to Template Matching	
2911	Shore, J. E.;	Anomalous Behavior of the Fifty-PercentRule in Dynamic Memory Allocation	This paper reports simulation data showingthat, in dynamic memory allocation, the averagefree-to-allocated-block ratio can differ considerablyand in both directions from the predictions ofthe 50 percent rule.  A new derivation is given, and itis shown that previous derivations make an assumptionthat may be violated frequently.  On the basis of the simulationdata and the derivation, it is hypothesizedthat the anomalous behavior results from the combinedeffects of systematic placement and the statisticsof the release process.  Additional simulations supportthis hypothesis.  Systematic placement, whichrefers to the natural convention of always allocatingstorage requests against the same end of the freeblock selected by the allocation strategy, tends toorder blocks within contiguous groups according totheir allocation time.  The degree of anomalous behaviordepends on the extent to which allocated blocksare released in the order of their allocation.  Fornon-Markovian release processes, the extent of thecorrelation between allocation order and release ordervaries approximately inversely with the coefficientof variation of the memory residence time distribution.The simulations show that allocation efficiencydepends strongly on the residence time distribution; efficiencydecreases as the distribution's coefficientof variation increases.  Some practical implications are briefly discussed.
2912	Lamport, L.;	Concurrent Reading and Writing	The problem of sharing data among asynchronousprocess is considered.  It is assumed that onlyone process at a time can modify the data, but concurrentreading and writing is permitted.  Two generaltheorems are proved, and some algorithms are presentedto illustrate their use.  These include a solutionto the general problem in which a read is repeated ifit might have obtained an incorrect result, andtwo techniques for transmitting messages between processes.These solutions do not assume any synchronizingmechanism other than data which can be writtenby one process and read by other processes.
2913	Crow, F. C.;	The Aliasing Problem in Computer-Generated Shaded Images	Certain defects, such as jagged edges anddisappearing detail, have long been an annoyancein digitally generated shaded images.  Although increasingthe resolution or defocusing the display canattenuate them, an understanding of these defects leadsto more effective methods.  This paper explainsthe observed defects in terms of the aliasing phenomenoninherent in sampled signals and discusses prefilteringas a recognized cure.  A method for evaluating filtersis presented, the application of prefilteringto hidden-surface algorithms is discussed, and an implementationof a filtering tiler is shown accompaniedby examples of its effectiveness.
2914	Turner, R.;Strecker, B.;	Use of the LRU Stack Depth Distributionfor Simulation of Paging Behavior	Two families of probability distributions wereneeded for use by a virtual memory simulationmodel: headway between page fault distributions, andworking set size distributions.  All members ofboth families can be derived from the LRU stack depth distribution.Simple expressions for the computationof both kinds of distributions are given.  Finally, examplesare given of both families of distributionsas computed from a published stack depth distribution.
2915	Lee, J. A. N.;	Considerations for Future Programming Language Standards Activities	This paper reviews the current state of programminglanguage standards activities with respectto the anomalies which exist between the various publishedand proposed standards for Fortran, Cobol,PL/I, and Basic.  Proposals are made for the inclusionof formalisms within future standards and theextension of the standards to include additional itemssuch as error conditions and documentation.
2916	Boyer, R. S.;	A Fast String Searching Algorithm	An algorithm is presented that searches forthe location, "i," of the first occurrence of acharacter string, "pat," in another string, "string."During the search operation, the characters ofpat are matched starting with the last character ofpat.  The information gained by starting the matchat the end of the pattern often allows the algorithmto proceed in large jumps through the text beingsearched.  Thus the algorithm has the unusual property that,in most cases, not all of the first i charactersof string are inspected.  The number of characters actuallyinspected (on the average) decreases as afunction of the length of pat.  For a random Englishpattern of length 5, the algorithm will typicallyinspect i/4 characters of string before finding a match ati.  Furthermore, the algorithm has been implementedso that (on the average) fewer than i+patlen machineinstructions are executed.  These conclusions aresupported with empirical evidence and a theoreticalanalysis of the average behavior of the algorithm.The worst case behavior of the algorithm is linear ini+patlen, assuming the availability of array spacefor tables linear in patlen plus the size of the alphabet.
2917	Schneider, B. R. Jr.;Watts, R. M.;	SITAR: An Interactive Text ProcessingSystem for Small Computers (Corrigendum)	
2918	Smith, A. J.;	Multiprocessor Memory Organization and Memory Interference	The structure of shared memory in a multiprocessorcomputer system is examined with particularattention to nonin terleaved memory.  Alternative memoryorganizations are compared and it is shown thata home memory organization, in which each processoris associated with one or more memories in whichits address space is concentrated, is quite effective inreducing memory in terference.  Home memory organizationis shown to be particularly suited to certain specializedcomputation problems as well as to possessadvantages in terms of in terference and reliability forgeneral purpose computation.  Results for in terleavedmemory are drawn from previous work and are used forcomparison.  Trace-driven simulations are used toverify the conclusions of the analysis.
2919	Ivie, E. L.;	The Programmer's Workbench-A Machine for Software Development	On almost all software development projects theassumption is made that the program developmentfunction will be done on the same machine on which theeventual system will run.  It is only when thisproduction machine is unavailable or when its programmingenvironment is totally inadequate that alternativesare considered.  In this paper it is suggested thatthere are many other situations where it would beadvantageous to separate the program development andmain tenance function onto a specialized computerwhich is dedicated to that purpose.  Such a computeris here called a Programmer's Workbench.  The fourbasic sections of the paper in troduce the subject,outlinethe general concept, discuss areas where suchan approach may prove beneficial, and describean operational system utilizing this concept.
2920	Devillers, R.;	Game Interpretation of the Deadlock Avoidance Problem	The deadlock avoidance problem may be definedinformally as the determination, from some apriori information about the processes, resources, operatingsystem, etc., of the "safe situations" whichmay be realized without endangering the smooth runningof the system.  When each process specifies itsfuture needs by a flowchart of need-defined steps, a globalapproach to the phenomenon and its in terpretationas a game between the operating system and the processesallows formalization of risk and safety concepts.The bipartite graph representation of this game maythen be used to construct explicitly the set of safestates and to study their properties.
2921	LaLonde, W. R.;	Regular Right Part Grammars and Their Parsers	This paper in troduces an alternative to context-freegrammars called regular right part (RRP)grammars, which resemble PASCAL syntax diagrams.  Formally,RRP grammars have production right parts,which are nondeterministic finite state machines (FSMs),and, as a special case, regular expressions,since these can be converted to FSMs.  RRP grammarsdescribe the syntax of programming languages moreconcisely and more understandably than is possible withCF grammars.  Also in troduced is a class of parsers,RRP LR(m, k) parsers, which includes the CF LR(k) parsersand provides the same advantages.  Informally,an RRP LR(m, k) parser can determine the right end ofeach handle by considering at most k symbols tothe right of the handle and the left end, after theright end has been found, by considering at mostm symbols to the left of the handle.  A mechanism fordetermining the left end is required because thereis no bound on the length of the handle.
2922	Montangero, C.;Pacini, G.;Turini, F.;	Two-Level Control Structure for Nondeterministic Programming	The basic ideas of nondeterministic programmingare critically reconsidered to single out aproper attitude and programming style for language allowingdirect control of nondeterministic features.The proposed attitude aims at retaining the purity ofthe nondeterministic formulation of search processeson one level (the attempt level), deferring the coordinationof problem solving efforts to another (thechoice level).  The feasibility of recognizing these twolevels is discussed, stressing that the structureto be managed at the choice level is a free of contexts.The leaves are computational environments,each holding an alternative under inspection, whilethe other nodes are associated with choice poin ts.According to the proposed programming style, a generativefunction is associated with each choice poin t,which expresses the desired choice strategy. The mainadvantage on this approach is the localizationof the search strategies: Each nonterminal node of thetree keeps track of the state of the computationas it was when the choice poin t was last interrogated,holding at the same time the strategy to coordinatethe available alternatives.  Examples are given interm of ND-Lisp, an extension of Lisp designed andimplemented according to these guidelines.
2923	Rosen, B. K.;	High-Level Data Flow Analysis	In contrast to the predominant use of low-levelin termediate text, high-level data flow analysisdeals with programs essentially at source level andexploits the control flow information implicit inthe parse tree.  The need for high-level flow analysisarises from several aspects of recent work onadvanced methods of program certification and optimization.This paper proposes a simple general methodof high-level data flow analysis that allows free useof escape and jump statements, avoids large graphswhen compiling large programs, facilitates updating ofdata flow information to reflect program changes,and derives new global information helpful in solvingmany familiar global flow analysis problems.  Anillustrative application to live variable analysis is presented.Many of the graphs involved are constructedand analyzed before any programs are compiled, thus avoidingcertain costs that low-level methods incurrepeatedly at compile time.
2924	Wu, Sheng-Chuan;Abel, J. F.;Greenberg, D. P.;	An Interactive Computer Graphics Approach to Surface Representation	An in teractive computer graphics method has beendeveloped for the rapid generation of arbitraryshaped three-dimensional surfaces.  The method is a synthesisof spline theory and algorithms, an in teractivemeans for man-machine communication, and software forstatic or dynamic graphics display.  The basictechnique employed is a modified lofting method onwhich sectional curves are represented by uniformB-splines and the surface is in terpolated between sectionsby Cardinal splines.  Among the features ofthis method are algorithms which enable in teractivemodification of the B-spline representation of thesectional curves.  At all stages of the process, thespatial information is graphically displayed tothe user.  Complex surfaces can be created by the combinationof a number of shapes that have been separatelygenerated and automatically joined.  The system has beensuccessfully in terfaced to a variety of analyticalroutines for structural, medical and graphical applications.
2925	Fuchs, H.;Kedem,Z. M.;Uselton, S. P.;	Optimal Surface Reconstruction from Planar Contours	In many scientific and technical endeavors,a three-dimensional solid must be reconstructedfrom serial sections, either to aid in the comprehensionof the object's structure or to facilitate itsautomatic manipulation and analysis.  This paper presentsa general solution to the problem of constructinga surface over a set of cross-sectional contours.This surface, to be composed of triangular tiles,is constructed by separately determining an optimalsurface between each pair of consecutive contours.Determining such a surface is reduced to the problemof finding certain minimum cost cycles in a directedtoroidal graph.  A new fast algorithm for finding suchcycles is utilized.  Also developed is a closed-formexpression, in term of the number of contour poin ts, foran upper bound on the number of operations requiredto execute the algorithm.  An illustrated example whichinvolves the construction of a minimum area surfacedescribing a human head is included.
2926	McCreight, E. M.;	Pagination of B*-Trees with Variable-Length Records	A strategy is presented for pagination of B*-treeswith variable-length records.  If recordsof each length are uniformly distributed within thefile, and if a wide distribution of record lengthsexists within the file, then this strategy results in shallowtrees with fast access times.  The performanceof this strategy in an application is presented, comparedwith that of another strategy, and analyzed.
2927	Mairson, H. G.;	Some New Upper Bounds on the Generation of Prime Numbers	Given an integer N, what is the computationalcomplexity of finding all the primes less thanN?  A modified sieve of Eratosthenes using doubly linkedlists yields an algorithm of O(N) arithmeticcomplexity.  This upper bound is shown to be equivalentto the theoretical lower bound for sieve methodswithout preprocessing.  Use of preprocessing techniquesinvolving space-time and additive-multiplicativetradeoffs reduces this upper bound to O(N/log logN)and the bit complexity to O(N logN log log logN).A storage requirement is described using O(N logN/log logN) bits as well.
2928	Giffor, D. K.;	Hardware Estimation of a Process' Primary Memory Requirements	A minor hardware extension to the Honeywell6180 processor is demonstrated to allow the primarymemory requirements of a process in Multics to be approximated.The additional hardware required forthis estimate to be computed consists of a program accessibleregister containing the miss rate of theassociative memory used for page table words.  Thisprimary memory requirement estimate was employedin an experimental version of Multics to control thelevel of multiprogramming in the system and to billfor memory usage.  The resulting system's tuning parametersdisplay configuration insensitivity, andit is conjectured that the system would also track shiftsin the referencing characteristics of its workloadand keep the system in tune.
2929	Scheifler, R. W.;	An Analysis of Inline Substitution for a Structured Programming Language	An optimization technique known as inline substitutionis analyzed.  The optimization consistsof replacing a procedure invocation by a modified copyof the procedure body.  The general problem ofusing inline substitution to minimize execution timesubject to size constrain ts is formulated, and anapproximate algorithmic solution is proposed.  The algorithmdepends on run-time statistics about theprogram to be optimized.  Preliminary results for theCLU structured programming language indicate that,in programs with a low degree of recursion, over 90percent of all procedure calls can be eliminated,with little increase in the size of compiled code and asmall savings in execution time.  Other conclusionsbased on these results are also presented.
2930	Austing, R. H.;	The GRE Advanced Test in Computer Science	This report describes the Advanced Test inComputer Science which was recently in troduced inthe Graduate Record Examination Program.  The GRE programis described in general, and, the events leadingto the establishment of the Advanced Computer ScienceTest are discussed.  Content specifications andtheir rationale are given.  A set of sample questions is included.
2931	Scott, D. S.;	Logic and Programming Languages	Logic has been long in terested in whether answersto certain questions are computable in principle,since the outcome puts bounds on the possibilities offormalization.  More recently, precise comparisonsin the efficiency of decision methods have become availablethrough the developments in complexity theory.These, however, are applications to logic, and a big questionis whether methods of logic have significancein the other direction for the more applied parts ofcomputability theory.  Programming languages offeran obvious opportunity as their syntactic formalizationis well advanced; however, the semantical theorycan hardly be said to be complete.  Though we havemany examples, we have still to give wide-rangingmathematical answers to these queries:  What is a machine?What is a computable process?  How (or howwell) does a machine simulate a process?  Programs naturallyenter in giving descriptions of processes.The definition of the precise meaning of a programthen requires us to explain what are the objectsof computation (in a way, the statics of the problem)and how they are to be transformed (the dynamics).So far the theories of automata and of nets, thoughmost in teresting for dynamics, have formalized onlya portion of the field, and there has been perhaps toomuch concentration on the finite-state and algebraicaspects.  It would seem that the understanding of higher-levelprogram features involves us with infiniteobjects and forces us to pass through several levelsof explanation to go from the conceptual ideas tothe final simulation on a real machine.  These levelscan be made mathematically exact if we can findthe right abstractions to represent the necessary structures.The experience of many independent workerswith the method of data types as lattices (or partialorderings) under an information content ordering,and with their continuous mappings, has demonstrated theflexibility of this approach in providing definitionsand proofs, which are clean and without undue dependenceon implementations.  Nevertheless much remainsto be done in showing how abstract conceptualizationscan (or cannot) be actualized before we can saywe have a unified theory.
2932	Rabin, M. O.;	Complexity of Computations	The framework for research in the theory of complexityof computations is described, emphasizingthe in terrelation between seemingly diverse problemsand methods.  Illustrative examples of practicaland theoretical significance are given.  Directionsfor new research are discussed.
2933	Francez, N.;	Another Advantage of Keyword Notation forParameter Communication with Subprograms	
2934	Lawler, E. L.;	Comment on Computing the k Shortest Paths in a Graph	
2935	Taulbee, O. E.;Conte, S. D.;	Production and Employment of Ph.D.'sin Computer Science-1976 (Corrigendum)	
2936	Franta, W. R.;Maly, K.;	An Efficient Data Structure for the Simulation Event Set	Recently algorithms have been presented for therealization of event scheduling routines suitablefor general purpose discrete event simulation systems.Several exhibited a performance superior to thatof commonly used simple linked list algorithms.  In thispaper a new event scheduling algorithm is presentedwhich improves on two aspects of the best of the previouslypublished algorithms.  First, the new algorithm'sperformance is quite insensitive to skewed distributions,and second, its worst-case complexity is O(n), where n is the number of events in the set.  Furthermore,tests conducted to estimate the averagecomplexity showed it to be nearly independent of n.
2937	Gannon, J. D.;	An Experimental Evaluation of Data Type Conventions	The language in which programs are writtencan have a substantial effect on the reliabilityof the resulting programs.  This paper discusses an experimentthat compares the programming reliabilityof subjects using a statically typed language and a "typeless"language.  Analysis of the number of errorsand the number of runs containing errors shows that, atleast in one environment, the use of a staticallytyped language can increase programming reliability.Detailed analysis of the errors made by the subjectsin programming solutions to reasonably small problemsshows that the subjects had difficulty manipulatingthe representation of data.
2938	Wirth, N.;	Toward a Discipline of Real-Time Programming	Programming is divided into three major categorieswith increasing complexity of reasoningin program validation: sequential programming, multiprogramming,and real-time programming.  By adheringto a strict programming discipline and by using a suitablehigh-level language molded after this discipline,the complexity of reasoning about concurrency and executiontime constrain ts may be drastically reduced.This may be the only practical way to make real-timesystems analytically verifiable and ultimatelyreliable.  A possible discipline is outlined andexpressed in terms of the language Modula.
2939	Liskov, B.;Snyder, A.;Atkinson, R.;Schaffert, C.;	Abstraction Mechanisms in CLU	CLU is a new programming language designed to supportthe use of abstractions in program construction.Work in programming methodology has led to the realizationthat three kinds of abstractions-procedural,control, and especially data abstractions-are usefulin the programming process.  Of these, only theprocedural abstraction is supported well by conventionallanguages, through the procedure or subroutine.CLU provides, in addition to procedures, novel linguisticmechanisms that support the use of data andcontrol abstractions.  This paper provides an in troductionto the abstraction mechanisms in CLU.  Bymeans of programming examples, the utility of the threekinds of abstractions in program constructionis illustrated, and it is shown how CLU programs maybe written to use and implement abstractions.  TheCLU library, which permits incremental program developmentwith complete type checking performed at compiletime, is also discussed.
2940	Shaw, M.;Wulf, W. A.;	Abstraction and Verification in Alphard: Definingand Specifying Iteration and Generators	The Alphard "form" provides the programmer witha great deal of control over the implementationof abstract data types.  In this paper the abstraction techniquesare extended from simple data representationand function definition to the iteration statement, themost important poin t of interaction between dataand the control structure of the language itself.  Ameans of specializing Alphard's loops to operateon abstract entities without explicit dependence on therepresentation of those entities is in troduced.Specification and verification techniques that allowthe properties of the generators for such iterationsto be expressed in the form of proof rules are developed.Results are obtained that for common specialcases of these loops are essentially identical to thecorresponding constructs in other languages.  Ameans of showing that a generator will terminate is also provided.
2941	Geschke, C. M.;Morris, J. H. Jr.;Satterthwaite, E. H.;	Early Experience with Mesa	The experiences of Mesa's first users-primarilyits implementers-are discussed, and some implicationsfor Mesa and similar programming languages are suggested.The specific topics addressed are: module structureand its use in defining abstractions, data-structuringfacilities in Mesa, an equivalence algorithm fortypes and type coercions, the benefits of the type systemand why it is breached occasionally, and thedifficulty of making the treatment of variant records safe.
2942	Brownlee, J. N.;	An Algol-Based Implementation of SNOBOL 4 Patterns	
2943	Ashcrof, E. A.;Wadge, W. W.;	Lucid, a Nonprocedural Language with Iteration	Lucid is a formal system in which programscan be written and proofs of programs carried out.The proofs are particularly easy to follow and straightforwardto produce because the statements ina Lucid program are simply axioms from which the proofproceeds by (almost) conventional logical reasoning,with the help of a few axioms and rules of inferencefor the special Lucid functions.  As a programminglanguage, Lucid is unconventional because, among otherthings, the order of statements is irrelevantand assignment statements are equations.  Nevertheless,Lucid programs need not look much different thaniterative programs in a conventional structured programminglanguage using assignment and conditionalstatements and loops.
2944	Barth, J. M.;	Shifting Garbage Collection Overhead to Compile Time	This paper discusses techniques which enable automaticstorage reclamation overhead to be partiallyshifted to compile time.  The paper assumes a transactionoriented collection scheme, as proposed byDeutsch and Bobrow, the necessary features of which aresummarized.  Implementing the described optimizationsrequires global flow analysis to be performed on thesource program.  It is shown that at compile timecertain program actions that affect the reference countsof cells can be deduced.  This information isused to find actions that cancel when the code is executedand those that can be grouped to achieve improvedefficiency.
2945	Denning, D. E.;Denning, P. J.;	Certification of Programs for Secure Information Flow	This paper presents a certification mechanismfor verifying the secure flow of informationthrough a program.  Because it exploits the propertiesof a lattice structure among security classes,the procedure is sufficiently simple that it can easilybe included in the analysis phase of most existingcompilers.  Appropriate semantics are presented andproved correct.  An important application is theconfinement problem: The mechanism can prove that a programcannot cause supposedly nonconfidential resultsto depend on confidential input data.
2946	Kessels, J. L. W.;	An Alternative to Event Queues for Synchronization in Monitors	In the monitor concept, as proposed by BrinchHansen and Hoare, event are used for synchronization.This paper describes another synchronizing primitivewhich is nearly as expressive as the conditionalwait, but can be implemented more efficiently.  An implementationof this primitive in terms of P andV operations is given together with a correctness proof.Two examples are presented: the readers andwriters problem and the problem of informationstreams sharing a finite buffer pool.
2947	Schneider, B. R. Jr.;Watts, R. M.;	SITAR: An Interactive Text Processing System for Small Computers	SITAR, a low-cost in teractive text handlingand text analysis system for nontechnical users,is in many ways comparable to in teractive bibliographicalsearch and retrieval systems, but has severaladditional features. It is implemented on a PDP/11 time-sharingcomputer invoked by a CRT with microprogrammedediting functions.  It uses a simple command language designatinga function, a file, and a search templateconsisting of the textual string desired and stringsdelimiting the context in which the hit is to bedelivered.  Extensive experience with SITAR shows thatthe combined powers of simple commands, stringorientation, circular file structure, a CRT with localmemory, and conversational computing produce asystem much more powerful than the sum of its parts.
2948	Heckel, P. G.;Lampson, B. W.;	A Terminal-Oriented Communication System	This paper describes a system for full-duplexcommunication between a time-shared computerand its terminals.  The system consists of a communicationscomputer directly connected to the time-sharedsystem, a number of small remote computers to whichthe terminals are attached, and connecting mediumspeed telephone lines.  It can service a large numberof terminals of various types.  The overall systemdesign is presented along with the algorithms used tosolve three specific problems: local echoing, errordetection and correction on the telephone lines,and multiplexing of character output.
2949	Tajibnapis, W. D.;	A Correctness Proof of a Topology InformationMain tenance Protocol for a Distributed ComputerNetwork	In order for the nodes of a distributed computernetwork to communicate, each node must haveinformation about the network's topology.  Since nodesand links sometimes crash, a scheme is neededto update this information.  One of the major constrain tson such a topology information scheme is thatit may not involve a central controller.  The TopologyInformation Protocol that was implemented on theMERIT Computer Network is presented and explained; thisprotocol is quite general and could be implementedon any computer network.  It is based on Baran's "HotPotato Heuristic Routing Doctrine."  A correctnessproof of this Topology Information Protocol is also presented.
2950	Ruschitzka, M.;Fabry, R. S.;	A Unifying Approach to Scheduling	This paper presents a scheme for classifyingscheduling algorithms based on an abstract modelof a scheduling system which formalizes the notion ofpriority.  Various classes of scheduling algorithmsare defined and related to existing algorithms.  Acriterion for the implementation efficiency of analgorithm is developed and results in the definitionof time-invariant algorithms, which include mostof the commonly implemented ones.  For time-invariantalgorithms, the dependence of processing rateson priorities is derived.  The abstract model providesa framework for implementing flexible schedulersin real operating systems.  The policy-driven schedulerof Bernstein and Sharp is discussed as an exampleof such an implementation
2951	Mamrak, S. A.;	Dynamic Response Time Prediction for Computer Networks	If the ultimate aim of a computing networkis resource sharing, then the human component aswell as the technical component of networking mustbe fully investigated to achieve this goal.  Thisresearch is a first step toward assisting the user in participatingin the vast store of resources availableon a network. Analytical, simulation, and statistical performanceevaluation tools are employed to investigatethe feasibility of a dynamic response time monitorthat is capable of providing comparative responsetime information for users wishing to process variouscomputing applications at some network computingnode.  The research clearly reveals that sufficientsystem data are currently obtainable, at least forthe five diverse ARPA network systems studied in detail,to describe and predict the response time fornetwork time-sharing systems as it depends on somemeasure of system activity or load level.
2952	Warren, H. S. Jr.;	Functions Realizable with Word-Parallel Logicaland Two's-Complement Addition Instructions	
2953	Bird, R. S.;	Notes on Recursion Elimination	Various methods of recursion elimination areapplied to the schematic recursive procedure:proc S(x); px then N(x); S(fx); S(gx); M(x) fi.  Procedureswith this general form arise in connectionwith tree traversal and sorting algorithms.  Each methodof recursion removal involves the use of oneor more stacks, and the solutions are comparedon the basis of their running time.
2954	Robson J. M.;	A Bounded Storage Algorithm for Copying Cyclic Structures	A new algorithm is presented which copies cycliclist structures using bounded workspace andlinear time. Unlike a previous similar algorithm, thisone makes no assumptions about the storage allocationsystem in use and uses only operations likely to be availablein a high-level language.  The distinctivefeature of this algorithm is a technique for traversingthe structure twice, using the same spanningtree in each case, first from left to right and then from right to left.
2955	Peterson, J. L.;Norman, T. A.;	Buddy Systems	Two algorithms are presented for implementingany of a class of buddy systems for dynamic storageallocation.  Each buddy system corresponds to a set ofrecurrence relations which relate the block sizesprovided to each other. Analyses of the in ternal fragmentationof the binary buddy system, the Fibonaccibuddy system, and the weighted buddy system are given.Comparative simulation results are also presentedfor in ternal, external, and total fragmentation.
2956	Gries, D.;Gehani, N.;	Some Ideas on Data Types in High-Level Languages	A number of issues are explored concerning thenotion that a data type is a set of values togetherwith a set of primitive operations on those values.  Amongthese are the need for a notation for iteratingover the elements of any finite set (instead of themore narrow for i:= 1 to n notation), the use ofthe domain of an array as a data type, the need fora simple notation for allowing types of parametersto be themselves parameters (but in a restrictive fashion),and resulting problems with conversion ofvalues from one type to another.
2957	Smith, J. M.;Smith, D. C. P.;	Database Abstractions: Aggregation	Aggregation is in troduced as an abstractionwhich is important in conceptualizing the realworld.  Aggregation transforms a relationship betweenobjects into a higher-level object.  A new datatype, called aggregation, is developed which, undercertain criteria of "well-definedness," specifiesaggregation abstractions.  Relational databases definedas collections of aggregates are structured asa hierarchy on n-ary relations.  To main tain well-definedness,update operations on such databases mustpreserve two invariants.  Well-defined relations aredistinct from relations in third normal form.  Itis shown that these notions are complementary and both areimportant in database design.  A top-downmethodology for database design is described which separatesdecisions concerning aggregate structurefrom decisions concerning key identification.  It issuggested that aggregate types, and other typeswhich support real-world abstractions without in troducingimplementation detail, should be incorporatedinto programming languages.
2958	Guttag, J.;	Abstract Data Types and the Development of Data Structures	Abstract data types can play a significant rolein the development of software that is reliable,efficient, and flexible.  This paper presents and discussesthe application of an algebraic techniquefor the specification of abstract data types.  Amongthe examples presented is a top-down developmentof a symbol table for a block structured language; a discussionof the proof of its correctness is given.The paper also contains a brief discussion of the problemsinvolved in constructing algebraic specificationsthat are both consistent and complete.
2959	Zloof, M. M.;de Jong, S. P.;	The System for Business Automation (SBA): Programming Language	The system for business automation (SBA) is a systemwithin which application experts-nonprogrammers-candescribe and execute their applications on a computer.The user of SBA views his application as manipulationof information in two-dimensional pictures of tables,business forms, and reports on a display terminal.He can gradually automate this application by giving "examples"to the system of how he manually manipulatesthe information.  The Query-by-Example database languageis a subset of the SBA programming language.
2960	Ledgard, H. F.;Taylor, R. W.;	Two Views of Data Abstraction	
2961	Shneiderman, B.;Mayer, R.;McKay, D.;Heller, P.;	Experimental Investigations of the Utilityof Detailed Flowcharts in Programming	This paper describes previous research onflowcharts and a series of controlled experimentsto test the utility of detailed flowcharts as an aidto program composition, comprehension, debugging,and modification.  No statistically significant differencebetween flowchart and nonflowchart groupshas been shown, thereby calling into question the utilityof detailed flowcharting.  A program of furtherresearch is suggested.
2962	Taulbee, O. E.;Conte, S. D.;	Production and Employment of Ph.D.'s in Computer Science-1976	Statistics are presented on the productionand employment of Ph.D.'s in computer science forthe calendar year 1975-76.  Data include profiles of graduatestudents and of faculty at 60 Ph.D.-producingdepartments as well as a breakdown of degrees grantedby specialty areas.  Significant trends are notedand comparisons with comparable data gatheredfor the 1974-75 calendar year are made.
2963	Hunt, J. W.;Szymanski, T. G.;	A Fast Algorithm for Computing Longest Common Subsequences	Previously published algorithms for findingthe longest common subsequence of two sequencesof length n have had a best-case running time of O(n^2).An algorithm for this problem is presentedwhich has a running time of O((r + n)log n), where ris the total number of ordered pairs of positionsat which the two sequences match.  Thus in the worstcase the algorithm has a running time of O(n^2 logn).  However, for those applications where most positionsof one sequence match relatively few positionsin the other sequence, a running time of O(n log n) can be expected.
2964	Milman, Y.;	An Approach to Optimal Design of Storage Parameters in Databases	
2965	Hanani, M. Z.;	An Optimal Evaluation of Boolean Expressions in an Online Query System	
2966	Shapiro, M.;	The Choice of Reference Poin ts in Best-Match File Searching	Improvements to the exhaustive search methodof best-match file searching have previously beenachieved by doing a preprocessing step involving thecalculation of distances from a reference poin t.This paper discusses the proper choice of referencepoin ts and extends the previous algorithm to usemore than one reference poin t.  It is shown that referencepoin ts should be located outside of data clusters.The results of computer simulations are presented whichshow that large improvements can be achievedby the proper choice and location of multiple reference poin ts.
2967	Stillman, N. J.;Berra, P. B.;	A Comparison of Hardware and Software AssociativeMemories in the Context of Computer Graphics	The Associative Processing of Line Drawings (APLD)System utilizes a hardware associative memoryand creates, modifies, deletes, stores, and retrievestwo-dimensional line drawings consisting of poin ts,lines, rectangles, and triangles. The APLD functionswere duplicated on the TX-2 computer at M.I.T.'sLincoln Laboratory under the LEAP Language and DataStructure,  A comparison of the hardware approachwith the software simulation illustrates the advantagesof the hardware associative memory in three areas:(1) processing speed, (2) storage requirements, and (3)flexibility.  The major problem areas of hardwareassociative memory technology, namely input/outputand cost effectiveness, are also addressed.
2968	Baer, J. L.;Schwab, B.;	A Comparison of Tree-Balancing Algorithms	Several algorithms-height-balance (i.e. AVLand extensions), weight-balance (i.e. BB and WB),and total restructuring-for building balanced binary searchtrees are compared.  The criteria for comparisonencompass theoretical aspects (e.g. path lengths) and implementationindependent and machine/algorithm-dependentmeasures (e.g. run time).  A detailed analysis of code isalso presented at a level believed to be language-andcompiler-independent.  The quality of the resultingtrees and the overhead spent on building them areanalyzed, and some guidelines are given for an efficientuse of the methods.  If insertion and subsequentqueries are the only operations of in terest, then "pure"AVL trees present the overall best qualities.
2969	Morgan, H. L.;Levin, K. D.;	Optimal Program and Data Locations in Computer Networks	An optimization procedure for the allocationof program and data files in a computer networkis presented.  This algorithm takes into account thedependencies between files and programs such asoccur in real heterogeneous computer networks.  Insightsinto whether or not to convert programs fromone computer to another can also be gained from themodel.  A search procedure for the file locationproblem is described, along with an exampleand a possible application of the model.
2970	Fishman, G. S.;	Achieving Specific Accuracy in Simulation Output Analysis	This paper extends the use of the regenerativeproperty of queueing systems in the analysisof simulation output.  In particular, it describes asequential estimation method which when used withthe regenerative property allows results to be obtainedwith specified statistical accuracy.  This methodincludes a test to check the normality assumption onwhich the sequential procedure relies.  The paperillustrates the method using the empty and idle stateas the regenerative state.  A second example thendescribes how using the most frequently entered stateas the regenerative state reduces the chance ofmaking a costly error in a preliminary simulation run.The paper also described how a variance reductionmethod due to Page [9] can be used to obtain a specifiedaccuracy with considerably fewer job completionsthan are required when no variance reduction technique is applied.
2971	Holt, R. C.;Wortman, D. B.;Barnard, D. T.;Cordy, J. R.;	SP/k: A System for Teaching Computer Programming	SP/k is a compatible subset of the PL/I  languagethat has been designed for teaching programming.The features of the SP/k language were chosen to encouragestructured problem solving by computers, tomake the language easy to learn and use, to eliminateconfusing and redundant constructs, and to makethe language easy to compile.  The resulting languageis suitable for in troducing programming conceptsused in various applications, including business dataprocessing, scientific calculations and non-numericcomputation.  SP/k is actually a sequence of languagesubsets called SP/1, SP/2,...SP/8.  Each subsetin troduces new programming language constructs whileretaining all the constructs of preceding subsets.Each subset is precisely defined and can be learnedor implemented without the following subsets.
2972	Robinson, L.;Levitt, K. N.;	Proof Techniques for Hierarchically Structured Programs	A method for describing and structuring programsthat simplifies proofs of their correctnessis presented.  The method formally represents a programin terms of levels of abstraction, each levelof which can be described by a self-contained nonproceduralspecification.  The proofs, like the programs,are structured by levels.  Although only manual proofsare described in the paper, the method is alsoapplicable to semi-automatic and automatic proofs.  Preliminaryresults are encouraging, indicating thatthe method can be applied to large programs, such as operating systems.
2973	Thompson, C. D.;Kung, H. T.;	Sorting on a Mesh-Connected Parallel Computer	Two algorithms are presented for sorting n^2elements on an n X n mesh-connected processorarray that require O(n) routing and comparison steps.The best previous algorithm takes time O(n logn).  The algorithms of this paper are shown to be optimalin time within small constant factors.  Extensionsto higher-dimensional arrays are also given.
2974	Bandyopadhyay, S. K.;	Comment on Weighted Increment Linear Search for Scatter Tables	
2975	Hollander, C.R.;	Remark on Uniform Insertion in Structured Data Structures	
2976	Yao, S. B.;	Approximating Block Accesses in Database Organizations	
2977	Lucac, H. C. Jr.;Sutton, J. A.;	The Stage Hypothesis and the S-Curve: Some Contradictory Evidence	This paper presents the results of a studytesting the s-shaped budget curve of Nolan's stagemodel of computer development in an organization.  Researchon the data processing budgets of Californiacounties fails to support the s-shaped curve or the useof budgets as a basis for a stage model.  However,the results do not invalidate the concept of a stagemodel.  The analysis suggests an alternative modelof budget growth and a separation between models of budgetinggrowth and growth stages in the developmentof the computer resource.
2978	Maruyama, K.;Smith, S. E.;	Analysis of Design Alternatives for Virtual Memory Indexes	A class of index structures for use in a virtualmemory environment is described.  Design alternativeswithin this class of index structures are analyzed.  Thesealternatives include a choice of search strategy,whether or not pages in the index are structured, andwhether or not keys are compressed.  The averagecost of retrieving entries from these indexes is expressedas a wieghted sum of the cost of a basic keycomparison and the cost of crossing a page boundary inthe index structure.  Formulas for the retrievalcosts for possible combinations of design alternativesare given.  These are used in numerical case studieswhich compare the retrieval costs of the alternatives.Qualitative comparisons of the main tenance costs(insertion, deletion, reorganization) of thedesign alternatives are also included.
2979	Findler, N. V.;	Studies in Machine Cognition Using The Game of Poker	A progress report is presented of on-goingresearch efforts concerning human decision makingunder uncertainly and risk and human problem solvingand learning processes on the one hand, and machinelearning, large scale programming systems, and novelprogramming techniques on the other.  There hasalso been in terest in how humans make deductive and inductiveinferences and form and optimize heuristicrules, and how machines can reach similar results.Although the vehicle of these investigations hasbeen the game of poker, a conceptual framework has beenprovided that should have a fairly wide rangeof applicability.  The models of human judgment, choice,and decision making are incorporated in a largescale complex program.  They represent both descriptiveand normative theories of behavior. An in teractivegame environment has been recently established which,besides its usefulness for experiments in gameplaying, enables humans to construct machine strategies"on-line" in a question answering, advice takingmode.
2980	Tanimoto, S. L.;Pavlidis, T.;	The Editing  of Picture Segmentations Using Local Analysis of Graphs	A major problem in picture processing is theelimination of the large number of spurious regionsthat result from an initial segmentation by region growingtechniques.  Such regions have been eliminatedeither on the basis of semantic information or on thebasis of size and contrast.  A scheme is presentedwhich performs eliminations on the basis of local propertiesof the region adjacency graph.  The schemeis based on definitions of graph properties which aresatisfied when a spurious region is present; thenediting is equivalent to fast graph operations.  A number of examples are shown.
2981	Morris, J. H. Jr.;Wegbreit, B.;	Subgoal Induction	A proof method, subgoal induction, is presentedas an alternative or supplement to the commonlyused inductive assertion method.  Its major virtue is thatit can often be used to prove a loop's correctnessdirectly from its input-output specification without theuse of an invariant.  The relation between subgoalinduction and other commonly used induction rules is exploredand, in particular, it is shown that subgoalinduction can be viewed as a specialized form of computationinduction.  A set of sufficient conditionsare presented which guarantee that an input-output specificationis strong enough for the induction stepsof a proof by subgoal induction to be valid.
2982	Bertsch, E.;	The Storage Requirement in Precedence Parsing	
2983	Bays, C.;	A Comparison of Next-fit, First-fit, and Best-fit	
2984	Borovits, I.;Ein-Dor, P.;	Cost/Utilization: A Measure of System Performance	A method is presented for evaluating computersystem performance in terms of a cost/utilizationfactor and a measure of imbalance.  These coefficientsindicate the extent to which the total systemcost is effectively utilized.  The method includes atechnique for the visual representation of systemperformance.
2985	Nolan, R. L.;	Effects of Chargeout on User/Manager Attitudes	The relationship of in ternal pricing systemsfor computer services (chargeout systems) anduser management attitudes about their computer-basedinformation systems is investigated. Evidence isprovided that the relationship conforms to a generalpattern that would be expected from the hypothesisof the four stages of EDP growth [15].  The results alsoindicate that the chargeout systems characteristicof advanced EDP stage environments are associated withrelatively high levels of positive user attitudesand marked increases in EDP training for users. Both factorsare important to the user/manager involvementnecessary for effective control of computer-based systems.Development and main tenance of computer-basedsystems is asserted to be a category of organizationalchange.  A "felt need" for the change on the partof the user/manager is prerequisite to any change takingplace.  The research methods of behavioral scienceare applied to investigate the user/managerenvironment and the effects of chargeout.
2986	Hunt, H. B. III;Szymanski, T. G.;Ullman, J. D.;	Operations on Sparse Relations	Various computations on relations, Boolean matrices,or directed graphs, such as the computationof precedence relations for a context-free grammar, can bedone by a practical algorithm that is asymptoticallyfaster than those in common use.  For example, how to computeoperator precedence or Wirth-Weber precedencerelations in O(n^2) steps is shown, as well as how tocompute linear precedence functions in O(n^2) stepsis shown, as well as how to compute linear precedencefunctions in O(n) steps, where n is the size ofa grammer.  The heart of the algorithms is a generaltheorem giving sufficient conditions under whichan expression whose operands are sparse relations andwhose operators are composition, transitive closure,union, and inverse, can be computed efficiently.
2987	Burton W.;	Representation of Many-Sided Polygonsand Polygonal Lines for Rapid Processing	A representation for polygons and polygonallines is described which allows sets of consecutivesides to be collectively examined.  The set of sides arearranged in a binary tree hierarchy by inclusion.A fast algorithm for testing the inclusion of a poin tin a many-sided polygon is given.  The speed ofthe algorithm is discussed for both ideal and practicalexamples.  It is shown that the poin ts of intersectionof two polygonal lines can be located by what is essentiallya binary tree search.  The algorithm anda practical example are discussed.  The representationovercomes many of the disadvantages associatedwith the various fixed-grid methods for representing curves and regions
2988	Brown, R. M.;Browne, J. C.;Chandy, K. M.;	Memory Management and Response Time	This paper presents a computationally tractablemethodology for including accurately the effectsof finite memory size and workload memory requirementsin queueing network models of computer systems.Empirical analyses and analytic studies based on applyingthis methodology to an actual multiaccessin teractive system are reported.  Relations between workloadvariables such as memory requirement distributionand job swap time, and performance measures such as responsetime and memory utilization are graphicallydisplayed. A multiphase, analytically soluble model isproposed as being broadly applicable to the analysisof in teractive computer systems which use nonpaged memories.
2989	Lunde, A.;	Empirical Evaluation of Some Featuresof Instruction Set Processor Architectures	This paper presents methods for empirical evaluationof features of Instruction Set Processors(ISPs).  ISP features are evaluated in terms of the timeused or saved by having or not having the feature.The methods are based on analysis of traces of programexecutions.  The concept of a register life isin troduced, and used to answer questions like: How manyregisters are used simultaneously? How many wouldbe sufficient all of the time? Most of the time? Whatwould the overhead be if the number of registerswere reduced? What are registers used for during theirlives? The paper also discusses the problem ofdetecting desirable but non-existing instructions. Otherproblems are briefly discussed.  Experimentalresults are presented, obtained by analyzing 41programs running on the DEC system 10 ISP.
2990	Yu, C. T.;Salton, G.;	Effective Information Retrieval Using Term Accuracy	The performance of information retrieval systemscan be evaluated in a number of differentways.  Much of the published evaluation work is basedon measuring the retrieval performance of an averageuser query.  Unfortunately, formal proofs are difficultto construct for the average case.  In the presentstudy, retrieval evaluation is based on optimizing theperformance of a specific user query.  The conceptof query term accuracy is in troduced as the probabilityof occurrence of a query term in the documentsrelevant to that query.  By relating term accuracyto the frequency of occurrence of the term in thedocuments of a collection it is possible to give formalproofs of the effectiveness with respect to agiven user query of a number of automatic indexing systemsthat have been used successfully in experimentalsituations.  Among these are inverse document frequencyweighting, thesaurus construction, and phrasegeneration.
2991	Clapson, P.;	Improving the Access Time for Random Access Files	Clustering in the key set is decreased bysmoothing the key-to-address transformation, andby adding shadow buckets to an open chaining file.  Thekeys are pre-hashed before the address division,to remove the effect of sequential properties in thekey set.  Shadow buckets in the key search sequencereduce the effect of nonuniformity in file loading,and decrease the number of maximum probes neededto locate a record.  The combined effects of these techniqueslead to improved file performance for secondarystorage devices, as shown by empirical studies.
2992	Knott, G. D.;	A Numbering System for Binary Trees	
2993	Kotiah, T. C. T.;Steinberg, D. I.;	Occurrences of Cycling and Other PhenomenaArising in a Class of Linear Programming Models	An investigation into the average queue sizefor a certain class of queues has resulted inthe formulation of linear programming problems whichare ill-conditioned in some cases.  In attemptingto solve these linear programming models, using IBM'sMPS package, instances of cycling were encountered.Small perturbations in the input data resulted in problemswhich did not cycle.  This fact, plus severalother observed phenomena suggest that the primary reasonthat cycling is not known to occur more frequentlyis the round-off errors in the computations perturbthe problem sufficiently to prevent cycling (or atleast to prevent indefinite cycling).  In one case maximizingand minimizing an objective function subjectto the same constrain t set was attempted, but MPS solvedonly one of these while giving an indicationof infeasibility for the other.
2994	Bresenham, J.;	A Linear Algorithm for Incremental Digital Display of Circular Arcs	Circular arcs can be drawn on an incrementaldisplay device such as a cathode ray tube, digitalplotter, or matrix prin ter using only sign testing andelementary addition and subtraction.  This paperdescribes methodology for producing dot orstep patterns closet to the true circle.
2995	Courtois, P. J.;	Decomposability, Instabilities, and Saturationin Multiprogramming Systems (Corrigendum)	
2996	Easton, M. C.;Bennett, B. T.;	Transient-Free Working-Set Statistics	Transient-free average working set size and transient-freemissing-page rate for a finite sampleof a reference string are defined.  Use of these statisticsis appropriate if the contents of the workingset at the start of the recorded string are unknown.If a certain stationarity condition holds, thesestatistics provide unbiased estimates of expected working-setsizes, missing-page probabilities, andin terreference distance probabilities.  Two other pairsof estimators are shown to be biased.  Expressionsfor the transient-free statistics are obtained in termsof in terval statistics. Several methods of computationare discussed, the usefulness of each depending on lengthof the sample, number of distinct references,and the amount of main storage available to the computerperforming the calculations.  In particular,methods are described for handling long stringscontaining many distinct page names.
2997	Preparata, F. P.;Hong, S. J.;	Convex Hulls of Finite Sets of Poin ts in Two and Three Dimensions	The convex hulls of sets of n poin ts in twoand three dimensions can be determined with O(nlog n) operations.  The presented algorithms use the "divideand conquer" technique and recursively applya merge procedure for two nonin tersecting convex hulls.Since any convex hull algorithm requires atleast O(n log n) operations, the time complexity of theproposed algorithms is optimal within a multiplicativeconstant.
2998	Clark, D. W.;Green, C. C.;	An Empirical Study of List Structure in Lisp	Static measurements of the list structure offive large Lisp programs are reported and analyzedin this paper.  These measurements reveal substantialregularity, or predictability, among poin ters toatoms and especially among poin ters to lists.  Pointersto atoms are found to obey, roughly, Zipf's law,which governs word frequencies in natural languages; poin tersto lists usually poin t to a location physicallynearby in memory.  The use of such regularities in thespace-efficient representation of list structureis discussed.  Linearization of lists, whereby successivecdrs (or cars) are placed in consecutive memorylocations whenever possible, greatly strengthens theobserved regularity of list structure.  It is shownthat under some reasonable assumptions, the entropy orinformation content of a car-cdr pair in the programsmeasured is about 10 to 15 bits before linearization,and about 7 to 12 bits after.
2999	Muller, M. E.;	An Approach to Multidimensional Data Array Processing by Computer	Some recent work on the development of general-purposecomputer-based statistical and dataprocessing capabilities for handling multidimensionalarrays of data is presented. Attention is firstgiven to some of the general problems of multidimensionaltable and array processing.  This is followedby a summary of some recent developments in array processingcapabilities at the World Bank, in particular,the system identified as WRAPS(World BankRetrieval and Array Processing System).
3000	Batson, A. P.;Brundage, R. E.;	Segment Sizes and Lifetimes in Algol 60 Programs	The characteristics of the virtual memory requirementsof a sample of Algol 60 programs havebeen measured.  Distributions are presented for thesizesof memory requests and for their holding times(lifetimes).  The results are presented in terms of Johnston'scontour model and a simple abstract machine.They provide new empirical evidence of certain aspectsof the construction and behavior of real programs,and some of their implications for the design of virtualmemory systems are presented and discussed.
3001	Zobrist, A. L.;Carlson, F. R. Jr.;	Detection of Combined Occurrences	In this paper it is supposed that the variablesX1,...,Xn each have finite range with the variableXi taking on Pi possible values and that the values of thevariables are changing with time.  It is supposedfurther that it is desired to detect occurrences in whichsome subset of the variables achieve particularvalues.  Finally, it is supposed that the problem involvesthe detection of a large number of combinedoccurrences for a large number of changes of values ofvariables.  Two efficient solutions for this problemare described.  Both methods have the unusual propertyof being faster for systems where the sum P1 + ...+ Pn is larger. The first solution is error-freeand suitable for most cases.  The second solutionis slightly more elegant and allows negation as wellas conjunction, but is subject to the possibilityof errors.  An error analysis is given for the secondmethod and an empirical study is reported.
3002	Babad, J. M.;	A Record and File Partitioning Model	One of the main objectives in the design ofa file system is the reduction of storage and datatransfer costs.  This paper presents a model in whichseveral  requests access the file system, and eachrequest requires information from one or more variablelength data-items.  The probabilities of accessand the distribution of each data-item's length are assumedto be known, and to be mutually independent.The file system uses one or more storage devices, andeach record may be partitioned into subrecordsthat are stored on different devices.  One of the subrecordsis designated as the primary record; whena request for a record is made, the primary record isfirst accessed, and other subrecords are accessedonly if the pertinent information is not stored in theprimary record.  The model that is presented inthis paper, both as a nonlinear programming model anda mixed integer programming model, is a very generalone; several types of file systems may be derived fromit by an appropriate selection of its parameters.This model has already been used in the optimization oflibrary routines' storage at a large scale operatingsystem.
3003	Austing, R. H.;Barnes, B. H.;	A Survey of the Literature in ComputerScience Education Since Curriculum '68	A bibliography of approximately two hundredreferences in computer science education appearingin the literature since the publication of "Curriculum'68" is presented.  The bibliography itself ispreceded by brief descriptive materials organizing thereferences into the categories of survey reports,activities of professional organizations, philosophyof programs, description of  programs, descriptionof courses and other materials.
3004	Van Gelder, A.;	Structured Programming in Cobol: An Approach for Application Programmers	Techniques for designing and writing Cobol programsare presented.  Previous work in structuredprogramming is drawn upon and adapted.  The presentationis informal: the terminology is nonmathematicalas far as possible, no theorems are proved, and examplesare used frequently.  Top-down program designis implemented through the use of structured flowcharts,disciplined specifications, and step by stepverification.  A well-formed Cobol program is defined.The proper use of the GO TO and other Cobol codingpractices are discussed.
3005	Tanenbaum, A.S.;	Implications of Structured Programming for Machine Architecture	Based on an empirical study of more than 10,000lines of program text written in a GOTO-lesslanguage, a machine architecture specifically designed forstructured programs is proposed.  Since assignment,CALL, RETURN, and IF statements together account for93 percent of all executable statements, specialcare is given to ensure that these statements can be implementedefficiently.  A highly compact instructionencoding scheme is presented, which can reduce programsize by a factor of 3.  Unlike a Huffman code,which utilizes variable length fields, this method usesonly fixed length (1-byte) op code and addressfields.  The most frequent instructions consist of asingle 1-byte field.  As a consequence, instructiondecoding time is minimized, and the machine isefficient with respect to both space and time.
3006	Franklin, M.A.;Graham, G.S.;Gupta, R.K.;	Anomalies with Variable Partition Paging Algorithms	Five types of anomalous behavior which mayoccur in paged virtual memory operating systemsa redefined.  One type of anomaly, for example, concernsthe fact that, with certain reference stringsand paging algorithms, an increase in mean memory allocationmay result in an increase in fault rate.Two paging algorithms, are examined in terms of theiranomaly potential, and reference string examplesof various anomalies are presented.  Two paging algorithmproperties, the inclusion property and thegeneralized inclusion property, are discussed and theanomaly implications of these properties presented.
3007	Rabin, M.O.;	Complexity of Computations (Corrigendum)	
3008	DeMillo, R.A.;Eisenstat, S.C.;Lipton, R.J.;	Preserving Average Proximity in Arrays	Programmers and data structure designers are oftenforced to choose between alternative structures.In storing these structures, preserving logical adjacenciesor "proximity" is usually an important consideration.The combinatorial problem of storing arrays as variouskinds of list structures is examined.  Embeddingsof graphs are used to model the loss of proximity involvedin such storage schemes, and an elementaryproof that arrays cannot be stored as linear lists withbounded loss of proximity is presented.  Averageloss of proximity is then considered, and it is shownthat arrays cannot be stored as linear lists withonly bounded loss of average proximity, but can be sostored in binary trees.  The former result implies,for instance, that row major order is an asymptoticallyoptimal storage strategy for arrays.
3009	Kosaraju, S.R.;	Insertions and Deletions In One-Sided Height-Balanced Trees	Recently Hirschberg has established that insertionsinto one-sided height-balanced trees canbe done in 0(log^2N) steps.  It is proved here that deletionscan also be performed in 0(log^2N) steps,which answers the open problem posed by Hirschberg.
3010	Anderson, R.E.;	Value Orientation of Computer Science Students	Technological and nontechnological value orientationsare investigated with special attentionto the complexity of value structures.  Computer sciencestudents, who are closely associated with technology,contrast with social science students, who are oftentechnologically aloof.  This is confirmed by thevalue ratings of 313 students at the University of Minnesotain 1972.  Computer science majors were foundto have a more complex value structure than social science majors.
3011	Dutton, W.H.;Kraemer, K.L.;	Management Utilization of Computers in American Local Governments	Traditional concepts of management informationsystems (MIS) bear little relation to the informationsystems currently in use by top management in most US localgovernments.  What exists is management-orientedcomputing, involving the use of relatively unsophisticatedapplications.  Despite the unsophisticatednature of these systems, management use of computing issurprisingly common, but also varied in its extentamong local governments.  Management computing is mostprevalent in those governments with professionalmanagement practices where top management is supportiveof computing and tends to control computing decisionsand where department users have less control over designand implementation activities.  Finally, managementcomputing clearly has impacts for top managers, mostlyinvolving improvements in decision information.
3012	Lucas, H.C.Jr.;	The Use of an Interactive Information Storageand Retrieval System in Medical Research	This paper presents the results of a studyof the use of an interactive computerized storageand retrieval system.  A monitor built into the computersystem provided usage data for the study.  Additionaldata on user reactions were gathe red from a questionnaire.The results show the important role playedby frequently chosen laboratory reference leaders in influencingthe use of this system.  The implicationsof the study for the design of similar systems are discussed.
3013	Schachter, B.J.;Rosenfeld, A.;	Some New Methods of Detecting Step Edges in Digital Pictures	This note describes two operators that respondto step edges, but not to ramps.  The firstis similar to the digital Laplacian, but uses the max, ratherthan the sum, of the x and y second differences.The second uses the difference between the mean andmedian gray levels in a neighborhood.  The outputsobtained from these operators applied to a set of testpictures are compared with each other and withthe standard digital Laplacian and gradient.  A thirdoperator, which uses the distance between the centerand centroid of a neighborhood as an edge value, is alsobriefly considered; it turns out to be equivalentto one of the standard digital approximations to the gradient.
3014	Manna, Z.;Waldinger, R.;	Is "Sometime" Sometimes Better than "Always"? (IntermittentAssertions in Proving Program Correctness)	This paper explores a technique for proving thecorrectness and termination of programs simultaneously.This approach, the intermittent-assertion method, involvesdocumenting the program with assertions thatmust be true at some time when control passes throughthe corresponding point, but that need not be trueevery time.  The method, introduced by Burstall, promisesto provide a valuable complement to the moreconventional methods.  The intermittent-assertion methodis presented with a number of examples of correctnessand termination proofs.  Some of these proofs are markedlysimpler than their conventional counterparts.On the other hand, it is shown that a proof of correctnessor termination by any of the conventionaltechniques can be rephrased directly as a proof usingintermittent assertions.  Finally, it is shownhow the intermittent-assertion method can be appliedto prove the validity of program transformationsand the correctness of continuously operating programs.
3015	Herman, G.T.;Lent, A.;Lutz, P.H.;	Relaxation Methods for Image Reconstruction	The problem of recovering an image (a functionof two variables) from experimentally availableintegrals of its grayness over thin strips is of greatimportance in a large number of scientific areas.An important version of the problem in medicine isthat of obtaining the exact density distributionwithin the human body from X-ray projections.One approachthat has been taken to solve this problemconsists of translating the available information intoa system of linear inequalities.  The size andthe sparsity of the resulting system (typically, 25,000inequalities with fewer than 1 percent of thecoefficients nonzero) makes methods using successiverelaxations computationally attractive, as comparedto other ways of solving systems of inequalities.In this paper, it is shown that, for a consistentsystem of linear inequalities, any sequence of relaxarion parameterslying strictly between 0 and 2 generatesa sequence of vectors which converges to a solution.Under the same assumptions, for a system of linearequations, the relaxation method converges to the minimumnorm solution.  Previously proposed techniquesare shown to be special cases of our procedure withdifferent choices of relaxation parameters.  Thepractical consequences for image reconstruction of thechoice of the relaxation parameters are discussed.
3016	Stewart, W.J.;	A Comparison of Numerical Techniques in Markov Modeling	This paper presents several numerical methods whichmay be used to obtain the stationary probabilityvectors of Markovian models.  An example of a nearlydecomposable system is considered, and the resultsobtained by the different methods examined.  A postmortem reveals why standard techniques often failto yield the correct results.  Finally, a means of estimatingthe error inherent in the decompositionof certain models is presented.
3017	Held, G.;Stonebraker, M.;	B-trees Re-examined	The B-tree and its variants have, with increasingfrequency, been proposed as a basic storagestructure for multiuser database applications.  Here,three potential problems which must be dealt within such a structure that do not arise in more traditionalstatic directory structures are indicated.One problem is a possible performance penalty.
3018	Kou, L.T.;Stockmeyer, L.J.;Wong, C.K.;Watson, T.J.;	Covering Edges by Cliques with Regard toKeyword Conflicts and Intersection Graphs	Kellerman has presented a method for determiningkeyword conflicts and described a heuristicalgorithm which solves a certain combinatorial optimizationproblem in connection with this method.This optimization problem is here shown to be equivalentto the problem of covering the edges of a graphby complete subgraphs with the objective of minimizingthe number of complete subgraphs.  A relationshipbetween this edge-clique-cover problem and the graph coloringproblem is established which allows algorithmsfor either one of these problems to be constructedfrom algorithm for the other.  As consequences ofthis relationship, the keyword conflict problem and theedge-clique-cover problem are shown to be NP-complete,and if P=/NP then they do not admit polynomial-time approximationalgorithms which always produce solutionswithin a factor less than 2 from the optimum.
3019	Austing, R.H.;	The GRE Advanced Test in Computer Science	
3020	Auslander, M.A.;Strong, H.R.;	Systematic Recursion Removal	The recursion removal algorithm presentedby Strong and Walker is amplified and applied toa relatively complex PL/I program.  The aim is to demonstratesystematic recursion-removal techniqueson something more complex than Knuth's "sturdy toddler"and to obtain measurements of the cost of procedurelinkage in PL/I and the savings achievable via procedureintegration in the presence of recursion.  First,the paper describes the recursion-removal process and theexample on which it will be illustrated.  Recursionremoval is then applied to the two major parts of thisexample and the final result of the process isdisplayed.  Our performance comparison results are presentedand our conclusions are briefly discussed.
3021	Rivest, R.L.;Shamir, A.;Adleman, L.;	A Method for Obtaining Digital Signatures and Public-Key Cryptosystems	An encryption method is presented with the novelproperty that publicly revealing an encryptionkey does not thereby reveal the corresponding decryptionkey.  This has two important consequences: (1)Couriers or other secure means are not needed to transmitkeys, since a message can be enciphered usingan encryption key publicly revealed by the intended recipient.Only he can decipher the message, sinceonly he knows the corresponding decryption key.  (2)A message can be "signed" using a privately helddecryption key.  Anyone can verify this signature usingthe corresponding publicly revealed encryptionkey.  Signatures cannot be forged, and a signer cannotlater deny the validity of his signature.  Thishas obvious applications in "electronic mail" and "electronicfunds transfer" systems.  A message isencrypted by representing it as a number M, raisingM to a publicly specified power e, and then takingthe remainder when the result is divided by the publiclyspecified product, n, of two large secret primenumbers p and q.  Decryption is similar;only a different,secret, power d is used, where e * d = 1 (mod(p-1)* (q-1)).  the security of the system rests in part onthe difficulty of factoring the published divisor,n.
3022	Mamrak, S.A.;Montanelli, R.G.Jr.;	Computer Science Faculties: The Current Status of Minorities and Women	The results of a survey conducted in the fallof 1975 to determine the status of women andminority faculty members in academic computer scienceare presented.  Faculty members were compared withrespect to professional background, salaries, teachingload, publication records, and research grants.Analysis of the data indicated that the over-all verdictis one of general equality among women, minorities,and men.
3023	Case, R.P.;Padges, A.;	Architecture of the IBM System/370	This paper discusses the design considerationsfor the architectural extensions that distinguishSystem/370 from System/360.  It comments on some experienceswith the original objectives for System/360and on the efforts to achieve them, and it describes thereasons and objectives for extending the architecture.It covers virtual storage, program control, data-manipulationinstructions, timing facilities, multiprocessing,debugging and monitoring, error handling, and input/outputoperations.  A final section tabulates someof the important parameters of the various IBMmachines which implement the architecture.
3024	Russell, R.M.;	The CRAY-1 Computer System	This paper describes the CRAY-1, discussesthe evolution of its architecture, and gives anaccount of some of the problems that were overcome duringits manufacture.  The CRAY-1 is the only computerto have been built to date that satisfies ERDA's ClassVI requirement (a computer capable of processingfrom 20 to 60 million floating point operations persecond) [1].  The CRAY-1's Fortran compiler (CFT)is designed to give the scientific user immediate accessto the benefits of the CRAY-1's vector processingarchitecture.  An optimizing compiler, CFT, "vectorizes"innermost DO loops.  Compatible with the ANSI1966 Fortran Standard and with many commonly supportedFortran extensions, CFT does not require any sourceprogram modifications or the use of additional nonstandardFortran statements to achieve vectorization.Thus the user's investment of hundreds of man monthsof effort to develop Fortran programs for othercontemporary computers is protected.
3025	Bell, C.G.;Kotok, A.;Hastings, T.N.;Hill, R.;	The Evolution of the DEC system 10	The DEC system 10, also known as the PDP-10, evolvedfrom the PDP-6 (circa 1963) over five generationsof implementations to presently include systems coveringa price range of five to one.  The origin andevolution of the hardware, operating system, and languagesare described in terms of technological change,user requirements, and user developments. The PDP-10'scontributions to computing technology include:accelerating the transition from batch oriented to timesharing computing systems; transferring hardwaretechnology within DEC (and elsewhere) to minicomputerdesign and manufacturing; supporting minicomputerhardware and software development; and serving as amodel for single user and timeshared interactiveminicomputer/microcomputer systems.
3026	Borgherson, B.R.;Hanson, M.L.;Hartley, P.A.;	The Evolution of the Sperry Univac 1100Series: A His tory, Analysis, and Projection	The 1100 series systems are Sperry Univac'slarge-scale main frame computer systems.  Beginningwith the 1107 in 1962, the 1100 series has progressedthrough a succession of eight compatible computermodels to the latest system, the 1100/80, introducedin 1977.  The 1100 series hardware architectureis based on a 36-bit word, ones complement structurewhich obtains one operand from storage and one froma high-speed register, or two operands from high-speedregisters.  The 1100 Operating System is designedto support a symmetrical multiprocessor configurationsimultaneously providing multiprogrammed batch,timesharing, and transaction environments.
3027	Ibbett, R.N.;Capon, P.C.;	The Development of the MU5 Computer System	Following a brief outline of the backgroundof the MU5 project, the aims and ideas for MU5are discussed.  A description is then given of the instructionset, which includes a number of featuresconducive to the production of efficient compiled codefrom high-level language source programs.  Thedesign of the processor is then traced from the initialideas for an associatively addressed "name store"to the final multistage pipeline structure involvinga prediction mechanism for instruction prefetchingand a function queue for array element accessing.  Anoverall view of the complete MU5 complex is presentedtogether with a brief indication of its performance.
3028	Lavington, S.H.;	The Manchester Mark I and Atlas: A His torical Perspective	In 30 years of computer design at Manchester Universitytwo systems stand out: the Mark I (developedover the period 1946-49) and the Atlas (1955-62).This paper places each computer in its his toricalcontext and then describes the architecture and systemsoftware in present-day terminology.  Severaldesign concepts such as address-generation and storemanagement have evolved in the progression fromMark I to Atlas.  The wider impact of Manchester innovationsin these and other areas is discussed, andthe contemporary performance of the Mark I and Atlas is evaluated.
3029	Fuller,S.H.;	Foreword to the Special Issue on Computer Architecture	
3030	Spitzen, J.M.;Levitt, K.N.;Robinson, L.;	An Example of Hierarchical Design and Proof	Hierarchical programming is being increasinglyrecognized as helpful in the construction oflarge programs.  Users of hierarchical techniques claimor predict substantial increases in productivityand in the reliability of the programs produced.  In thispaper we describe a formal method for hierarchicalprogram specification, implementation, and proof.  Weapply this method to a significant list processingproblem and also discuss a number of extensions to currentprogramming languages that ease hierarchicalprogram design and proof.
3031	Guttag, J.V.;Horowitz, E.;Musser, D.R.;	Abstract Data Types and Software Validation	A data abstraction can be naturally specifiedusing algebraic axioms.  The virtue of theseaxioms is that they permit a representation-independentformal specification of a data type.  An exampleis given which shows how to employ algebraic axioms atsuccessive levels of implementation.  The  majorthrust of the paper is twofold.  First, it is shown howthe use of algebraic axiomatizations can simplifythe process of proving the correctness of an implementationof an abstract data type.  Second, semi-automatictools are described which can be used both to automatesuch proofs of correctness and to derive an immediateimplementation from the axioms.  This implementationallows for limited testing of programs at designtime, before a conventional implementation is accomplished.
3032	Dalal, Y.K.;Metcalfe, R.M.;	Reverse Path Forwarding of Broadcast Packets	A broadcast packet is for delivery to allnodes of a network.  Algorithms for accomplishingthis delivery through a store-and-forward packet switchingcomputer network include (1) transmissionof separately addressed packets. (2) multidestinationaddressing, (3) hot potato forwarding,(4) spanningtree forwarding, and (5) source based forwarding.  Tothis list of algorithms we add (6) reverse pathforwarding, a broadcast routing method which exploitsrouting procedures and data structures alreadyavailable for packet switching.  Reverse path forwardingis a practical algorithm for broadcast routingin store-and-forward packet switching computer networks.The algorithm is described as being practicalbecause it is not optimal according to metrics developedfor its analysis in this paper, and also becauseit can be implemented in existing networks with less complexitythan that required for the known alternatives.
3033	Martelli, A.;Montanari, U.;	Optimizing Decision Trees Through Heuristically Guided Search	Optimal decision table conversion has beentackled in the literature using two approaches,dynamic programming and branch-and-bound.  The formertechnique is quite effective, but its time andspace requirements are independent of how "easy" thegiven table is.  Furthermore, it cannot be usedto produce good, quasi optimal solutions.  The branch-and-boundtechnique uses a good heuristic to directthe search, but is cluttered up by an enormous searchspace, since the number of solutions increaseswith the number of test variables according to a doubleexponential.  In this paper we suggest a heuristicallyguided top-down search algorithm which, like dynamicprogramming, recognizes identical subproblems butwhich can be used to find both optimal and quasi optimalsolutions.  The heuristic search method introducedin this paper combines the positive aspects of the abovetwo techniques.  Compressed tables with a largenumber of variables can be handled without deriving expanded tables first.
3034	Ibramsha, M.;Rajaraman, V.;	Detection of Logical Errors in Decision Table Programs	In this paper an algorithm to detect logicalerrors in a limited-entry decision table and inloop-free programs with embedded decision tables is developed.All the conditions in the decision tablesare assumed to be inequalities or equalities relatinglinear expressions.  It is also assumed that actionsin a decision table are linear in variables which occurin the condition stub of the decision table (ortables) to which control is transferred from the table.The algorithm is based on determining whethera set of linear inequalities has or does not have asolution.  The algorithm described in the paper isimplemented in Fortran IV.
3035	Wetherbe, J.C.;Dock, V.T.;	A Strategic Planning Methodology for the ComputingEffort in Higher Education: An Empirical Evaluation	The findings of a study designed to addressthe pressing problems associated with the strategicplanning of the computing effort in higher educationare presented here.  A planning methodology wasdeveloped and tested through implementation at a university.Two years after the methodology was implemented,the effectiveness of the planning methodology was assessedin terms of the improvement of the deliveryof computing services to the major institutional rolesof instruction, research, and administration.Two control institutions were employed to contrast theimprovements at the test institution.  The resultsof the research indicate the planning methodology significantlyenhanced the delivery of computing services.
3036	Peterson, J.L.;Bitner, J.R.;Howard, J.H.;	The Selection of Optimal Tab Settings	A new generation of computer terminals allowstab settings to be selected and set by the computer.This feature can be used to reduce the number of charactersthat are needed to represent a documentfor transmission and printing.  In this note, an algorithmis given for selecting the optimal set oftab stops for minimizing the number of characters transmitted.An implementation of the algorithm hasreduced the number of characters transmitted by from7 to 30 percent, but requires a prepass throughthe document to compute a matrix used in determiningthe optimal set tab stops.  The use of fixed tabstops, as a heuristic alternative, can achieveabout 80 percent of optimal with no prepass.
3037	Gries, D.;Misra, J.;	A Linear Sieve Algorithm for Finding Prime Numbers	A new algorithm is presented for finding allprimes between 2 and n.  The algorithm executesin time proportional to n (assuming that multiplicationof integers not larger than n can be performedin unit time).  The method has the same arithmetic complexityas the algorithm presented by Mairson [6];however, our version is perhaps simpler and more elegant.It is also easily extended to find the primefactorization of all integers between 2 and n in time proportional to n.
3038	Needham, R.M.;Schroeder, M.D.;	Using Encryption for Authentication in Large Networks of Computers	Use of encryption to achieve authenticatedcommunication in computer networks is discussed.Example protocols are presented for the establishmentof authenticated connections, for the managementof authenticated mail, and for signature verificationand document integrity guarantee.  Both conventionaland public-key encryption algorithms are considered as the basis for protocols.
3039	Dijkstra, E.W.;Lamport, L.;Martin, A.J.;Scholten, C.S.;Steffens, E.F.M.;	On-the-Fly Garbage Collection: An Exercise in Cooperation	As an example of cooperation between sequentialprocesses with very little mutual interferencedespite frequent manipulations of a large shared dataspace,  a technique is developed which allows nearlyall of the activity needed for garbage detection and collectionto be performed by an additional processoroperating con-currently with the processor devoted to thecomputation proper.  Exclusion and synchronizationconstraints have been kept as weak as could be achieved;the severe complexities engendered by doingso are illustrated.
3040	Freuder, E.C.;	Synthesizing Constraint Expressions	A constraint network representation is presentedfor a combinatorial search problem: findingvalues for a set of variables subject to a set of constraints.A theory of consistency levels in suchnetworks is formulated, which is related to problemsof backtrack tree search efficiency.  An algorithmis developed that can achieve any level of consistencydesired, in order to preprocess the problem forsubsequent backtrack search, or to function as an alternativeto backtrack search by explicitly determiningall solutions.
3041	Sheil, B.A.;	Median Split Trees: A Fast Lookup Technique for Frequently Occuring Keys	Split trees are a new technique for searching setsof keys with highly skewed frequency distributions.A split tree is a binary search tree each node of whichcontains two key values-a node value which isa maximally frequent key in that subtree, and a splitvalue which partitions the remaining keys (withrespect to their lexical ordering) between the left andright subtrees.  A median split tree (MST) usesthe lexical median of a node's descendents as its splitvalue to force the search tree to be perfectlybalanced, achieving both a space efficient representationof the tree and high search speed.  Unlikefrequency ordered binary search trees, the cost of asuccessful search of an MST is log n bounded andvery stable around minimal values.  Further, an MSTcan be built for a given key ordering and set offrequencies in time n log n, as opposed to n2 for anoptimum binary search tree.  A discussion of theapplication of MST's to dictionary lookup for English ispresented, and the performance obtained is contrastedwith that of other techniques.
3042	Luccio, F.;Pagli, L.;	Power Trees	The new class of Pk trees is presented, whereheight balance is maintained for the nodes Iyingon particular paths.  The number of nodes of a Pk treeasymptotically grows as a power of the height,in the worst case.  A procedure for node insertion is given,and the class of trees  considered is restrictedto IPk trees, which are buildable by such a procedure.The average behavior of such trees, studied byan extensive set of simulation runs, is close to thatof AVL trees.  In particular, the family of IPOtrees whose main advantage is the reduced number ofrestructurings required after node insertion, isanalyzed.
3043	Hansen, P.;	Distributed Processes: A Concurrent Programming Concept	A language concept for concurrent processeswithout common variables is introduced.  Theseprocesses communicate and synchronize by means of procedurecalls and guarded regions.  This conceptis proposed for real-time applications controlled bymicrocomputer networks with distributed storage.The paper gives several examples of distributed processesand shows that they include procedures, coroutines,classes, monitors, processes, semaphores, buffers, pathexpressions, and input/output as special cases.
3044	Friedman, D.P.;Wise, D.S.;	A Note on Conditional Expressions	Evaluation of a conditional expression may succeedeven when the "deciding predicate" divergesand the alternatives are records (or nodes) whose fields have different content.
3045	Ripley, D.G.;	A Simple Recovery-Only Procedure For SImple Precedence Parsers	A simple method is described enabling simpleprecedence parsers to recover from syntax errors.No attempt to repair errors is made, yet parsing andmost semantic processing can continue.  The resultis a good "first approximation" to syntax error handlingwith negligible increase in parsing time, space,and complexity of both the parser and its table generator.
3046	Tadikamalla, P.R.;	Computer Generation of Gamma Random Variables - II	A rejection method is proposed for generatinggamma variates with nonintegral shape parametera, a > 1. This method is similar to other methods givenby Fishman, Wallace, and Tadikamalla and is fasterthan these methods for a> 2.  The core storage requirementsand the programming effort for the proposedmethod are similar to those of Wallace's or Tadikamalla'smethods.  The computational times for the proposedmethod remain fairly constant for medium and largevalues of a and are superior to times obtained byAhrens and Dieter's method for all values of a.  Theproposed method is simpler than Ahrens and Dieter'smethod.
3047	Horn, B.K.P.;Bachman, B.L.;	Using Synthetic Images to Register Real Images with Surface Models	A number of image analysis tasks can benefitfrom registration of the image with a model ofthe surface being imaged.  Automatic navigation using visiblelight or radar images requires exact alignmentof such images with digital terrain models.  In addition,automatic classification of terrain, usingsatellite imagery, requires such alignment to deal correctlywith the effects of varying sun angle andsurface slope.  Even inspection techniques for certainindustrial parts may be improved by this means.We achieve the required alignment by matching the realimage with a synthetic image obtained from a surfacemodel and known positions of the light sources.  Thesynthetic image intensity is calculated using thereflectance map, a convenient way of describing surface reflectionas a function of surface gradient.We illustrate the technique using LANDSAT images and digital terrain models.
3048	Kumar, B.;Davidson, E.S.;	Performance Evaluation of Highly ConcurrentComputers by Deterministic Simulation	Simulation is presented as a practical techniquefor performance evaluation of alternativeconfigurations of highly concurrent computers.  A techniqueis described for constructing a detaileddeterministic simulation model of a system.  In the modela control stream replaces the instruction anddata streams of the real system.  Simulation of thesystem model yields the timing and resource usagestatistics needed for performance evaluation, withoutthe necessity of emulating the system.  As a casestudy, the implementation of a simulator of a modelof the CPU-memory subsystem of the IBM 360/91 isdescribed.  The results of evaluating some alternativesystem designs are discussed.  The experimentsreveal that, for the case study, the major bottlenecksin the system are the memory unit and the fixedpoint unit.  Further, it appears that many of the sophisticatedpipelining and buffering technique simplementedin the architecture of the IBM 360/91 are of littlevalue when high-speed (cache) memory is used, asin the IBM 360/195.
3049	Wendorf, J.W.;	A Simply Extended and Modified BatchEnvironment Graphical System (SEMBEGS)	SEMBEGS is a complete batch environment graphicalsystem containing components for handlinggraphical data files, for displaying the contents ofthese files on a variety of graphical hardware,and for performing graphical batch input operations.SEMBEGS is easy to extend and modify to meet thegrowing needs of a large batch environment, and is evenextendable to a fully interactive system.  Thepaper presents the conceptual view of graphics leadingto the design of SEMBEGS and outlines the majorcomponents of the system.  The design of SEMBEGS is foundedupon the basic assumption that the true aimof computer graphics is to describe graphical entities,rather than, as commonly held, to provide graphicalinput and output functional capabilities.  SEMBEGSis built around a Basic Graphical Data ManagementSystem (BAGDAMS) which provides a common means of communicatingthe descriptions of graphical entitiesbetween the various components of SEMBEGS.  BAGDAMSprovides facilities for storing, retrieving, andmanipulating the descriptions of graphical entitiesprovided by, and received by application programs,graphics packages, and graphical devices.
3050	Lyons, N.R.;	Systems Design Education: A Gaming Approach	One of the problems facing managers of computerinstallations is the problem of configuringthe computer system to meet the demands made by themix of jobs that the computer center must service.This paper presents a management game that allowsthe player to configure a computer system to meeta hypothetical job mix is under the control of a game administratorand can be varied to simulate a varietyof real-world situations (I/O bound jobs, compute boundjobs, etc.).  The player of the game receivesa set of detailed reports on the cost of his choicesand a simulated run of the center operating underhis choices.
3051	Franta, W.R.;Maly, K.;	A Comparison of Heaps and the TL Structure for the SImulation Event Set	None
3052	Easton, M.C.;Fagin, R.;	Cold-Start vs. Warm-Start Miss Ratios	In a two-level computer storage hierarchy, missratio measurements are often made from a "coldstart," that is made with the first-level  store initiallyempty.  For large capacities the effect onthe measured miss ratio of the misses incurred whilefilling the first-level store can be significant,even for long reference strings.  Use of "warm-start"rather than "cold-start" miss ratios cast doubton the widespread belief that the observed "S-shape" oflifetime (reciprocal of miss ratio) versus capacitycurve indicates a property of behavior of programs thatmaintain a constant number of pages in main storage.On the other hand, if cold-start miss ratios are measuredas a function of capacity and measurementlength, then they are useful in studying systems in whichoperation of a program is periodically interruptedby task switches.  It is shown how to obtain, under simpleassumptions, the cache miss ratio for multiprogrammingfrom cold-start miss ratio values and how to obtainapproximate cold-start miss ratios from warm-startmiss ratios.
3053	Lyon, G.;	Packed Scatter Tables	Scatter tables for open addressing benefitfrom recursive entry displacements, cutoffs forunsuccessful searches, and auxiliary cost functions.  Comparedwith conventional methods, the new techniquesprovide substantially improved tables that resemble exact-solutionoptimal packings.  The displacementsare depth-limited approximations to an enumerative(exhaustive) optimization, although packing costsremain linear-O(n)-with table size n.  The techniques areprimarily suited for important fixed (but possiblyquite large) tables for which reference frequencies maybe known: op-code tables,spelling dictionaries,access arrays.  Introduction of frequency weights furtherimproves retrievals, but the enhancement maydegrade cutoffs.
3054	Sedgewick, R.;	Implementing Quicksort Programs	This paper is a practical study of how toimplement the Quicksort sorting algorithm and itsbest variants on real computers, including how to applyvarious code optimization techniques.  A detailedimplementation combining the most effective improvementsto Quicksort is given, along with a discussionof how to implement it in assembly language.  Analyticresults describing the performance of the programsare summarized.  A variety of special situations are consideredfrom a practical standpoint to illustrateQuicksort's wide applicability as an internal sortingmethod which requires negligible extra storage.
3055	McMaster, C.L.;	An Analysis of Algorithms for the Dutch National Flag Problem	Solutions to the Dutch National Flag Problemhave been given by Dijkstra [1] and Meyer [3].Dijkstra starts with a simple program and arrives atan improved program by refinement.  Both of thealgorithms given by Dijkstra are shown to have an expected numberof swaps which is 2/3N + 0(1) and thatthese values differ at most by 1/3 of a swap and asymptoticallyby 1/4 of a swap.  The algorithm of Meyeris shown to have expected swap complexity 5/9N.
3056	Morris, R.;	Counting Large Numbers of Events in Small Registers	It is possible to use a small counter to keepapproximate counts of large numbers.  The resultingexpected error can be rather precisely controlled.  Anexample is given in which 8-bit counters (bytes)are used to keep track of as many as 130,000 events witha relative error which is substantially independentof the number n of events.  This relative error canbe expected to be 24 percent or less 95 percent ofthe time (i.e.o = n/8).  The techniques could be usedto advantage in multichannel counting hardwareor software used for the monitoring of experiments or processes.
3057	Chang, S.K.;Wong, Y.W.;	Optimal His togram Matching by Monotone Gray Level Transformation	This paper investigates the problem of optimalhis togram matching using monotone gray leveltransformation, which always assigns all picture pointsof a given gray level i to another gray levelT(i) such that if i > j, then T(i) > T(j).  The objectiveis to find a transformed digital picture ofa given picture such that the sum of absolute errorsbetween the gray level his togram of the transformedpicture and that of a reference picture is minimized.This is equivalent to placing k1 linearly orderedobjects of different sized one by one into k2 linearly orderedboxes of assorted sizes, such that theaccumulated error of space under packed or overpackedin the boxes is minimized; the placement functionis monotonic, which ensures a polynomial time solutionto this problem.  A tree search algorithm foroptimal his togram matching is presented which has timecomplexity O(k1 x k2).  If the monotone propertyis dropped, then the problem becomes NP-complete,even if it is restricted to k2 = 2.
3058	Shneiderman, B.;	Jump Searching: A Fast Sequential Search Technique	When sequential file structures must be usedand binary searching is not feasible, jump searchingbecomes an appealing alternative.  This paper exploresvariants of the classic jump searching schemewhere the optimum jump size is the square root of thenumber of records.  Multiple level and variablesize jump strategies are explored, appropriate applicationsare discussed and performance is evaluated.
3059	Towsley, D.;Chandy, K.M.;Browne, J.C.;	Models for Parallel Processing WIthin Programs:Application to CPU:I/O and I/O:I/O Overlap	Approximate queueing models for internal parallelprocessing by individual programs in a multiprogrammedsystem are developed in this paper.  The solution techniqueis developed by network decomposition.  Themodels are formulated in terms of CPU:I/O and I/O:I/O overlapand applied to the analysis of these problems.The percentage performance improvement from CPU:I/Ooverlap is found to be greatest for systems whichare in approximate CPU:I/O utilization balance and forlow degrees of multiprogramming.  The percentageimprovement from I/O:I/O overlap is found to be greatestfor systemtems in which the I/O system is moreutilized than the CPU.
3060	Brainerd, W.;	Fortran 77	There is a new standard Fortran.  The officialtitle is "American National Standard ProgrammingLanguage Fortran, X3.9-1978," but it is more commonlyreferred to as "Fortran 77," since its developmentwas completed in 1977.  It replaces the Fortran standarddesignated X3.9-1966.  This paper describesmany of the features of Fortran 77 and also providessome information about how and why the standardwas developed.
3061	Tenenbaum, A.;	Simulations of Dynamic Sequential Search Algorithms	None
3062	Ward, S.A.;	Real Time Plotting of Approximate Contour Maps	None
3063	Maly, K.;	A Note on Virtual Memory Indexes	None
3064	Ulrich, E.G.;	Event Manipulation for Discrete SimulationsRequiring Large Numbers of Events	The event-manipulation system presented here consists oftwo major parts.  The first part addressesthe familiar problem of event scheduling efficiencywhen the number of scheduled events grows large.The second part deals with the less apparent problemof providing efficiency and flexibility as scheduledevents are accessed to be executed.  Additional featuresand problems dealt with include the proper handlingof simultaneous events; that certain events must be created,scheduled, and executed at the same pointsin simulated time; that infinite loops caused by the concatenationof such "zero-time" events are possibleand must be diagnosed; that maintaining various eventcounts is practical and economical; and that acapability for handling  "time-displaceable" events is desirable and possible.
3065	Ottmann, T.T.;Six, H.W.;Wood, D.;	Right Brother Trees	Insertion and deletion are provided for theclass of right (or one-sided) brother trees whichhave O (log n) performance.  The importance of theseresults stems from the close relationship of rightbrother trees which have an insertion algorithm operatingin O (log2 n).  Further, although both insertionand deletion can be  carried out in O (log n) time forright brother trees, it appears that the insertionalgorithm is inherently much more difficult than thedeletion algorithm-the reverse of what one usuallyobtains.
3066	Myers, G.J.;	A Controlled Experiment in Program Testingand Code Walkthroughs/Inspections	This paper describes an experiment in programtesting, employing 59 highly experienced dataprocessing professionals using seven methods to testa small PL/I program.  The results show that thepopular code walk through/inspection method was as effectiveas other computer-based methods in findingerrors and that the most effective methods (in terms oferrors found and cost) employed pairs of subjectswho tested the program independently and then pooledtheir findings.  The study also shows that thereis a tremendous amount of variability among subjectsand that the ability to detect certain types oferrors varies from method to method.
3067	Denning, P.J.;Slutz, D.R.;	Generalized Working Sets for Segment Reference Strings	The working-set concept is extended for programsthat reference segments of different sizes.The generalized working-set policy (GWS) keeps as itsresident set those segments whose retention costsdo not exceed their retrieval costs.  The GWS is a modelfor the entire class of demand-fetching memorypolicies that satisfy a resident-set inclusion property.A generalized optimal policy (GOPT) is alsodefined; at its operating points it minimizes aggregatedretention and swapping costs.  Special casesof the cost structure allow GWS and GOPT to simulateany known stack algorithm, the working set, andVMIN.  Efficient procedures for computing demand curvesshowing swapping load as a function of memoryusage are developed for GWS and GOPT policies.  Empiricaldata from an actual system are included.
3068	Popek, G.J..;Farber, D.A.;	A Model for Verification of Data Security in Operating Systems	Program verification applied to kernel architecturesforms a promising method for providinguncircumventably secure, shared computer systems.  Aprecise definition of data security is developedhere in terms of a general model for operating systems.This model is suitable as a basis for verifyingmany of those properties of an operating system whichare necessary to assure reliable enforcement ofsecurity.  The application of this approach to theUCLA secure operating system is also discussed.
3069	Barth, J.M.;	A Practical Interprocedural Data Flow Analysis Algorithm	A new interprocedural  data flow analysis algorithmis presented and analyzed.  The algorithmassociates with each procedure in a program informationabout which variables may be modified, whichmay be used, and which are possibly preserved by a callon the procedure, and all of its subcalls.  Thealgorithm is sufficiently powerful to be used on recursiveprograms and to deal with the sharing of variableswhich arises through reference parameters.  The algorithmis unique in that it can compute all of thisinformation in a single pass, not requiring a prepass tocompute calling relationships or sharing patterns.The algorithm is asymptotically optimal in time complexity.It has been implemented and is practicaleven on programs which are quite large.
3070	Schwetman, H.D.;	Hybrid Simulation Models of Computer Systems	This paper describes the structure and operationof a hybrid simulation model in which bothdiscrete-event simulation and analytic techniques arecombined to produce efficient yet accurate systemmodels.  In an example based on a simple hypotheticalcomputer system, discrete-event simulation is usedto model the arrival and activation of jobs, and acentral-server queueing network models the use ofsystem processors.  The accuracy and efficiency of thehybrid technique are demonstrated by comparingthe result and computational costs of the hybrid model ofthe example with those of an equivalent simulation-onlymodel.
3071	Harris, R.A.;Zund, J.D.;	An Algorithm Using Symbolic Techniques for theBel-Petrov Classification of Gravitational Fields	In this note, an algorithm is presented for thesymbolic calculation of certain algebraic invariantsof the Weyl tensor which permits the determinationof the Bel-Petrov types of a gravitational field.This algorithm, although more specialized than thatof D'Inverno and Russell-Clark, requires neitherthe use of a special coordinate system nor the spin coefficientformalism.  The algorithm has been implementedin FORMAC and is designed to complete the classificationscheme proposed by Petrov in his book.  An appendixcontains examples illustrating the use of the algorithm.
3072	Brice, R.S.;Browne, J.C.;	Feedback Coupled Resource Allocation Policiesin the Multiprogramming- Multiprocessor ComputerSystem	Model studies of some integrated, feedback-drivenscheduling systems for multiprogrammed- multiprocessorcomputer systems are presented.  The basic control variablesused are the data-flow rates for the processesexecuting on the CPU.  The model systems feature simulatedcontinuous-flow and preempt-resume schedulingof input-output activity.  Attention is given to theamount of memory resource required for effectiveprocessing of the I/O activity (buffer space assignment).The model studies used both distribution-drivenand trace-driven techniques.  Even relatively simple dynamicschedulers are shown to improve system performance(as measured by user CPU time) over that given by optimalor near-optimal static schedulers imbededin identical system structures and workload environments.The improvement is greatest under a heavyI/O demand workload.
3073	Hoare, C.A.R.;	Communicating Sequential Processes	This paper suggests that input and output arebasic primitives of programming and that parallelcomposition of communicating sequential processes isa fundamental program structuring method.  Whencombined with a development of Dijkstra's guarded command,these concepts are surprisingly versatile.Their use is illustrated by sample solutions ofa variety of familiar programming exercises.
3074	Morris, F.L.;	A Time- and Space- Efficient Garbage Compaction Algorithm	Given an area of storage containing scattered,marked nodes of differing sizes, one may wishto rearrange them into a compact mass at one end of thearea while revising all pointers to marked nodesto show their new locations.  An algorithm is describedhere which accomplishes this task in linear timerelative to the size of the storage area, and in a spaceof the order of one bit for each pointer.  Thealgorithm operates by reversibly encoding the situation(that a collection of locations point to a singlelocation) by a linear list, emanating from the pointed-tolocation, passing through the pointing locations,and terminating with the pointed-to location's transplanted contents.
3075	Hirschberg, D.S.;	Fast Parallel Sorting Algorithms	A parallel bucket-sort algorithm is presentedthat requires time O(log n) and the use of nprocessors.  The algorithm makes use of a technique thatrequires more space than the product of processorsand time.  A realistic model is used model is used in whichno memory contention is permitted.  A procedureis also presented to sort n numbers in time O(k logn) using n 1 + 1/k processors, for k an arbitraryinteger.  The model of computation for this procedurepermits simultaneous fetches from the same memorylocation.
3076	Kling, R.;	Value Conflicts and Social Choice in ElectronicFunds Transfer System Developments	During the last few years, computer-basedsystems which automate the transfer and recordingof debits and credits have begun to be implemented ona large scale.  These systems promise both financialbenefits for the institutions that use them and potentialconveniences to their customers.  However,they also raise significant social, legal, and technicalquestions that must be resolved if full scalesystems for Electronic Funds Transfer (EFT) are notto cause more problems for the larger public thanthey solve.  This paper examines the incentives for EFTdevelopments and the social problems they raisein the context of conflicts between five different valuepositions that are often implicit in analysesof proposed EFT arrangements.  These conflicts reflectthe relative importance of certain problems forspecific groups.  The value positions implicit in EFT proposalshelp to organize analyses of market arrangements,system reliability, and privacy of transactions.  Thesetopics are analyzed in this article and relatedto the value positions held by concerned parties.  Last,the ways in which the public can learn aboutthe social qualities of different EFT arrangements andthe pace of EFT developments are both discussedin the context of social choice.
3077	Backus, J.;	Can Programming Be Liberated from the von NeumannStyle?  A Functional Style and Its Algebraof Programs	Conventional programming languages are growingever more enormous, but not stronger.  Inherentdefects at the most basic level cause them to be bothfat and weak: their primitive word-at-a-time styleof programming inherited from their common ancestor-thevon Neumann computer, their close coupling offsemantics to state transitions, their division of programminginto a world of expressions and a worldof statements, their inability to effectively use powerfulcombining forms for building new programsfrom existing ones, and their lack of useful mathematicalproperties for reasoning about programs. Analternative functional style of programming is foundedon the use of combining forms for creating programs.Functional programs deal with structured data, are oftennonrepetitive and nonrecursive, are hierarchicallyconstructed, do not name their arguments, and do not requirethe complex machinery of procedure declarationsto become generally applicable.  Combining forms canuse high level programs to build still higher levelones in a style not possible in conventional languages.Associated with the functional style of programmingis an algebra of programs whose variables range overprograms and whose operations are combining forms.This algebra can be used to transform programs andto solve equations whose "unknowns" are programsin much the same way one transforms equations in highschool algebra.  These transformations are givenby algebraic laws and are carried out in the same languagein which programs are written.  Combiningforms are chosen not only for their programming powerbut also for the power of their associated algebraiclaws.  General theorems of of the algebra give the detailedbehavior and termination conditions for largeclasses of programs.  A new class of computing systemsuses the functional programming style both inits programming language and in its state transitionrules.  Unlike von Neumann languages, these systemshave semantics loosely coupled to states-only onestate transition occurs per major computation.
3078	Chattergy, R.;Pooch, U.W.;	Analysis of the Availability of ComputerSystems Using Computer- Aided Algebra	Analytical results, related to the availabilityof a computer system constructed of unreliableprocessors, are presented in this paper.  These resultsare obtained by using various computer-aidedalgebraic manipulation techniques.  A major purpose ofthis paper is to demonstrate that the difficultiesof obtaining analytical solutions to Markov processescan be considerably reduced by the applicationof symbol manipulation programs.  Since many physicalsystems can be modeled by Markov and semi-Markovprocesses, the potential range of application of these techniquesis much wider than the problem of availabilityanalyzed here.
3079	Shostak, R.E.;	An Algorithm for Reasoning About Equality	A simple technique for reasoning about equalitiesthat is fast and complete for ground formulaswith function symbols and equality is presented.A proof of correctness is given as well.
3080	Samet, H.;	Proving the Correctness of Heuristically Optimized Code	A system for proving that programs writtenin a high level language are correctly translatedto a low level language is described.  A primary use ofthe system is as a post optimization step in codegeneration.  The low level language programs need notbe generated by a compiler and in fact could behand coded.  Examples of the usefulness of such a systemare given.  Some interesting results are theability to handle programs that implement recursion bybypassing the start of the program, and the detectionand pinpointing of a wide class of errors in the lowlevel language programs.  The examples demonstratethat optimization of the genre of this paper can resultin substantially faster operation and the savingof memory in terms of program and stack sizes.
3081	Baker, H.G. Jr.;	Shallow Binding in Lisp 1.5	Shallow binding is a scheme which allows thevalue of a variable to be accessed in a boundedamount of computation.  An elegant model for shallow bindingin  Lisp 1.5 is presented in which context-switchingis an environment tree transformation called rerooting.Rerooting is completely general and reversible,and is optional in the sense that a Lisp 1.5 interpreterwill operate correctly whether or not rerootingis invoked one very context change.   Since rerootingleaves assoc [v, a] invariant, for all variablesv and all environments a, the programmer can have accessto a rerooting primitive, shallow[], which giveshim dynamic control over whether accesses are shallow ordeep, and which affects only the speed of executionof a program, not its semantics.  In addition, multipleprocesses can be active in the same environmentstructure, so long as rerooting is an indivisible operation.Finally, the concept of rerooting is shownto combine the concept of shallow binding in Lisp withDijkstra's display for Algol and hence is a generalmodel for shallow binding.
3082	Lamport, L.;	Time, Clocks, and the Ordering of Events in a Distributed System	The concept of one event happening beforeanother in a distributed system is examined, andis shown to define a partial ordering of the events.A distributed algorithm is given for synchronizinga system of logical clocks which can be used to totallyorder the events.  The use of the total orderingis illustrated with a method for solving synchronizationproblems.  The algorithm is then specializedfor synchronizing physical clocks, and a bound is derivedon how far out of synchrony the clocks canbecome.
3083	Halatsis, C.;Philokyprou, G.;	Pseudochaining in Hash Tables	This paper presents pseudochaining as a newcollision-resolution method.  Pseudochaining ishalf way between open addressing and chaining.  It owesits name to the fact that link fields are presentin each cell of the hash table which permits "chaining"of the first overflow items in the table.  Theefficiency of the method is derived and a tradeoff analysis is given.
3084	Perl, Y.;Itai, A.;Avni, H.;	Interpolation Search -A Log LogN Search	Interpolation search is a method of retrievinga desired record by key in an ordered file byusing the value of the key and the statistical distributionof the keys.  It is shown that on the averagelog logN file accesses are required to retrieve a key,assuming that the N keys are uniformly distributed.The number of extra accesses is also estimated and shownto be very low.  The same holds if the cumulativedistribution function of the keys is known.  Computationalexperiments confirm these results.
3085	Chin, F.Y.;	An O(n) Algorithm for Determining a Near-OptimalComputation Order of Matrix Chain Products	This paper discusses the computation of matrixchain products of the form M1 x M2 x ... x Mnwhere Mi's are matrices.  The order in which the matricesare computed affects the number of operations.A sufficient condition about the association of thematrices in the optimal order is presented.  AnO(n) algorithm to find an order of computation whichtakes less than 25 percent longer than the optimaltime Topt is also presented.  In most cases, the algorithmyields the optimal order or an order whichtakes only a few percent longer than Topt (less than 1 percent on the average).
3086	Fredman, M.L.;Weide, B.;	On the Complexity of Computing the Measure of U[ai, bi]	The decision tree complexity of computing themeasure of the union of n (possibly overlapping)intervals is shown to be  (n log n), even if comparisonsbetween linear functions of the interval endpointsare allowed.  The existence of an   (n log n) lower boundto determine whether any two of n real numbersare within   of each other is also demonstrated.  Theseproblems provide an excellent opportunity fordiscussing the effects of the computational model onthe ease of analysis and on the results produced.
3087	Waltz, D.L.;	An English Language Question Answering Systemfor a Large Relational Database	By typing requests in English, casual userswill be able to obtain explicit answers from alarge relational database of aircraft flight and maintenancedata using a system called PLANES.  Thedesign and implementation of this system is described andillustrated with detailed examples of the operationof system components and examples of overall systemoperation.  The language processing portion of thesystem uses a number of augmented transition networks,each of which matches phrases with a specificmeaning, along with context registers (his tory keepers)and concept case frames; these are used for judgingmeaningfulness of questions, generating dialogue for clarifyingpartially understood questions, and resolvingellipsis and pronoun reference problems.  Other system componentsconstruct a formal query for the relationaldatabase, and optimize the order of searching relations.Methods are discussed for handling vague orcomplex questions and for providing browsing ability.Also included are discussions of important issuesin programming natural language systems for limited domains,and the relationship of this system to others.
3088	Teory, T.J.;	General Equations for Idealized CPU-I/O Overlap Configurations	General equations are derived for estimatingthe maximum possible utilization of main storagepartitions, CPU and I/O devices under different conditionsin an idealized CPU-I/O overlap model of multiprogrammedcomputer systems.  The equations are directly applicableto any configuration consisting  of sets ofidentical CPU's I/O processors, main storage partitionsand user tasks.  Examples are provided to illustratethe use of the equations to compute effective processingtime per record and expected timesharing responsetime under both balanced and unbalanced resource utilization conditions.
3089	Gelenbe, E.;Derochette, D.;	Performance of Rollback Recovery Systems under Intermittent Failures	A mathematical model of a transaction-orientedsystem under intermittent failures is proposed.The system is assumed to operate with a checkpointingand rollback/recovery method to ensure reliableinformation processing.  The model is used to derive theprincipal performance measures, including availability,response time, and the system saturation point.
3090	Kling, R.;	Automated Welfare Client-Tracking and ServiceIntegration: The Political Economy of Computing	The impacts of an automated client-trackingsystem on the clients, caseworkers, administrators,and operations of the welfare agencies that use it arereported.  The major impact of this system wasto enhance the administrative  attractiveness of theusing agencies in the eyes of funders rather thanto increase their internal administrative efficiency.This impact is a joint product of both the technicalfeatures of the computer-based system and of the organizationaldemands placed upon different agencies,administrators, and caseworkers.  It illustrates theway "successful" automated information systems fitthe political economies of the groups that use them.
3091	Chrysler, E.;	Some Basic Determinants of Computer Programming Productivity	The propose of this research was to examinethe relationship between processing characteristicsof programs and experience characteristics of programmersand program development time.  The ultimateobjective was to develop a technique for predictingthe amount of time necessary to create a computerprogram.  The fifteen program characteristics hypothesizedas being associated with an increase in programmingtime required are objectively measurable from preprogrammingspecifications.  The five programmer characteristicsare experience-related and are also measurable before a programmingtask is begun.  Nine program characteristicsemerged as major influences on program development time,each associated with increased program developmenttime.  All five programmer characteristics were foundto be related to reduced program development time.A multiple regression  equation which contained one programmercharacteristic and four program characteristicsgave evidence of good predictive power forforecasting program development time.
3092	Lientz, B.P.;Swanson, E.B.;Tompkins, G.E.;	Characteristics of Application Software Maintenance	Maintenance and enhancement of applicationsoftware consume a major portion of the total lifecycle cost of a system.  Rough estimates of the totalsystems and programming resources consumed rangeas high as 75-80 percent in each category.  However,the area has been given little attention in theliterature.  To analyze the problems in this area aquestionnaire was developed and pretested.  It wasthen submitted to 120 organizations.  Respondents totaled69.  Responses were analyzed with the SPSSstatistical package.  The results of the analysis indicatethat: (1) maintenance and enhancement do consumemuch of the total resources of systems and programminggroups; (2) maintenance and enhancement tend tobe viewed by management as at least somewhat more importantthan new application software development;(3) in maintenance and enhancement, problems of a managementorientation tend to be more significantthan those of a technical orientation; and (4) userdemands for enhancements and extension constitutethe most important management problem area.
3093	Mickunas, M.D.;Modry, J.A.;	Automatic Error Recovery for LR Parsers	In this paper we present a scheme for detectingand recovering from syntax errors in programs.The scheme, which is based on LR parsing, is drivenby information which is directly and automaticallyobtainable from the information that is already presentin an LR parser.  The approach, which is patternedafter that of Levy and Graham and Rhodes, appears toprovide error recovery which is both simple andpowerful.
3094	Cohen, J.;Roth, M.S.;	Analyses of Deterministic Parsing Algorithms	This paper describes an approach for determiningthe minimum, maximum, and average times toparse sentences acceptable by a deterministic parser.These quantities are presented in the form ofsymbolic formulas, called time-formulas.  The variablesin these formulas represent not only the lengthof the input string but also the time to perform elementaryoperations such as pushing, popping, subscripting,iterating, etc.  By binding to the  variables actual numericalvalues corresponding to a given compiler-machineconfiguration, one can determine the execution timefor that configuration.  Time-formulas are derivedby examining the grammar rules and the program representingthe algorithm one wishes to analyze.  Theapproach is described by using a specific grammar that definessimple arithmetic expressions.  Two deterministicparsers are analyzed: a top-down recursive descentLL(1) parser, and a bottom-up SLR(1) parser.  Thepaper provides estimates for the relative efficienciesof the two parsers.  The estimates applicableto a specific machine, the PDP-10, are presented andsubstantiated buy benchmarks.  Finally, the paperillustrates the proposed approach by applying it tothe analyses of parsers for a simple programminglanguage.
3095	Driscoll, J.R.;Lien, Y.E.;	A Selective Traversal Algorithm for Binary Search Trees	The problem of selecting data items froma binary search tree according to a list of rangeconditions is considered.  The process of visiting aminimal number of nodes to retrieve data satisfyingthe range conditions is called selective traversal.  Presentedin this paper is an algorithm for selectivetraversal which uses a tag field for each node in thetree.  The algorithm is particularly useful andefficient when examination of data is more timeconsuming than examination of a tag field.
3096	Zweben, S.H.;McDonald, M.A.;	An Optimal Method for Deletion in One-Sided Height-Balanced Trees	A one-sided height-balanced tree is a binarytree in which every node's right subtree has aheight which is equal to or exactly one greater than theheight of its left subtree.  It has an advantageover the more general AVL tree in that only one bitof balancing information is required (two bits arerequired for the ACL tree).  It is shown that deletion ofan arbitrary node of such a tree can be accomplishedin O(logn) operations, where n is the number of nodesin the tree.  Moreover the method is optimal inthe sense that its complexity cannot be reduced in orderof magnitude.  This result, coupled with earlierresults by Hirschberg, indicates that, of the three basicproblems of insertion, deletion, and retrieval,only insertion is adversely affected by this modification of an AVL tree.
3097	Sites, R.L.;	Optimal Shift Strategy for a Block-Transfer CCD Memory	For the purposes of this paper, a block-transferCCD memory is composed of serial shift registerswhose shift rate can vary, but which have a definite minimumshift rate (the refresh rate) and a definitemaximum shift rate.  The bits iin the shift registersare numbered 0 to N - 1, and blocks of N bits arealways transferred, always starting at bit 0.   Whatis the best shift strategy so that a block transferrequest occurring at a random time will have to wait theminimal amount of time before bit 0 can be reached?The minimum shift rate requirement does not allow oneto  simply "park" at bit 0 and wait for a transferrequest.  The optimal strategy involves shifting as slowlyas possible until bit 0 is passed, then shiftingas quickly as possible until a critical boundary isreached, shortly before bit 0 comes around again.This is called the "hurry up and wait" strategy and is wellknown outside the computer field.  The block-transferCCD memory can also be viewed as a paging drumwith a variable (bounded) rotation speed.
3098	Tadikamalla, P.R.;	Computer Generation of Gamma Random Variables	A new method for generating random variablesfrom the gamma distribution with nonintegral shapeparameter a is proposed.  This method is similar to twoother methods recently given by Wallace and Fishman.It is compared with Fishman's and Ahrens and Dieter's methods.The core storage requirements and programmingeffort for this method are similar to those of Fishman'smethod.  The proposed method is the same asFishman's method for 1 < a < 2 and is faster than Fishman'smethod for 3 < a < 19.  Also, the proposedmethod is much simpler than Ahrens and Dieter's method and is faster for a < 8.
3099	Fleisher, J.M.;Meyer, R.R.;	New Sufficient Optimality Conditions forInteger Programming and their Application	The purpose of this report is to present anew class of sufficient optimality conditions forpure and mixed integer programming problems.  Some ofthe sets of sufficient conditions presented canbe thought of as generalizations of optimality conditionsbased on primal-dual complementarity in linearprogramming.  These sufficient conditions are particularlyuseful for the construction of difficult integerprogramming problems with known optimal solutions.  Theseproblems may then be used to test and/or "benchmark"integer programming codes.
3100	Hayes-Roth, F.;McDermott, J.;	An Interference Matching Technique for Inducing Abstractions	A method for inducing knowledge by abstractionfrom a sequence of training examples is described.The proposed method, interference matching, induces abstractionsby finding relational properties commonto two or more exemplars.  Three tasks solved by a programthat uses an interference-matching algorithmare presented.  Several problems concerning the descriptionof the training examples and the adequacyof interference matching are discussed, and directionsfor future research are considered.
3101	Hanson, D.;Griswold, R.E.;	The SL5 Procedure Mechanism	This paper describes an integrated proceduremechanism that permits procedures to be used asrecursive functions or as coroutines.  This integrationis accomplished by treating procedures and theiractivation records (called environments) as data objectsand by decomposing procedure invocation intothree separate components at the source-language level.In addition, argument binding is under the controlof the programmer, permitting the definition of variousmethods of argument transmission in the sourcelanguage itself.  The resulting procedure mechanism,whichis part of the SL5 programming language, iswell suited to goal-oriented problems and to other problemsthat are more readily programmed by usingcoroutines. Several examples are given.
3102	Karr, M.;Loveman III, D.B.;	Incorporation of Units into Programming Languages	The issues of how a programming language mightaid in keeping track of physical units (feet,sec, etc.) are discussed.  A method is given for theintroduction of relationships among units (a wattis volts*amps, a yard is three feet) and subsequent automaticconversion based upon these relationships.Various proposals for syntax are considered.
3103	Low, J.R.;	Automatic Data Structure Selection: An Example and Overview	The use of several levels of abstraction hasproved to be very helpful in constructing andmaintaining programs.  When programs are designed with abstractdata types such as sets and lists, programmertime can be saved by automating the process of fillingin low-level implementation details.  In the past,programming systems have provided only a single generalpurpose implementation for an abstract type.Thus the programs produced using abstract types werethen inefficient in space or time.  In this papera system for automatically choosing efficient implementationsfor abstract types from a library of implementationsis discussed.  This process is discussed in detail foran example program.  General issues in data structureselection are also reviewed.
3104	Geller, M.;	Test Data as an Aid in Proving Program Correctness	Proofs of program correctness tend to be longand tedious, whereas testing, though useful indetecting errors, usually does not guarantee correctness.This paper introduces a techniques wherebytest data can be used in proving program correctness.In addition to simplifying the process of provingcorrectness, this method simplifies the process of providingaccurate specification for a program.  Theapplicability of this technique to proceduresand recursive programs is demonstrated.
3105	Jones, A.K.;Liskov,B.H.;	A Language Extension for Expressing Constraints on Data Access	Controlled sharing of information is needed anddesirable for many applications and is supportedin operating systems by access control mechanisms.  Thispaper shows how to extend programming languagesto provide controlled sharing.  The extension permitsexpression of access constraints on shared data.Access constraints can apply both to simple objects, andto objects that are components of larger objects,such as bank account records in a bank's data base.The constraints are stated declaratively, and canbe enforced by static checking similar to type checking.The approach can be used to extend any strongly-typedlanguage, but is particularly suitable for extendinglanguages that support the notion of abstract datatypes.
3106	Clark, D.W.;	A Fast Algorithm for Copying List Structures	An algorithm is presented for copying an arbitrarilylinked list structure into a block ofcontiguous storage locations without destroying  the originallist.  Apart from a fixed number of programvariables, no auxiliary storage, such as a stack, is used.The algorithm needs no mark bits and operatesin linear time.  It is shown to be significantly fasterthan Fisher's algorithm, the fastest previouslinear-time algorithm for the same problem.  Its speedcomes mainly from its efficient list-traversaltechnique, which folds the processing stack into thestructure being built, and from its classificationof list cells into nine types, which enables processingoperations to be optimized for each type.
3107	Cheng, R.C.H.;	Generating Beta Variates with Nonintegrel Shape Parameters	A new rejection method is described for generatingbeta variates.  The method is compared withpreviously published methods both theoretically and throughcomputer timings.  It is suggested that themethod has advantages in both speed and programmingsimplicity over previous methods, especially for"difficult" combinations of parameter values.
3108	Even, S.;Rodeh, M.;	Economical Encoding of Commas Between Strings	A method for insertion of delimiters betweenstrings without using new symbols is presented.As the lengths of the strings increase, the extra cost,in terms of prolongation, becomes vanishinglysmall compared to the lengths of the strings.
3109	Vuillemin, J.;	A Data Structure for Manipulating Priority Queues	A data structure is described which can be usedfor representing a collection of priority queues.The primitive operations are insertion, deletion,union, update, and search for an item of earliestpriority.
3110	Szymanski, T.G.;	Assembling Code for Machines with Span-Dependent Instructions	Many modern computers contain instructionswhose lengths depend on the distance from a giveninstance of such an instruction to the operand of thatinstruction.  This paper considers the problemof minimizing the lengths of programs for such machines.An efficient solution is presented for thecase in which the operand of every such "span-dependent"instruction is either a label or an assembly-timeexpression of a certain restricted form.If this restrictionis relaxed by allowing these operands tobe more general assembly-time expressions, thenthe problem is shown to be NP-complete.
3111	Merkle, R.C.;	Secure Communications Over Insecure Channels	According to traditional conceptions of cryptographicsecurity, it is necessary to transmita key, by secret means, before encrypted messages canbe sent securely.  This paper shows that it ispossible to select a key over open communications channelsin such a fashion that communications securitycan be maintained.  A method is described which forcesany enemy to expend an amount of work which increasesas the square of the work required of the two communicantsto select the key.  The method provides alogically new kind of protection against the passiveeaves dropper.  It suggests that further researchon this topic will be highly rewarding, bothin a theoretical and a practical sense.
3112	Baker, H.G.;	List Processing in Real Time on a Serial Computer	A real-time list processing system is onein which the time required by the elementary listoperations (e.g. CONS, CAR, CDR, RPLACA, REPLACD, EQ,and ATOM in LISP) is bounded by a (small) constant.Classical implementations of list processing systemslack this property because allocating a list cellfrom the heap may cause a garbage collection, which processrequires time proportional to the heap sizeto finish.  A real-time list processing system is presentedwhich continuously reclaims garbage, includingdirected cycles, while linearizing and compacting theaccessible cells into contiguous locations to avoidfragmenting the free storage pool.  The program is smalland requires no time-sharing interrupts, makingit suitable for microcode.  Finally, the system requiresthe same average time, and not more than twicethe space, of a classical implementation, and thosespace requirements can be reduced to approximatelyclassical proportions by compact list representation.Arrays of different sizes, a program stack, andhash linking are simple extensions to our system, andreference counting is found to be inferior formany applications.
3113	Lew, A.;	Optimal Conversion of Extended-EntryDecision Tables with General Cost Criteria	A general dynamic programming algorithm for convertinglimited, extended, or mixed entry decisiontables to optimal decision trees is presented which cantake into account rule frequencies or probabilities,minimum time and/or space cost criteria, common actionsets, compressed rules and ELSE rules, sequencingconstraints on condition tests, excludable combinationsof conditions, certain ambiguities, and interruptedrule masking.
3114	Heckel, P.;	A Technique for Isolating Differences Between Files	A simple algorithm is described for isolatingthe differences between two files.  One applicationis the comparing of two versions of a source programor other file in order to display all differences.The algorithm isolates differences in a way that correspondsclosely to our intuitive notion of difference,is easy to implement, and is computationally efficient,with time linear in the file length.  For mostapplications the algorithm isolates differences similarto those isolated by the longest common subsequence.Another application of this algorithm merges filescontaining independently generated changes into asingle file.  The algorithm can also be used to generateefficient encodings of a file in the form ofthe differences between itself and a given "datum" file,permitting reconstruction of the original filefrom the difference and datum files.
3115	Payne, W.H.;McMillen, K.L.;	Orderly Enumeration of Nonsingular BinaryMatrices Applied to Text Encryption	Nonsingular binary matrices of order N, i.e.,nonsingular over the field {0, 1}, and an initialsegment of the natural numbers are placed in one-to-onecorrespondence.  Each natural number correspondsto two intermediate vectors.  These vectors are mapped intoa nonsingular binary matrix.  Examples ofcomplete enumeration of all 2 x 2 and 3 x 3 nonsingularbinary matrices were produced by mapping theintermediate vectors to the matrices.  The mappinghas application to the Vernam encipherment methodusing pseudorandom number sequences.  A bit string formedform bytes of text of a data encryption keycan be used as a representation of a natural number.This natural number is transformed to a nonsingularbinary matrix.  key leverage is obtained by using thematrix as a"seed" in a shift register sequencepseudorandom number generator.
3116	Boyse, J.W.;	Interference Detection Among Solids and Surfaces	In many industrial environments it is necessary to determine whetherr there is interference among components.  There are many potentialinterference problems in products made up of assemblies of componentsand in product manufacturing and testing.  Typically, drawingsare used in an attempt to detect such unwanted interferences,but the two-dimensional, static drafting medium does not always showinterferences among three-dimensional, moving parts.  This paperpresents a computer representation for solids and surfaces and algorithmswhich carry out interference checking among objects so represented.Objects are represented as polyhedra or as piecewise planarsurfaces.  Two types of interference checking are discussed:detection of intersections among objects in fixed positions and detectionof collisions among objects moving along specified trajectories.
3117	Colton, K.W.;	The Impact and Use of Computer Technology by the Police	Over the past decade there has been a significant growthin the use of computer technology by U.S. police departments.  Thisgrowth, however, has been at a slower rate than predicted in theearly 1970's.  Further, when computer applications extendbeyond "routine" uses to "nonroutine" efforts, such as resource allocationor computer-aided-dispatch systems where the machine begins to becomea tool for decision making, strategic planning and person/machineinteraction, the results of the technology to date have beenmixed.  This paper reports on case studies and surveys which provinsightson the implementation and impact of police computer technologyand the relationship of this technology to law enforcement and society.
3118	Bongiovanni, G.C.;Luccio, F.;	Permutation of Data Blocks in a Bubble Memory	A common internal organization of bubble memories consists of a set of (minor)loops, connected through another (major) loop.  The problem of obtaining anygive n permutation of the minor loop contents in minimum time is studiedin this paper.  A lower bound to the number of steps required buya permutation algorithm is derived, and the class of optimum algorithms isidentified.
3119	Sauer, C.H.;Chandy, K.M.;	The Impact of Distributions and Disciplineson Multiple Processor Systems	Simple queueing models are used to study the performance tradeoffs ofmultiple processor systems.  Issues considered include the impact of CPUservice disciplines and distributions, level of multiprogramming,multitasking, and job priorities.
3120	Banatre, J.P.;Routeau, J.P.;Trilling, L.;	An Event-Driven Compiling Technique	Due to the linear structure of source text, difficulties may arise in aone-pass compilation process.  These difficulties occur when an entitycannot be processed because of a forward reference to informationonly obtainable from subsequent entities.  Classic solutionsask for data structures appropriate for each case.  A technique ispresented here which uses instead control structures, namely eventsand processes.  The work of the compiler-writer becomes easier bothconceptually and in practice because he can forget these problemsat the outset and he avoids special processing for each problem.This technique has been applied to the construction of an Algol68 compiler.  Three examples from that implementationare described and discussed here.
3121	Arsac, J.J.;	Syntactic Source to Source Transforms and Program Manipulation	Syntactic transforms are the source to source program transformationswhich preserve the history of computation, and thus do notmodify the execution time.  Combined with a small number of primitivesemantic transforms, they provide a powerful tool for programmanipulation.  A catalogue of syntactic transforms, and its use forsolution of a system of program equations, is given.  Examples ofderivation of more complex source to source transformations are alsopresented.  Two case studies illustrate the way in which syntacticand semantic source to source transformations may be used fordevelopment of clear, simple, and reasonably efficient programs.
3122	Taulbee, O.E.;Conte, S.D.;	Production and Employment of Ph.D.'s in Computer Science - 1977 and 1978	
3123	Fairley, R.E.;	Employment Characteristics of Doctoral Level Computer Scientists	
3124	Gull,W.E.;Jenkins, M.A.;	Recursive Data Structures in APL	A mathematical study of three approaches for defining nestedarrays in APL is presented.  Theorems exhibiting the relationshipsbetween the definitional systems are given and illustrated through graphrepresentations.  One of the approaches is used to define anAPL array to be a recursive data structure equivalent to a tree structurein which all data is stored at the leaves as homogeneousarrays of numbers and characters.  An extension of APL is proposed thatincludes new primitive functions to manipulate the nestinglevel of arrays and new operators to assist in theconstruction of data-driven algorithms.
3125	Morel, E.;Renvoise, C.;	Global Optimization by Suppression of Partial Redundancies	The elimination of redundant computations and the moving of invariantcomputations out of loops are often done separately, with invariantsmoved outward loop by loop.  We propose to do both at once andto move each expression directly to the entrance of the outermostloop in which it is invariant.  This is done by solving a moregeneral problem, i.e. the elimination of computations performedtwice on a given execution path.  Such computations are termed partiallyredundant.  Moreover, the algorithm does not require any graphicalinformation or restrictions on the shape of the program graph.Testing this algorithm has shown that its execution cost is nearlylinear with the size of the program, and that it leadsto a smaller optimizer that requires less execution time.
3126	Anderson, M.G.;	Comments on Perfect Hashing Functions: A SingleProbe Retrieving  Method for Static Sets	
3127	Cheriton, D.R.;Malcolm, M.A.;Melen, L.A.;Sager, G.R.;	Thoth, a Portable Real-Time Operating System	Thoth isa real-time operating system which is designed to be portableover a large set of machines.  It is currently running on two minicomputerswith quite different architectures.  Both the system and applicationprograms which use it are written in a high-level language.Because the system is implemented by the same software on differenthardware, it has the same interface to user programs.  Hence,application programs which use Thoth are  highly portable.  Thothencourages structuring programs as networks of communicating processesby providing efficient interprocess communication primitives.
3128	Reed, D.P.;Kanodia, R.K.;	Synchronization with Eventcounts and Sequencers	Synchronization of concurrent processes requires controlling the relativeordering of events in the processes.A new synchronization mechanism is proposed, usingabstract objects called eventcounts and sequencers, that allows processesto control the ordering of events directly, rather than using mutualexclusion to protect manipulations of shared variables that controlordering of events.  Direct control of ordering seems to simplifycorrectness arguments and also simplifies implementation in distributedsystems.  The mechanism is defined formally, and then severalexamples of its use are given.  The relationship of the mechanismto protection mechanisms in the system is explained; in particular,eventcounts are shown to be applicable to situations where confinementof information matters.  An implementation of eventcounts and sequencers in a system with shared memory is described.
3129	Mendelson, H.;Pliskin, J.S.;Yechiali, U.;	Optimal Storage Allocation for Serial Files	A computer system uses several serial files.  The files reside on adirect-access storage device in which storage space is limited.  Records areadded to the files either by jobs in batch processing mode, or by on-linetransactions. Each transaction (or job) generates a demand vector whichdesignates the space required in each file for record addition. Whenever onefile runs out of space, the system must be reorganized.  This paper considersseveral criteria for best allocating storage space to the files.
3130	Austing, R.H.;Barnes, B.H.;Bonnette, D.T.;Engel, G.L.;Stokes, G.;	CURRICULUM '78 - Recommendations for theUndergraduate Program in Computer Science	Contained in this report are the recommendations forthe undergraduate degree program in Computer Science of theCurriculum Committee on Computer Science (C3S) of the Associationfor Computing Machinery (ACM).   The core curriculum common to allcomputer science undergraduate programs is presented in terms ofelementary level topics and courses, and intermediate level courses.Elective courses, used to round out an undergraduate program,are then discussed, and the entire program including the computerscience component and other material is presented.  Issues relatedto undergraduate computer science education, such as servicecourses, supporting areas, continuing education, facilities,staff, and articulation are presented.
3131	Edgar, A.D.;Lee, S.C.;	FOCUS Microcomputer Number System	FOCUS is a number system and supporting computationalalgorithms especially useful for microcomputer control and othersignal processing applications.  FOCUS has the wide-rangingcharacter of floating-point numbers with a uniformity of state distributionsthat give FOCUS better than a twofold accuracy advantageover an equal word length floating-point system.  FOCUS computationsare typically five times faster than single precision fixed-pointor integer arithmetic for a mixture of operations, comparable inspeed with hardware arithmetic for many applications.  Algorithmsfor 8-bit and 16-bit implementations of FOCUS are included.
3132	Slagle, J.;	Experiments with Some Algorithms that FindCentral Solutions for Pattern Classification	In two-class pattern recognition, it is a standardtechnique to have an algorithm finding hyperplaneswhich separates the two classes in a linearly separable trainingset.  The traditional methods find a hyperplane which separates allpoints in the other, but such a hyperplane is not necessarily centeredin the empty space between the two classes.  Since a centralhyperplane does not favor one class or the other, it should havea lower error rate in classifying new points and is therefore betterthan a noncentral hyperplane.  Six algorithms for finding centralhyperplanes are tested on three data sets.  Although frequentlyused practice, the modified relaxation algorithm is very poor.Three algorithms which are defined in the paper are found to bequite good.
3133	Deliyanni, A.;Kowalski, R.A.;	Logic and Semantic Networks	An extended form of semantic network is defined, which canbe regarded as a syntactic variant of the clausal form of logic.By virtue of its relationship with logic, the extendedsemantic network is provided with a precise semantics,inference rules, and a procedural interpretation.  Onthe other hand, by regarding semantic networks as anabstract data structure for the representation of clauses, we provide atheorem-prover with a potentially useful indexing scheme and path-followingstrategy for guiding the search for a proof.
3134	Motzkin, D.;	The Use of Normal Multiplication Tablesfor Information Storage and Retrieval	This paper describes a method for the organization and retrieval of attributebased information systems, using the normal multiplication table as a directoryfor the information system.  Algorithms for the organization and retrieval of information are described.  This method is particularlysuitable for queries requesting a group of information items,all of which possess a particular set of attributes (and possiblysome other attributes as well).  Several examples are given; theresults with respect to the number of disk accesses and disk spaceare compared to other common approaches.  Algorithms evaluatingthe appropriateness of the above approach to a given information systemare described.  For a certain class of information systems,the normal multiplication table method yields far more rapid retrievalwith a more economical space requirement than conventional systems.Moreover this method incorporates an improved modification of the invertedfile technique.
3135	Lesk, A.M.;	Detection of Three-Dimensional Patterns of Atoms in Chemical Structures	An algorithm for detecting occurrences of a three-dimensional pattern ofobjects within a larger structure is presented.  The search techniquepresented uses the geometric structure of the pattern to definecharacteristics demanded of candidates for matching. This is usefulin cases where the properties of each atom, considered individually,do not adequately limit the number of sets of possible matchings.Several applications of this technique in the field of chemistryare: (1) in pharmacology: searching for a common constellationof atoms in molecules possessing similar biological activities;(2) in X-ray crystallography: fitting a structure or a structural fragmentto a set of peaks in the electron-density distribution ofa Fourier map; (3) in chemical documentation; retrieving froma file the structures containing specified substructures.
3136	Cale, E.G.;Gremillion, L.L.;McKenney, J.L.;	Price/Performance Patterns of U.S. Computer Systems	Econometric models of the U.S. computer market have been developed to studythe relationships between system price and hardware performance.  Singlemeasures of price/performance such as "Grosch's Law" are shown tobe so over simplified as to be meaningless.  Multiple-regression modelspredicting system cost as a function of several hardwarecharacteristics do, however, reveal a market dichotomy.  On one hand thereexists a stable, price predictable market for larger, generalpurpose computer systems.  The other market is the developing onefor small business computer systems, a market which is relativelyunstable with low price predictability.
3137	Bucci, G.;Streeter, D.N.;	A Methodology for the Design of Distributed Information Systems	A macro model of a distributed information system in presented.  The modeldescribes the major costs of using an informationsystem from the perspective of the end-user.  The making evident the effect ofvarious design and operating parameters on overall cost per transaction.The technique is illustrated by application to the designof an interactive transaction processing system.
3138	Hanson, R.J.;Wisniewski, J.A.;	A Mathematical Programming Updating Method Using ModifiedGivens Transformations and Applied to LP Problems	An efficient and numerically stable method is presented for the problem ofupdating an orthogonal decomposition of a matrix of column (or row) vectors.The fundamental idea is to add a column (or row) analogousto adding an additional row of data in a linear least squares problem.A column (or row) is dropped by a formal scaling with theimaginary unit,  -1, followed by least squares addition of the column(or row).  The elimination process for the procedure is successivessive application of the Givens transformation in modified (more efficient)form.  These ideas are illustrated with an implementationof the revised simplex method.  The algorithm is a general purposeone that does not account for any particular structure or sparsityin the equations.  Some suggested computational tests for determiningsigns of various controlling parameters in the revised simplexalgorithm are mentioned.  A simple means of constructingtest cases and some sample computing times are presented.
3139	Brelaz, D.;	New Methods to Color the Vertices of a Graph	This paper describes efficient new heuristicmethods to color the vertices of a graph which relyupon the comparison of the degrees and structure of a graph.  A methodis developed which is exact for bipartite graphs and is animportant part of heuristic procedures to find maximal cliques in generalgraphs.  Finally an exact method is given which performs betterthan the Randall-Brown algorithm and is able to color largergraphs, and the new heuristic methods, the classical methods, andthe exact method are compared.
3140	De Millo, R.A.;Lipton, R.J.;Perlis, A.J.;	Social Processes and Proofs of Theorems and Programs	It is argued that formal verifications ofprograms, no matter how obtained, will not play thesame key role in the development of computer science and softwareengineering as proofs do in mathematics.  Furthermore the absenceof continuity, the inevitability of change, and the complexity ofspecification of significantly many real programs make the formal verification process difficult to justify and manage.  It is feltthat ease of formal verification should not dominate programlanguage design.
3141	Chang, E.;Roberts, R.;	An Improved Algorithm for Decentralized Extrema-Findingin Circular Configurations of Processes	This note presents an improvement to LeLann'salgorithm for finding the largest (or smallest) of a set of uniquelynumbered processes arranged in a circle, in which no centralcontroller exists and the number of processes is not known a priori.This decentralized algorithm uses a technique of selectivemessage extinction in order to achieve an average number ofmessage passes of order (n log n) rather than O(n2).
3142	Sterling, T.D.;	Consumer Difficulties With Computerized Transactions:An Empirical Investigation	The prevalence with which errors may be encountered by theend targets of a computerized process is assessed.  How many andwhat type of errors occur?  How easily are they corrected?  Whatis the reaction of consumers to errors-to a failure to correctthem?  What can be learned by designers of large management packagesfrom such data? Results show that with the present state of theart, approximately 40 percent of individuals (or households) havingaverage contacts with different types of accounts experience oneor more errors per year.  Eighty percent relate to billing.  Attemptsto correct errors often turned out to be difficult and not alwayssuccessful. There appears to be some conflict between computer-usingorganizations and their public.  Also the role of poor management packages including poor software is indicated.  While mostmanagement systems may be adequate, results of the survey raiseconcerns about the timeliness and the number of designs of verylarge linked program packages (as EFT for instance).
3143	Reynolds, J.C.;	Reasoning About Arrays	A variety of concepts, laws, and notations are presented which facilitatereasoning about arrays.  The basic concepts include intervals and theirpartitions, functional restriction, images, pointwise extension of relations,ordering, single-point variation of functions, various equivalence relationsfor array values, and concatenation.  The effectivenessof these ideas is illustrated by informal descriptions ofalgorithms for binary search and merging, and by a short formal proof.
3144	Manthey, M.J.;	A Model for and DIscussion of Multi-Interpreter Systems	A multi-interpreter system is a system in which programs executeby virtue of being interpreted by other programs, which themselves mayeither be interpreted (i.e. nested interpreters) or run directly onthe host machine.  The model reveals the anatomy of interpretersand how these differ from procedures, and exhibits linksto protection domains and multiprocessor architectures.
3145	Lemos, R.S.;	An Implementation of Structured Walk-Throughsin Teaching Cobol Programming	The effectiveness of structuredwalk-throughs in teaching introductory Cobol programming was empiricallyassessed with a sample of 215 under-graduate business administrationmajors.  Cobol proficiency was measured by a final examinationtesting (a) knowledge of language rules, (b) ability to readand debug a program, and (c) the ability to write a program.  Analysisof multiple covariance was used to statistically adjust testscores for age and conditional reasoning scores. The findings provideempirical support for incorporating structured walk-throughsinto the programming learning process more effectivelydevelop student proficiency in writing Cobol programs.
3146	Busenberg, S.N.;Tam, W.C.;	An Academic Program Providing Realistic Training in Software Engineering	An academic program at Harvey Mudd College, calledthe Clinic program, brings projects from industry oncampus to be studied and solved by student teams.  The objective ofthe Clinic is to provide students, working as small teams undercareful faculty supervision, an opportunity to work on real worldproblems of sufficient magnitude and complexity.  Under this program,students can acquire essential skills of software engineering,such as team work, software project management, software designmethodology, and communication skills, in a realistic environment.Sample software projects undertaken by the Clinic are described.Experience so far has shown that the program is a viabletransition from an academic to industrial world.
3147	Alter, S.;	A Model for Automating File and Program Design in Business Application Systems	This paper discusses a model for finding an efficient implementation of abusiness application system whose logical specifications have been determinedin advance.  The model views file and program design as a problemof systematically coordinating the configurations of datasets andcomputations.  It uses a straight forward search technique todetermine aggregations of computations, aggregations of datasets, device,organization, and key order for each data set, key order foreach computation, and access method  for each dataset-computationpair.  Although computational results are presented for a sampleproblem involving 54 computations and 49 datasets, the main point ofthe paper is that the underlying model works computationally and is simple enough to be adapted to many file design situations.
3148	Feldman, J.A.;	High Level Programming for Distributed Computing	Programming for distributed and other loosely coupled systemsis a problem of growing interest.  This paper describes an approachto distributed computing at the level of general purpose programminglanguages.  Based on primitive notions of module, message,and transaction key, the methodology is shown to be independentof particular languages and machines.  It appears to be useful forprogramming a wide range of tasks.  This is part of an ambitiousprogram of development in advanced programming languages, and relationswith other aspects of the project are also discussed.
3149	Shapira, R.;Freeman, H.;	The Cyclic Order Property of Vertices as an Aid in Scene Analysis	A cyclic-order property is defined for bodies bounded by smooth-curved faces.The property is shown to be useful for analyzing pictures of such bodies,particularly when the line data extracted from the pictures are imperfect.This property augments previously known grammatical rules thatdetermine the existence of three-dimensional bodies correspondingto given two-dimensional line-structure data.
3150	Winograd, T.;	Beyond Programming Languages	As computer technology matures, our growing ability to create large systems isleading to basic changes in the nature of programming.  Current programminglanguage concepts will not be adequate for building and maintainingsystems of the complexity called for by the tasks we attempt.  Justas high level languages enabled the programmer to escape from theintricacies of a machine's order code, higher level programming systemscan provide the means to understand and manipulate complexsystems and components.  In order to develop such systems, we needto shift our attention away from the detailed specification ofalgorithms, towards the description of the properties of the packagesand objects with which we build.  This paper analyzes some of theshortcomings of programming languages as they now exist,and lays out some possible directions for future research.
3151	Preparata, F.P.;	An Optimal Real-Time Algorithm for Planar Convex Hulls	An algorithm is described for the construction in real-time of theconvex hull of a set of n points in the plane.   Using an appropriate datastructure, the algorithm constructs the convex hull by successiveupdates, each taking time O(log n), thereby achieving a totalprocessing time O(n log n).
3152	Fischer, P.C.;Probert, R.L.;	Storage Reorganization Techniques forMatrix Computation in a Paging Environment	In order to multiply matrices while minimizingthe number of page fetches required, it is often more efficient toreorganize the data into submatrix form and to use block multiplicationrather than to use the best known algorithms which leave thematrices stored in row-(or column-)oriented form.  An efficientmethod for accomplishing this reorganization is given.  This alsomakes possible the derivation of an asymptotically better boundfor multiplication of matrices given in row-oriented form by adaptingthe technique of Strassen to the reorganized data.  The reorganization/blockmultiplication scheme is shown to be advantageous formatrices and pages of realistic size; the Strassen adaptation isnot.  The former scheme is also shown to be advantageous even ifthe transpose of one of the matrices is available at no additional cost.
3153	Hine, J.H.;Mitrani, I.;Tsur, S.;	The Control of Response Times in Multi-ClassSystems by Memory Allocations	The possibility of giving different quality of service to jobs of differentclasses by regulating their memory allocation is examined inthe context of a paged computer system.  Two parameterized algorithmswhich partition the main memory between two classes of jobs areconsidered.  Initially, a closed system consisting of a processor and paging and file devices, with fixed numbers of jobs, is studiedto determine optimal degrees of multiprogramming and the proportionof processor time devoted to each class.  Applying a decompositionapproach and treating the closed system as a single server,the response times in an open system with external arrivals arestudied.  The object is to investigate the effect of the memoryalocation parameters on the expected response times under the two algorithms.Numerical solutions and economical lower bounds for theexpected response times as functions of the control parametersare obtained.  A way of applying the results to systems with morethan two job classes is indicated.
3154	Kowalski, R.;	Algorithm = Logic + Control	An algorithm can be regarded as consisting of a logic component,which specifies the knowledge to be used in solving problems,and a control component, which determines the problem-solvingstrategies by means of which that knowledge is used.  The logic componentdetermines the meaning of the algorithm whereas the controlcomponent only affects its efficiency.  The efficiency of analgorithm can often by improving the control component without changingthe logic of the algorithm.  We argue that computer programs wouldbe more often correct and more easily improved and modified iftheir logic and control aspects were identified and separated inthe program text.
3155	Floyd, R.W.;	The Paradigms of Programming	
3156	Hirschberg, D.S.;Chandra, A.K.;Sarwate, D.V.;	Computing Connected Components on Parallel Computers	We present a parallel algorithm which uses n2 processors to find the connectedcomponents of an undirected graph with n vertices in time O(log2n).  AnO(log2n) time bound also can be achieved using only n$n/$log2n)) processors.The algorithm can be used to find the transitive closureof a symmetric Boolean matrix.  We assume that the processors haveaccess to a common memory.  Simultaneous access to the same locationis permitted for fetch instructions but not for store instructions.
3157	Dershowitz, N.;Manna, Z.;	Proving Termination with Multiset Orderings	A common tool for proving the termination of programs is the well-foundedset, a set ordered in such a way as to admit no infinite descending sequences.The basic approach is to find a termination function  that mapsthe values of the program variables into some well-founded set,such that the value of the termination function is repeatedly reducedthroughout the computation.  All too often, the termination functions requiredare difficult to find and are of a complexity outof proportion to the program under consideration. Multisets (bags)over a given well-founded set S are sets that admit multiple occurrencesof elements taken from S.  The given ordering on S inducesan ordering on the finite multisets over S.  This multiset orderingis shown to be well-founded.  The multiset ordering enables theuse of relatively simple and intuitive termination functions in otherwisedifficult termination proofs.  In particular, the multisetordering is used to prove the termination of production systems,programs defined in terms of sets of rewriting rules.
3158	Denning, D.E.;	Secure Personal Computing in an Insecure Network	A method for implementing secure personal computing in a networkwith one or more central facilities is proposed.  The method employs apublic-key encryption device and hardware keys.  Each user is responsiblefor his own security and need not rely on the security ofthe central facility or the communication links.  A user can safelystore confidential files in the central facility or transmit confidentialdata to other users on the network.
3159	Nelson, L.S.;	Further Remark on Stably Updating Mean and Standard Deviation Estimates	
3160	Feldman, J.A.;Sutherland, W.R.;	Rejuvenating Experimental Computer Science	This report is based on the results of an NSF sponsoredworkshop held in Wasington, D.C. on November 2, 1978.  The co-authors of thereport are: Gordon Bell, Digital Equipment Corporation; Bernard A. Galler,University of Michigan; Patricia Goldberg, IBM Corporation; JohnHamblen, University of Missouri at Rolla; Elliot Pinson, Bell TelephoneLaboratories; and Ivan Sutherland, California Institute ofTechnology.  Also participating in the workshop were representativesof NSF and other government agencies.  In addition to the authors,a number of other people have contributed to the contents of thisreport.  In preparation for the original workshop, all doctorate-grantingcomputer science departments in the nation were askedfor comments and suggestions on the problems of experimental computer science.A version of the current report dated January 15 was circulated to thesedepartments and to a number of industrial and government groups for criticism.The editors and authors of this final version gratefully acknowledge thecontribution of a large number of other people at all stages in the preparationof the report.$Note: Following this presentation of the report, there is aposition paper on the crisis in experimental computerscience written by the ACM Executive Committee.)
3161	McCracken, D.D., CCP;Denning, P.J.;Brandin, D.H.;	An ACM Executive Committee Position on the Crisisin Experimental Computer Science	
3162	Galil, Z.;	On Improving the Worst Case Running Timeof the Boyer-Moore String Matching Algorithm	It is shown how to modify the Boyer-Moore string matching algorithm so thatits worst case running time is linear even when multiple occurrences of thepattern are present in the text.
3163	Raiha,K.J.;Zweben, S.H.;	An Optimal Insertion Algorithm for One-SidedHeight-Balanced BInary Search Trees	An algorithm for inserting an element into a one-sided height-balanced(OSHB) binary search tree is presented.  The algorithm operates in timeO(log n), where n is the number of nodes inthe tree.  This represents an improvement over the best previously known insertion algorithms of Hirschberg and Kosaraju, which requiretime O(log 2n).  Moreover, the O(log n) complexity is optimal. Earlierresults have shown that deletion in such a structure canalso be performed in O(log n) time.  Thus the result of this papergives a negative answer to the question of whether such trees shouldbe the first examples of their kind, where deletion has a smaller timecomplexity than insertion.  Furthermore, it can now be concludedthat insertion, deletion, and retrieval in OSHB trees canbe performed in the same time as the corresponding operations forthe more general AVL trees, to within a constant factor.  However,the insertion and deletion algorithms for OSHB trees appear muchmore complicated than the corresponding algorithms for AVL trees.
3164	Hansen, W.J.;	Progressive Acyclic Digraphs-A Tool for Database Integrity	A progressive acyclic digraph (PAD) algorithm accepts are requests andmaintains a graph in an acyclic state.  When a request creates a cycle,nodes are, "detached" until the new are can be entered acyclicallyThis process is important in certain areas of database implementationin which there are constraints on the permissible sequencesof actions. Two PAD algorithms are presented; one uses a simplepath matrix representation and the other uses a list with an"artificial gradient."  Experiments suggest that for large N the secondis considerably faster, though both are asymptotically O(NR),where N is the number of nodes and R is the expected numberof nodes reachable along paths from any given node.
3165	Nagy, G.;Wagle, S.G.;	Approximation of Polygonal Maps by Cellular Maps	The approximation of polygonal thematic maps by cellularmaps, an important operation in geographical data processing,is analyzed.  The data organization used for representing the polygonalmaps is a widely used segment-based data structure, where classlabels identify the regions bordering each segment on either side.The approximation algorithm presented operates on such anorganization, eliminating the need for the recognition of region boundaries.Each segment is examined only once.  The versatility ofthe new organization is further illustrated by the outline of algorithmsfor area computation and point inclusion.  The algorithm isapplied to a set of soil maps converted to computer-readableform by means of a coordinate digitizer.
3166	Chan, T.F.;Lewis, J.G.;	Computing Standard Deviations: Accuracy	Four algorithms for the numerical computationof the standard deviation of (unweighted) sampled dataare analyzed.  Two of the algorithms are well-known in the statisticaland computational literature; the other two are new algorithmsspecifically intended for automatic computation.  Our discussion isexpository, with emphasis on reaching a suitable definition of"accuracy."  Each of the four algorithms is analyzed for the conditionsunder which it will be accurate.  We conclude that all fouralgorithms will provide accurate answers for many problems, but twoof the algorithms, one new, one old, are substantially more accurateon difficult problems than are the other two.
3167	West, D.H.D.;	Updating Mean and Variance Estimates: An Improved Method	A method of improved efficiencyis given for updating the mean and variance of weighted sampled datawhen an additional data value is included in the set.  Evidenceis presented that the method is stable and at leastas accurate as the best existing updating method.
3168	Laird, P.D.;	Comment on "An Optimal Evaluation of BooleanExpressions in an Online Query System."	
3169	Gudes, E.;Hoffman, A.;	Note on "An Optimal Evaluation of Boolean Expressionsin an Online Query System."	
3170	Lamport, L.;	On the Proof of Correctness of a Calendar Program	A formal specification is given for a simple calendarprogram, and the derivation and proof of correctness of the program aresketched.  The specification is easy to understand, and its correctness ismanifest to humans.
3171	Klint, P.;	Line Numbers Made Cheap	A technique is described for run-time line number administrationto be used for implementations of high level languages.  Under suitablecircumstances, this method requires absolutely no overhead,in either time or space, during execution of the program.
3172	Lozano-Perez, T.;Wesley, M.A.;	An Algorithm for Planning Collision-FreePaths Among Polyhedral Obstacles	This paper describes a collision avoidance algorithmfor planning a safe path for a polyhedral object moving amongknown polyhedral objects.  The algorithm transforms the obstaclesso that they represent the locus of forbidden positions for an arbitraryreference point on the moving object.  A trajectory of thisreference point which avoids all forbidden regions is free of collisions.Trajectories are found by searching a network which indicates, for each vertexin the transformed obstacles, which other vertices can be reached safely.
3173	Mayer, R.E.;	A Psychology of Learning BASIC	This paper addresses the question: What does a person knowfollowing learning of BASIC programming?  Several underlying conceptualstructures are identified: (1) a transaction is an event thatoccurs in the computer and involves some operation on some objectat some location, (2) a prestatement is a set of transactions correspondingto a line of code, (3) chunks are frequently occurringconfigurations of prestatements corresponding to several lines of code.
3174	Morris, R.;Thompson, K.;	Password Security: A Case History	This paper describes the history of the design of the passwordsecurity scheme on a remotely accessed time-sharing system.The present design was the result of countering observed attemptsto penetrate the system.  The result is a compromise betweenextreme security and ease of use.
3175	Peleg, S.;Rosenfeld, A.;	Breaking Substitution Ciphers Using a Relaxation Algorithm	Substitution ciphers are codes in which each letterof the alphabet has one fixed substitute, and the word divisionsdo not change.  In this paper the problem of breaking substitutionciphers is represented as a probabilistic labeling problem.Every code letter is assigned probabilities of representing plain textletters.  These probabilities are updated in parallel for allcode letters, using joint letter probabilities.  Iterating the updatingscheme results in improved estimates that finally lead tobreaking the cipher.  The method is applies successfully to two examples.
3176	Tarjan, R.E.;Yao, A.C.C.;	Storing a Sparse Table	The problem of storing and searching large sparse tables is ubiquitous incomputer science.  The standard technique for storing such tables ishashing, but hashing has poor worst-case performance.  We proposea good worst-case method for storing a static table of n entries,each an integer between 0 and N - 1.  The method requires 0(n) wwords of storage and allows O(logn N) access time.  Although our methodis a little complicated to use in practice, our analysis showswhy a simpler algorithm used for compressing LR parsing tables works so well.
3177	Shamir, A.;	How to Share a Secret	In this paper we show how to divide data D inton pieces in such a way that D is easily reconstructable from anyk pieces, but even complete knowledge of k - 1 pieces revealsolutely no information about D.  This technique enables the constructionof robust key management schemes for cryptographic systemsthat can function securely and reliably even when misfortunes destroyhalf the pieces and security breaches expose all but one of theremaining pieces.
3178	Kling, R.;	Introduction to the EFT Symposium	
3179	Kraemer, K.L.;Colton, K.W.;	Overview of the EFT Symposium	It is increasingly recognized that large-scale technologies such as EFThave the potential for aiding in the solution of current societal problems.Yet, these technologies also generate problems.  This symposiumpresents selected papers from a conference that sought to discoverwhat is currently known about EFT impacts in societyand what research is needed in the future.
3180	Lipis, A.H.;	Costs of the Current U.S. Payments System	Neither the banking industry norpublic policy makers have good information on the comparative costsof alternative payment systems such as cash, checks, credit cards,and EFT transactions.  As a result, EFT systems and services arelikely to be implemented without a valid assessment of whether theyare cost-justified, lst alone justified in terms of other criteria.
3181	Long, R.H.;	Public Protection and Education with EFT	Research has revealed the existence of widespreadmisinformation and lack of knowledge about EFT amongbusiness and government as well as consumers.  As a result, any effortto stimulate meaningful public participation in decisions onthe introduction of EFT systems will require a coordinated educationaleffort of considerable scale.  In addition, research has revealedshortcomings in the present system for defining responsibilities,liabilities, and avenues of recourse.  THis article presentsseveral possible alternatives for improving the current system, butongoing research is also needed to assure that actions taken willbe responsive to the changing environment and consumer needs.
3182	Parker, D.B.;	Vulnerabilities of EFTs to Intentionally Caused Losses	The hypothesis that consumersare provided greater accuracy and freedom from error and fraud withelectronic funds transfer systems (EFTs) is discussed in lightof the technical capabilities and potential of the computer to protectagainst both accidentally and intentionally caused losses.Although the nomenclature for business crimes remains the same as formanual depository and other financial service systems - for example,fraud, theft, embezzlement - the characteristics of the crimesare new. The changes resulting from the accelerating use of EFTs andits continual technological advances broaden the scope of securityissues to be examined.  Factors such as backup requirements,regulatory and legislative actions, and economics give rise tothe urgency for immediate research into solutions for emergingEFTs - related vulnerabilities.
3183	Kraemer, K.L.;Colton, K.W.;	Policy, Values, and EFT Research: Anatomy of a Research Agenda	There is an emerging recognition that EFT systems have the potential tovastly alter the payment and fund transfer system in American society.A number of forces and actors are involved in this evolution,and the values vary significantly depending on individual and institutionalperspectives. These value conflicts are highlightedin a six-part research agenda: technological issues in EFT, EFT impactson people, economic impact of EFT, regulation and control ofEFT, and evaluating and monitoring EFT systems.
3184	Nuar, P.;	Revised Report on the Algorithmic Language ALGOL 60	The report gives a complete defining description of the internationalalgorithmic language ALGOL 60. This is a language suitable for expressinga large class of numerical processes in a form sufficiently concise fordirect automatic translation into the language of programmed automaticcomputers.
3185	Dijkstra, E. W.;	The Humble Programmer	We shall do a much better programming job, provided that we approach thetask with a full appreciation if its tremendous difficulty, provided that westick to modest and elegant programming languages, provided that we respectthe intrinsic limitations of the human mind and approach the task as VeryHumble Programmers.
3186	Dijkstra, E. W.;	GO TO Statement Considerd Harmful	
3187	Blair, C.R.;	Certification of Algorithm 271 (QUICKERSORT)	QUICKERSORT compiled and run without correction through the ALDEP translatorfor the CDC 1604A. Comparison of average sorting items with other recentlypublished algorithms demonstrates QUICKERSORT's superior performance.
3188	Zemanek, H.;	Semiotics and Programming Languages	I have based my paper on semiotics and its three dimension. I should insertat this point that language has many aspects and that pragmatics, semantics andsyntactics do not necessary cover all of them. One can, however, project mostaspects into the three semiotic dimension and there seems to be a strongtendency to do so today.
3189	Stiegler, A. D.;	An Algebraic Compiler for the FORTRAN Assembly Program	An algebraic compiler has been written which may be added to the FORTRANAssembly Program. This compiler will expand all algebraic statements with thefollowing operations: addition, subtraction, multiplication and division. Itwill compile multi-level expressions in floating-point arithmetic (this iseasily be revised to fixed-point).
3190	Solomon, M.B.;	Correction to Economies of Scale and the IBM System/360	On page 439, a "typical" instruction mix id discussed and the timing computedas outlined in that page. Through an undetected programming error, the times andthe resulting regression equation are slightly in error.
3191	Langdon, Glen G.;	Generating Permutations by Nested Cycling	The purpose of this letter is two_fold: first to give due credit to theTompkins-Paige algorithm, and second to clarify a comment by Hill, CR Review13891 on "Programs for Permutations".
3192	Vanderburgh, A.;	The Lincoln Keyboard - a Typewriter Keyboard Designedfor Computers Input Flexibility	A new typewriter keyboard, for direct and punched paper tape computer inputwill replace the usual commercial keyboard with 88 characters chosen for theconvenience  of programmers. The Lincoln Keyboard is expected to facilitatethe programming of algorithmic process and should allow considerableflexibility in assembly and utility routines.
3193			Work is in progress on a formula coding technique allowing direct entryinto the computer of formulae typed on an 84 character Flexo-writer. ThisFlexo-writer will be modified for automatic half-line advance and retract,without carriage return, to permit completely general sub and superscripting.
3194	Dunham, B.;Fridshal, R.;Sward, G. L.;	A Non-heuristic Program for Proving Elementary Logical Theorems	The paper discusses problems involved in designing a device capable ofdistinguishing among speech events that are normally recognized as differentby native speakers of a particular language. Parallels between these problemsand those of chemical analysis are pointed out.
3195	Gorn, S.;	Reiteration of ACM Policy Toward Standardization	The periodic change in officers, chairman and editors which usually followsas election occasionally results in a change in policy. In the case of thisdepartment there is no radical change, but this is nevertheless the proper timeto reiterate ans underline ACM's policy with respect to standardization in thecomputer area.
3196	Mooers, C. N.;	The Reactive Typewriter Program	84-character keyboard including alphabetical upper and lower case for goodreadability. If the machine is restricted to only a single case, the lower caseis preferred. The reactive typewriter should be portable. the reactivetypewriter should operate over any commercially used, dial-type telephone(voice) or telegraph (Telex) line or over leased (nondial) telegraph linesinterchangeably.
3197	Gorn, S.;Bemer, R. W.;Green, J.;	Structures of Standards-Processing Organizations in the Computer Area	In line with the ACM's policy statement [Comm. ACM 5 (Nov. 1962), 547-549],the following organizational descriptions have been provided in order todescribe standardization activities pertinent to computers and informationprocessing.
3198	Greem, J.;	Microprogramming, Emulators and Programming Languages	The problem we have been concerned with is that of converting language toaction - or intellectual energy to mechanical energy. The medium that we usefor this purpose is language and therefore we are preoccupied with the subjectof language. In the areas of language investigation we have concentrated firston formalizing syntax and then on semantics.
3199	Gotlieb, C. C.;Novak, R. J.;	ALGEM - An Algebraic Manipulator	ALGEM is a package of subprograms written in Slip, FORTRAN IV and MAP 7094II to manipulate algebraic expressions. Algem's basic algebraic operations areadditions, subtractions, multiplications, division and exponentiation. It iscapable of handling any number of single letter variables, variable exponents,and of finding the highest common factor of two polynomials. Also included aresuch functions as substitution, differentiation, determining coefficients ofspecified variables, solving a linear equation, basic I/O routines plus otherspecial purpose and arithmetic routines. The major innovation of Algem overother manipulators is the assignment of types to all expressions and the useof a standard ordering procedure.
3200	Cuthill, E.;	A FORMAC Program for the Solution of Linear Boundary and Initial ValueProblems	A computer program is described which has been developed for obtainingapproximate solutions to linear initial and boundary-value problems involvingdifferential equations. For each problem, input to the program includes:1. The equations (in symbolic form) to be satisfied  -  the differentialequations, equations describing auxiliary conditions such as boundaryconditions, etc.2. A numerical description of the regions in which each of the equationsare to be satisfied.3. Sets of functions (in symbolic form) to be used in linear combinationsto approximate the solution functions. Give the above input, the programgenerates an approximation to the solutions of the specified problemm in termsof the specified functions which is optimum in the least-squares sense.
3201	Danby, J.;Deprit, A.;Rom, A.;	Symbolic Manipulation of Poisson Series	Poisson series of three variables are manageable symbolically through as aset of formal subroutines written partially in the IBM 7094 machine language,but to be called in the FORTRAN language for use in Fortran  programs. Aneffort has been made to supply those operations which are most required bycelestial mechanics. The routines are entirely self-contained subroutinesand require only standard Fortran input/output units 5 and 6; they are designto avoid waste and overflow of core storage space.
3202	Bender, B.;	MANIP: A Computer System for Algebra and Analytic Differentiation	A mathematical expression to be operated upon is written in FORTRAN-likenotation and stored in the computer as a string of BCD characters with allblanks removed. It may be as complicated as desired (parentheses nested withoutrestriction, etc.) so long as the entire expression (or any subsequent form)does not exceed 5000 characters. The problemm of performing algebraic operationsand obtaining analytic derivatives was translated into that of identifying andmanipulating character sequences. Programs which resulted were written inFORTRAN IV for a CDC 3600 and are discussed in detail.
3203	Fletcher, J. G.;	GRAD Assistant - A Program for Symbolic Algebraic Manipulation andDifferentiation	The General Recursive Algebra and Differentiation Assistant (GRAD Assistant)now under development is a set of LISP functions which symbolically manipulateabd differentiate algebraic expressions. It is designed for use with problemmsin which a large amount of routine manipulation is to be done by a programwithout human intervention. Thus, GRAD must recognize necessary simplificationswithout external guidance. While some complicated expressions (notably onesinvolving nested radicals and trigonometric functions) do not yield completelyto the present version, it has proved quite useful indeed.
